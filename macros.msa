**********************************
* definicion de macro utilizados *
**********************************
* limpia display bitmap
		MACRO	%CLS
		
		ldx		#display
		ldaa		#ARRAY_L
		ldab		#$03
cls\@		stab		0,X
		inx
		deca
		bne		cls\<

		ENDMAC

* espera
		MACRO	%EXPECT
		
expe\@		jsr		read_kb
		tsta
		bmi		expe\.
		cmpa		#\0
		bne		expe\<

		ENDMAC

* soltar
		MACRO	%KEEP
		
keep\@		jsr		read_kb
		cmpa		#\0
		beq		keep\<

		ENDMAC
* filter array auxiliar
		MACRO	%FIX_ARRY

		ldx		SA_MAT,Y
		ldaa		#ARRAY_L
loop\@		ldab		0,X
		andb		#11000000b
		orab		#00000011b
		stab		0,X
		inx
		deca
		bne		loop\<

		ENDMAC

* clear array auxiliar
		MACRO	%CLR_AUX
		
		ldx		#arry_aux
		ldaa		#N_AUX*SA_SIZE
		ldab		#0
		jsr		clrarray

		ENDMAC

* para ir actualizando el display
		MACRO	%REFRESH

		pshy
		ldx		SA_MAT,Y
		pshx
		clra
		psha
		ldy		#display
		pshy
		ldaa		#ARRAY_L
		psha
		jsr		mirror
		pula
		puly
		pula
		pulx
		puly	

		ENDMAC

* saltos que pasan el limite
		MACRO	%GOTO

		jmp	\0

		ENDMAC

* agrega posicion al arreglo de posiciones prohibidas
* toma en A la fila y en B la columna
		MACRO	%PROH_POS
		
		tsta
		bne		oka\@
		ldaa		#$FF
oka\<		tstb
		bne		okb\@
		ldab		#$FF
okb\<		psha
		pshb
		ldx		#arry_pr
		pshx
		clra
		psha
		jsr		play_wrt
		pula
		pulx
		pulb
		pula

		ENDMAC

* agrega las posiciones de la periferia de una posicion al arreglo
* de prohibidas, tomando en A la fila y en B la columna de dicha posicion

		MACRO	%PROH_PER
			
		inca
		%PROH_POS
	
		deca
		incb
		%PROH_POS

		deca
		decb
		%PROH_POS

		inca
		decb
		%PROH_POS

		ENDMAC

* escribe una posicion en la matriz del tablero y toma
* por A como fila y B como columna de dicha posicion
* el parametro \0 indica que tipo de barco es el grabado

		MACRO	%SET_POS

		ldaa		#\0
		psha
		ldaa		SA_FIL,Y
		psha
		ldab		SA_COL,Y
		pshb
		ldx		SA_MAT,Y
		pshx
		clra
		psha
		jsr		writepos
		pula
		pulx
		pulb
		pula
		pula

		ENDMAC

* me fijo que la posicion este o no este en el arreglo de posiciones
* prohibidas, la A se toma como la fila y la B como la columna

		MACRO	%IS_PROH

		psha
		pshb
		ldx		#arry_pr
		pshx
		clra
		psha
		jsr		play_src
		pula
		pulx
		pulb
		pula

		ENDMAC

* agrego una posicion al arreglo auxiliar para cargueros
* y se toma que en A esta la fila y en B la columna

		MACRO	%AUX_POS

		psha
		pshb
		ldx		#arry_aux
		pshx
		clra
		psha
		jsr		play_wrt
		pula
		pulx
		pulb
		pula

		ENDMAC

* establezco el arreglo auxiliar con las posiciones
* perifericas del carguero, toma en A fila y B columna
* de la parte uno del carguero

		MACRO	%SET_AUX
		
		inca
		%AUX_POS
		
		deca
		incb
		%AUX_POS
		
		deca
		decb
		%AUX_POS

		inca
		decb
		%AUX_POS		

		ENDMAC

* invocar a la subrutina writepos
	MACRO	%WRITEPOS
		ldab		\0
		pshb				;se envía el byte a escribir
		ldab		12,x
		pshb				;se envía letra (fila)
		ldab		11,x
		pshb				;se envía num (columna)
		ldy		9,x
		pshy				;se envía dirección de inicio de matriz
		ldab		8,x
		pshb				;se envía jugador atacado
		jsr		writepos
		%CLRST		6
	ENDMAC

* invocar a la subrutina writepos
	MACRO	%PLAY_WRT
		ldab		12,x
		pshb				;se envía letra (fila)
		ldab		11,x
		pshb				;se envía num (columna)
		ldy		14,x
		pshy				;se envía inicio de array
		ldab		8,x
		pshb				;se envía jugador atacado
		jsr		play_wrt
		%CLRST		5
	ENDMAC

* realizar back up de AccA, AccB, IX e IY
	MACRO	%BACKUP
		psha
		pshb
		pshx
		pshy
	ENDMAC

* realizar restore de AccA, AccB, IX e IY
	MACRO	%RESTORE
		puly
		pulx
		pulb
		pula
	ENDMAC

* limpiar el stack de datos enviados
	MACRO	%CLRST
CONT_M		SET	\0
		IF CONT_M > 0
		ins
		%CLRST	CONT_M-1
		ENDIF
	ENDMAC
* activar un led en funcion de una variable
	MACRO	%LED_INV
		ldaa		PORTA
		eora		#SHF_LED
		staa		PORTA
	ENDMAC

* declarar o reservar variables locales en subrutinas
	MACRO	%MALLOC
		IF \0 > 0
		tsx
		xgdx
		subd	#\0
		xgdx
		txs
		ENDIF
	ENDMAC

* liberar espacio de variables en subrutinas
	MACRO	%RELMEM
		IF \0 > 0
		tsx
		xgdx
		addd	#\0
		xgdx
		txs
		ENDIF		
	ENDMAC
