################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              27/Nov/17  14:53:31    #
#                                                                              #
#       Source   =   main_bn.msa                                               #
#       List     =   main_bn.lst                                               #
#       Object   =   main_bn.r07                                               #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                           p68h11
    2                 $macros.msa
    3                 **********************************
    4                 * definicion de macro utilizados *
    5                 **********************************
    6                 * invocar a la subrutina writepos
    7  0000                   MACRO   %WRITEPOS
    8                                 ldab            \0
    9                                 pshb                            ;se envía el byte a escribir
   10                                 ldab            12,x
   11                                 pshb                            ;se envía letra (fila)
   12                                 ldab            11,x
   13                                 pshb                            ;se envía num (columna)
   14                                 ldy             9,x
   15                                 pshy                            ;se envía dirección de inicio de matriz
   16                                 ldab            8,x
   17                                 pshb                            ;se envía jugador atacado
   18                                 jsr             writepos
   19                                 %CLRST          6
   20  0000                   ENDMAC
   21                 
   22                 * invocar a la subrutina writepos
   23  0000                   MACRO   %PLAY_WRT
   24                                 ldab            12,x
   25                                 pshb                            ;se envía letra (fila)
   26                                 ldab            11,x
   27                                 pshb                            ;se envía num (columna)
   28                                 ldy             14,x
   29                                 pshy                            ;se envía inicio de array
   30                                 ldab            8,x
   31                                 pshb                            ;se envía jugador atacado
   32                                 jsr             play_wrt
   33                                 %CLRST          5
   34  0000                   ENDMAC
   35                 
   36                 * realizar back up de AccA, AccB, IX e IY
   37  0000                   MACRO   %BACKUP
   38                                 psha
   39                                 pshb
   40                                 pshx
   41                                 pshy
   42  0000                   ENDMAC
   43                 
   44                 * realizar restore de AccA, AccB, IX e IY
   45  0000                   MACRO   %RESTORE
   46                                 puly
   47                                 pulx
   48                                 pulb
   49                                 pula
   50  0000                   ENDMAC
   51                 
   52                 * limpiar el stack de datos enviados
   53  0000                   MACRO   %CLRST
   54                 CONT_M          SET     \0
   55                                 IF CONT_M > 0
   56                                 ins
   57                                 %CLRST  CONT_M-1
   58                                 ENDIF
   59  0000                   ENDMAC
   60                 * activar un led en funcion de una variable
   61  0000                   MACRO   %LED_INV
   62                                 ldaa            PORTA
   63                                 eora            #SHF_LED
   64                                 staa            PORTA
   65  0000                   ENDMAC
   66                 
   67                 * declarar o reservar variables locales en subrutinas
   68  0000                   MACRO   %MALLOC
   69                                 IF \0 > 0
   70                                 tsx
   71                                 xgdx
   72                                 subd    #\0
   73                                 xgdx
   74                                 txs
   75                                 ENDIF
   76  0000                   ENDMAC
   77                 
   78                 * liberar espacio de variables en subrutinas
   79  0000                   MACRO   %RELMEM
   80                                 IF \0 > 0
   81                                 tsx
   82                                 xgdx
   83                                 addd    #\0
   84                                 xgdx
   85                                 txs
   86                                 ENDIF           
   87  0000                   ENDMAC
   88                 
   89                 *************
   90                 * CONSTANTS *
   91                 *************
   92  0000           P1              EQU             0
   93  0001           P2              EQU             1
   94  0002           PN              EQU             2               ;cantidad de jugadores
   95                 
   96  0006           MAX_C           EQU             6
   97  0001           MIN_C           EQU             1
   98  000F           MAX_F           EQU             15
   99  000A           MIN_F           EQU             10              
  100                 
  101  0003           WAT_NP          EQU             00000011b
  102  0043           SUB_NP          EQU             01000011b
  103  0083           SHI_NP          EQU             10000011b
  104  0008           WATER           EQU             00001000b       ;verde
  105  0050           SUNK_SUB        EQU             01010000b       ;bordeaux para submarinos
  106  00B0           HIT             EQU             10110000b       ;naranja
  107  0090           SUNK_SHI        EQU             10010000b       ;bordeaux para cargueros
  108                 
  109  0006           FILA            EQU             6
  110  0006           COL             EQU             6
  111  0024           ARRAY_L         EQU             FILA*COL
  112  000A           NORM            EQU             10
  113                 
  114  000A           MIN_FIL         EQU             10
  115  000F           MAX_FIL         EQU             15
  116  0001           MIN_COL         EQU             1
  117  0006           MAX_COL         EQU             6       
  118                 
  119  0000           CONT            EQU             0
  120  0002           FILA_L          EQU             2
  121  0001           COL_L           EQU             1
  122                 
  123  0003           INPUTS          EQU             3
  124                 
  125  FFFF           NONE            EQU             -1
  126  0003           MASK_FIL        EQU             3
  127  0002           MASK_COL        EQU             2
  128  0001           COL_CONT        EQU             1
  129  0000           KB_PRESS        EQU             0
  130                 
  131                 ******* Ports ***************************
  132                 
  133  1007           DDRC            EQU             $1007           ;data direction register for C
  134  1002           PIOC            EQU             $1002           ;for strobe B assertion change
  135  1005           PORTCL          EQU             $1005           ;port C latched
  136  1004           PORTB           EQU             $1004           ;port B
  137  1003           PORTC           EQU             $1003           ;rows
  138  1000           PORTA           EQU             $1000
  139                 
  140  0040           SHF_LED         EQU             $40
  141                 
  142                 ******* Cols and Row Ports **************
  143                 
  144  1003           ROWS            EQU             PORTC           ;outputs
  145  1005           COLS            EQU             PORTCL          ;inputs
  146                 
  147                 ***** Col Mask **************************
  148  0010           COL0            EQU             00010000b
  149                          
  150                 ***** Row Masks *************************
  151                 
  152  000E           FIL0            EQU             00001110b       ;mascaras para manejo de filas
  153  000D           FIL1            EQU             00001101b
  154  000B           FIL2            EQU             00001011b
  155  0007           FIL3            EQU             00000111b
  156                 
  157  0004           LENGTH          EQU             4               ; largo del display
  158                 
  159                 ****** Keyboard Mask ********************
  160  0008           Button_1        EQU             8
  161  0009           Button_2        EQU             9
  162  000A           Button_3        EQU             10
  163  000C           Button_4        EQU             12
  164  000D           Button_5        EQU             13
  165  000E           Button_6        EQU             14              
  166  0000           Button_A        EQU             0       
  167  0001           Button_B        EQU             1
  168  0002           Button_C        EQU             2
  169  0004           Button_D        EQU             4
  170  0005           Button_E        EQU             5
  171  0006           Button_F        EQU             6
  172  000B           B_fire          EQU             11
  173  0003           B_P1            EQU             3
  174  0007           B_P2            EQU             7
  175  000F           B_reset         EQU             15
  176                 
  177  0000           EOT             EQU             0
  178  0020           ESP             EQU             $20     
  179                 
  180                 *========================================================
  181                 * El siguiente es un programa de un juego de batalla
  182                 * naval para dos jugadores en el emulador Wookie FX.
  183                 *========================================================
  184                 
  185                 ****************
  186                 * MAIN PROGRAM *
  187                 ****************
  188                 
  189  2000                           ORG             $2000
  190  2000           init            EQU             *
  191  2000 8E41F3                    lds             #STACKP
  192                 
  193  2003 BD25A8                    jsr             initdis         ;inicialización de display 7 seg
  194  2006 BD25A0                    jsr             init_kb         ;inicialización de teclado
  195                 
  196  2009 CE421C                    ldx             #hitlist
  197  200C 3C                        pshx                            ;se envía inicio de arreglo de barcos a poner en 0
  198  200D 8626                      ldaa            #(HITSIZE*2)
  199  200F 36                        psha                            ;se envía el tamaño del arreglo a limpiar
  200  2010 BD2442                    jsr             clrzone
  201  2013                           %CLRST          3
    /  0003           CONT_M          SET     3
    /  2013                           IF CONT_M > 0
    /  2013 31                        ins
    /  2014                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2014                           IF CONT_M > 0
    /  2014 31                        ins
    /  2015                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2015                           IF CONT_M > 0
    /  2015 31                        ins
    /  2016                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
  202                 
  203  2016           main            EQU             *
  204                 * ELEGIR JUGADOR
  205  2016 BD245A                    jsr             whoplays        ;se recibirá en AccA el jugador a atacar a continuación
  206  2019 B741F4                    staa            player          ;se habilita la siguiente jugada
  207                 
  208                 * ENVIAR TABLERO DE JUGADOR A ATACAR A DISPLAY
  209  201C CE5000                    ldx             #p_board
  210  201F 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  211  2020 B641F4                    ldaa            player
  212  2023 36                        psha                            ;se envía el jugador atacado
  213  2024 CE5F00                    ldx             #display
  214  2027 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  215  2028 8624                      ldaa            #ARRAY_L
  216  202A 36                        psha                            ;se envía el tamaño de la matriz tablero
  217  202B BD2336                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  218  202E                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  202E                           IF CONT_M > 0
    /  202E 31                        ins
    /  202F                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  202F                           IF CONT_M > 0
    /  202F 31                        ins
    /  2030                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2030                           IF CONT_M > 0
    /  2030 31                        ins
    /  2031                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2031                           IF CONT_M > 0
    /  2031 31                        ins
    /  2032                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2032                           IF CONT_M > 0
    /  2032 31                        ins
    /  2033                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2033                           IF CONT_M > 0
    /  2033 31                        ins
    /  2034                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2034                           ENDIF
    /  2034                           ENDIF
    /  2034                           ENDIF
    /  2034                           ENDIF
    /  2034                           ENDIF
    /  2034                           ENDIF
    /  2034                           ENDIF
  219                 
  220                 * INGRESAR POSICIÓN A ATACAR
  221  2034 BD246F                    jsr             input           ;se llama a la subrutina de interfaz de usuario
  222  2037 B741F5                    staa            letra_p         ;se recibe en AccA la letra jugada (fila) y en AccB el número (columna)
  223  203A F741F6                    stab            num_p           ;se guarda la jugada
  224                 
  225                 * VERIFICAR QUE NO SEA POSICIÓN DE BARCO YA ATACADA
  226  203D B641F5                    ldaa            letra_p
  227  2040 36                        psha                            ;se envía la letra jugada
  228  2041 F641F6                    ldab            num_p
  229  2044 37                        pshb                            ;se envía el número jugado
  230  2045 CE421C                    ldx             #hitlist
  231  2048 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  232  2049 B641F4                    ldaa            player
  233  204C 36                        psha                            ;se envía el jugador a atacar
  234  204D BD23C1                    jsr             play_src        ;se recibirá el carry en 1 si la posición corresponde a un barco ya atacado
  235  2050                           %CLRST          5               ;se limpia el stack
    /  0005           CONT_M          SET     5
    /  2050                           IF CONT_M > 0
    /  2050 31                        ins
    /  2051                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2051                           IF CONT_M > 0
    /  2051 31                        ins
    /  2052                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2052                           IF CONT_M > 0
    /  2052 31                        ins
    /  2053                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2053                           IF CONT_M > 0
    /  2053 31                        ins
    /  2054                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2054                           IF CONT_M > 0
    /  2054 31                        ins
    /  2055                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2055                           ENDIF
    /  2055                           ENDIF
    /  2055                           ENDIF
    /  2055                           ENDIF
    /  2055                           ENDIF
    /  2055                           ENDIF
  236  2055 25BF                      bcs             main            ;si la posición ya fue jugada, se pierde el turno y pasa al siguiente
  237                 
  238                 * MANDAR QUE JUGADOR ESTÁ JUGANDO AL DISPLAY
  239  2057 B641F4                    ldaa            player
  240  205A 36                        psha                            ;se envía el jugador que está siendo atacado
  241  205B BD2612                    jsr             turn
  242  205E                           %CLRST          1
    /  0001           CONT_M          SET     1
    /  205E                           IF CONT_M > 0
    /  205E 31                        ins
    /  205F                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  205F                           ENDIF
    /  205F                           ENDIF
  243                 
  244                 * BUSCAR EL BYTE ATACADO EN EL TABLERO DEL JUGADOR ATACADO
  245  205F B641F5                    ldaa            letra_p
  246  2062 36                        psha                            ;se envía le letra jugada
  247  2063 F641F6                    ldab            num_p
  248  2066 37                        pshb                            ;se envía el número jugado
  249  2067 CE5000                    ldx             #p_board
  250  206A 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  251  206B F641F4                    ldab            player
  252  206E 37                        pshb                            ;se envía el jugador a atacar
  253  206F BD235F                    jsr             fetchpos
  254  2072                           %CLRST          4               ;se limpia el stack
    /  0004           CONT_M          SET     4
    /  2072                           IF CONT_M > 0
    /  2072 31                        ins
    /  2073                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2073                           IF CONT_M > 0
    /  2073 31                        ins
    /  2074                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2074                           IF CONT_M > 0
    /  2074 31                        ins
    /  2075                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2075                           IF CONT_M > 0
    /  2075 31                        ins
    /  2076                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2076                           ENDIF
    /  2076                           ENDIF
    /  2076                           ENDIF
    /  2076                           ENDIF
    /  2076                           ENDIF
  255  2076 32                        pula                            ;se toma del stack el dato del byte jugado
  256                 
  257                 * ATACAR
  258  2077 CE421C                    ldx             #hitlist
  259  207A 3C                        pshx                            ;se envía inicio del arreglo de barcos atacados
  260  207B 36                        psha                            ;se envía el byte a jugado
  261  207C B641F5                    ldaa            letra_p
  262  207F 36                        psha                            ;se envía le letra jugada
  263  2080 F641F6                    ldab            num_p
  264  2083 37                        pshb                            ;se envía el número jugado
  265  2084 CE5000                    ldx             #p_board
  266  2087 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  267  2088 F641F4                    ldab            player
  268  208B 37                        pshb                            ;se envía el jugador a atacar
  269  208C BD20CE                    jsr             gameplay
  270  208F                           %CLRST          8               ;se limpia el stack
    /  0008           CONT_M          SET     8
    /  208F                           IF CONT_M > 0
    /  208F 31                        ins
    /  2090                           %CLRST  CONT_M-1
    /  0007           CONT_M          SET     CONT_M-1
    /  2090                           IF CONT_M > 0
    /  2090 31                        ins
    /  2091                           %CLRST  CONT_M-1
    /  0006           CONT_M          SET     CONT_M-1
    /  2091                           IF CONT_M > 0
    /  2091 31                        ins
    /  2092                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2092                           IF CONT_M > 0
    /  2092 31                        ins
    /  2093                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2093                           IF CONT_M > 0
    /  2093 31                        ins
    /  2094                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2094                           IF CONT_M > 0
    /  2094 31                        ins
    /  2095                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2095                           IF CONT_M > 0
    /  2095 31                        ins
    /  2096                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2096                           IF CONT_M > 0
    /  2096 31                        ins
    /  2097                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
    /  2097                           ENDIF
  271                 
  272                 * ACTUALIZAR DISPLAY CON LA POSICIÓN YA ATACADA
  273  2097 CE5000                    ldx             #p_board
  274  209A 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  275  209B B641F4                    ldaa            player
  276  209E 36                        psha                            ;se envía el jugador atacado
  277  209F CE5F00                    ldx             #display
  278  20A2 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  279  20A3 8624                      ldaa            #ARRAY_L
  280  20A5 36                        psha                            ;se envía el tamaño de la matriz tablero
  281  20A6 BD2336                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  282  20A9                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20A9                           IF CONT_M > 0
    /  20A9 31                        ins
    /  20AA                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20AA                           IF CONT_M > 0
    /  20AA 31                        ins
    /  20AB                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20AB                           IF CONT_M > 0
    /  20AB 31                        ins
    /  20AC                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20AC                           IF CONT_M > 0
    /  20AC 31                        ins
    /  20AD                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20AD                           IF CONT_M > 0
    /  20AD 31                        ins
    /  20AE                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20AE                           IF CONT_M > 0
    /  20AE 31                        ins
    /  20AF                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20AF                           ENDIF
    /  20AF                           ENDIF
    /  20AF                           ENDIF
    /  20AF                           ENDIF
    /  20AF                           ENDIF
    /  20AF                           ENDIF
    /  20AF                           ENDIF
  283                 
  284                 * CONTAR BARCOS ATACADOS A VER SI EL JUGADOR GANÓ               
  285  20AF CE421C                    ldx             #hitlist
  286  20B2 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  287  20B3 B641F4                    ldaa            player
  288  20B6 36                        psha                            ;se envía el jugador a atacar
  289  20B7 BD23F4                    jsr             play_cnt
  290  20BA                           %CLRST          2
    /  0002           CONT_M          SET     2
    /  20BA                           IF CONT_M > 0
    /  20BA 31                        ins
    /  20BB                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20BB                           IF CONT_M > 0
    /  20BB 31                        ins
    /  20BC                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20BC                           ENDIF
    /  20BC                           ENDIF
    /  20BC                           ENDIF
  291  20BC 32                        pula                            ;se recibe la cantidad de bytes contados
  292  20BD 8109                      cmpa            #9              
  293  20BF 2703                      beq             end_game        ;si se llegó al máximo de barcos, se termina el juego
  294                 
  295  20C1 7E2016                    jmp             main
  296                 
  297                 * MANDAR MENSAJE A DISPLAY DE QUIÉN GANÓ
  298  20C4           end_game        EQU             *
  299  20C4 B641F4                    ldaa            player
  300  20C7 36                        psha
  301  20C8 BD25F4                    jsr             winner
  302  20CB                           %CLRST          1
    /  0001           CONT_M          SET     1
    /  20CB                           IF CONT_M > 0
    /  20CB 31                        ins
    /  20CC                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20CC                           ENDIF
    /  20CC                           ENDIF
  303                 
  304  20CC           end_loop        EQU             *
  305  20CC 20FE                      bra             end_loop
  306                 
  307                 **************
  308                 * SUBRUTINES *
  309                 **************
  310                 *=======================================================================
  311                 * subrutina gameplay
  312                 * Función: Determina si la posición jugada en el juego de batalla naval
  313                 *          para Wookie FX fue "agua", "submarion" o "carguero", y toma 
  314                 *          la decisión de qué hacer al respecto.
  315                 * Recibe: - Dirección arreglo auxiliar de barcos
  316                 *         - Byte a jugar.
  317                 *         - FILA del array (En HEX, de $0A (fil.0) en adelante)
  318                 *         - COLUMNA del array (en HEX)
  319                 *         - Dirección de comienzo del arreglo (2 bytes)
  320                 *         - Número de arreglo (de 0 en adelante) (número de jugador)
  321                 *       TODO POR STACK.
  322                 * Devuelve: parámetro jugado en posición correspondiente.
  323                 * Requiere: 
  324                 *=======================================================================
  325  20CE           gameplay        EQU             *
  326  20CE                           %BACKUP
    /  20CE 36                        psha
    /  20CF 37                        pshb
    /  20D0 3C                        pshx
    /  20D1 183C                      pshy
  327                                 
  328  20D3 30                        tsx                             ;se usa el IX como frame pointer
  329  20D4 A60D                      ldaa            13,x            ;se carga en AccA el byte a analizar
  330  20D6 84C0                      anda            #11000000b      ;se enmascan los bits 0 a 5, para analizar los más significativos
  331                 
  332  20D8           gp_water        EQU             *
  333  20D8 2620                      bne             gp_sub          ;se estudia si era agua
  334  20DA                           %WRITEPOS       #WATER          ;se cambia el color en el tablero
    /  20DA C608                      ldab            #WATER
    /  20DC 37                        pshb                            ;se envía el byte a escribir
    /  20DD E60C                      ldab            12,x
    /  20DF 37                        pshb                            ;se envía letra (fila)
    /  20E0 E60B                      ldab            11,x
    /  20E2 37                        pshb                            ;se envía num (columna)
    /  20E3 1AEE09                    ldy             9,x
    /  20E6 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20E8 E608                      ldab            8,x
    /  20EA 37                        pshb                            ;se envía jugador atacado
    /  20EB BD2390                    jsr             writepos
    /  20EE                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20EE                           IF CONT_M > 0
    /  20EE 31                        ins
    /  20EF                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20EF                           IF CONT_M > 0
    /  20EF 31                        ins
    /  20F0                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20F0                           IF CONT_M > 0
    /  20F0 31                        ins
    /  20F1                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20F1                           IF CONT_M > 0
    /  20F1 31                        ins
    /  20F2                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20F2                           IF CONT_M > 0
    /  20F2 31                        ins
    /  20F3                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20F3                           IF CONT_M > 0
    /  20F3 31                        ins
    /  20F4                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20F4                           ENDIF
    /  20F4                           ENDIF
    /  20F4                           ENDIF
    /  20F4                           ENDIF
    /  20F4                           ENDIF
    /  20F4                           ENDIF
    /  20F4                           ENDIF
  335  20F4                           %RESTORE
    /  20F4 1838                      puly
    /  20F6 38                        pulx
    /  20F7 33                        pulb
    /  20F8 32                        pula
  336  20F9 39                        rts
  337                 
  338  20FA           gp_sub          EQU             *
  339  20FA 8140                      cmpa            #01000000b      ;se estudia si era un submarino
  340  20FC 2636                      bne             gp_shi_r
  341  20FE                           %WRITEPOS       #SUNK_SUB       ;se cambia el color en el tablero
    /  20FE C650                      ldab            #SUNK_SUB
    /  2100 37                        pshb                            ;se envía el byte a escribir
    /  2101 E60C                      ldab            12,x
    /  2103 37                        pshb                            ;se envía letra (fila)
    /  2104 E60B                      ldab            11,x
    /  2106 37                        pshb                            ;se envía num (columna)
    /  2107 1AEE09                    ldy             9,x
    /  210A 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  210C E608                      ldab            8,x
    /  210E 37                        pshb                            ;se envía jugador atacado
    /  210F BD2390                    jsr             writepos
    /  2112                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2112                           IF CONT_M > 0
    /  2112 31                        ins
    /  2113                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2113                           IF CONT_M > 0
    /  2113 31                        ins
    /  2114                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2114                           IF CONT_M > 0
    /  2114 31                        ins
    /  2115                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2115                           IF CONT_M > 0
    /  2115 31                        ins
    /  2116                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2116                           IF CONT_M > 0
    /  2116 31                        ins
    /  2117                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2117                           IF CONT_M > 0
    /  2117 31                        ins
    /  2118                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2118                           ENDIF
    /  2118                           ENDIF
    /  2118                           ENDIF
    /  2118                           ENDIF
    /  2118                           ENDIF
    /  2118                           ENDIF
    /  2118                           ENDIF
  342  2118                           %PLAY_WRT                       ;se agraga la posición al array de barcos atacados
    /  2118 E60C                      ldab            12,x
    /  211A 37                        pshb                            ;se envía letra (fila)
    /  211B E60B                      ldab            11,x
    /  211D 37                        pshb                            ;se envía num (columna)
    /  211E 1AEE0E                    ldy             14,x
    /  2121 183C                      pshy                            ;se envía inicio de array
    /  2123 E608                      ldab            8,x
    /  2125 37                        pshb                            ;se envía jugador atacado
    /  2126 BD2418                    jsr             play_wrt
    /  2129                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2129                           IF CONT_M > 0
    /  2129 31                        ins
    /  212A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  212A                           IF CONT_M > 0
    /  212A 31                        ins
    /  212B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  212B                           IF CONT_M > 0
    /  212B 31                        ins
    /  212C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  212C                           IF CONT_M > 0
    /  212C 31                        ins
    /  212D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  212D                           IF CONT_M > 0
    /  212D 31                        ins
    /  212E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  212E                           ENDIF
    /  212E                           ENDIF
    /  212E                           ENDIF
    /  212E                           ENDIF
    /  212E                           ENDIF
    /  212E                           ENDIF
  343  212E                           %RESTORE
    /  212E 1838                      puly
    /  2130 38                        pulx
    /  2131 33                        pulb
    /  2132 32                        pula
  344  2133 39                        rts
  345                 
  346  2134           gp_shi_r        EQU             *               ;si no era ninguno de los anteriores, es un carguero
  347  2134 E60B                      ldab            11,x
  348  2136 C106                      cmpb            #MAX_C
  349  2138 276D                      beq             gp_shi_l        ;si está en el borde derecho, se continúa
  350  213A E60C                      ldab            12,x
  351  213C 37                        pshb                            ;se envía la letra (fila)
  352  213D E60B                      ldab            11,x
  353  213F 5C                        incb                            ;se avanza a la derecha
  354  2140 37                        pshb                            ;se envía el num (columna)
  355  2141 1AEE0E                    ldy             14,x
  356  2144 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  357  2146 E608                      ldab            8,x
  358  2148 37                        pshb                            ;se envía el jugador atacado
  359  2149 BD23C1                    jsr             play_src        ;se busca la posición de la derecha
  360  214C                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  214C                           IF CONT_M > 0
    /  214C 31                        ins
    /  214D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  214D                           IF CONT_M > 0
    /  214D 31                        ins
    /  214E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  214E                           IF CONT_M > 0
    /  214E 31                        ins
    /  214F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  214F                           IF CONT_M > 0
    /  214F 31                        ins
    /  2150                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2150                           IF CONT_M > 0
    /  2150 31                        ins
    /  2151                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2151                           ENDIF
    /  2151                           ENDIF
    /  2151                           ENDIF
    /  2151                           ENDIF
    /  2151                           ENDIF
    /  2151                           ENDIF
  361  2151 2454                      bcc             gp_shi_l        ;si no había barco atacado en la derecha, se busca la izquierda
  362  2153                           %WRITEPOS       #SUNK_SHI       
    /  2153 C690                      ldab            #SUNK_SHI
    /  2155 37                        pshb                            ;se envía el byte a escribir
    /  2156 E60C                      ldab            12,x
    /  2158 37                        pshb                            ;se envía letra (fila)
    /  2159 E60B                      ldab            11,x
    /  215B 37                        pshb                            ;se envía num (columna)
    /  215C 1AEE09                    ldy             9,x
    /  215F 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2161 E608                      ldab            8,x
    /  2163 37                        pshb                            ;se envía jugador atacado
    /  2164 BD2390                    jsr             writepos
    /  2167                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2167                           IF CONT_M > 0
    /  2167 31                        ins
    /  2168                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2168                           IF CONT_M > 0
    /  2168 31                        ins
    /  2169                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2169                           IF CONT_M > 0
    /  2169 31                        ins
    /  216A                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  216A                           IF CONT_M > 0
    /  216A 31                        ins
    /  216B                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  216B                           IF CONT_M > 0
    /  216B 31                        ins
    /  216C                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  216C                           IF CONT_M > 0
    /  216C 31                        ins
    /  216D                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  216D                           ENDIF
    /  216D                           ENDIF
    /  216D                           ENDIF
    /  216D                           ENDIF
    /  216D                           ENDIF
    /  216D                           ENDIF
    /  216D                           ENDIF
  363  216D 6C0B                      inc             11,x
  364  216F                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  216F C690                      ldab            #SUNK_SHI
    /  2171 37                        pshb                            ;se envía el byte a escribir
    /  2172 E60C                      ldab            12,x
    /  2174 37                        pshb                            ;se envía letra (fila)
    /  2175 E60B                      ldab            11,x
    /  2177 37                        pshb                            ;se envía num (columna)
    /  2178 1AEE09                    ldy             9,x
    /  217B 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  217D E608                      ldab            8,x
    /  217F 37                        pshb                            ;se envía jugador atacado
    /  2180 BD2390                    jsr             writepos
    /  2183                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2183                           IF CONT_M > 0
    /  2183 31                        ins
    /  2184                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2184                           IF CONT_M > 0
    /  2184 31                        ins
    /  2185                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2185                           IF CONT_M > 0
    /  2185 31                        ins
    /  2186                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2186                           IF CONT_M > 0
    /  2186 31                        ins
    /  2187                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2187                           IF CONT_M > 0
    /  2187 31                        ins
    /  2188                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2188                           IF CONT_M > 0
    /  2188 31                        ins
    /  2189                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2189                           ENDIF
    /  2189                           ENDIF
    /  2189                           ENDIF
    /  2189                           ENDIF
    /  2189                           ENDIF
    /  2189                           ENDIF
    /  2189                           ENDIF
  365  2189 6A0B                      dec             11,x            ;se recupera el dato
  366  218B                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  218B E60C                      ldab            12,x
    /  218D 37                        pshb                            ;se envía letra (fila)
    /  218E E60B                      ldab            11,x
    /  2190 37                        pshb                            ;se envía num (columna)
    /  2191 1AEE0E                    ldy             14,x
    /  2194 183C                      pshy                            ;se envía inicio de array
    /  2196 E608                      ldab            8,x
    /  2198 37                        pshb                            ;se envía jugador atacado
    /  2199 BD2418                    jsr             play_wrt
    /  219C                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  219C                           IF CONT_M > 0
    /  219C 31                        ins
    /  219D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  219D                           IF CONT_M > 0
    /  219D 31                        ins
    /  219E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  219E                           IF CONT_M > 0
    /  219E 31                        ins
    /  219F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  219F                           IF CONT_M > 0
    /  219F 31                        ins
    /  21A0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21A0                           IF CONT_M > 0
    /  21A0 31                        ins
    /  21A1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21A1                           ENDIF
    /  21A1                           ENDIF
    /  21A1                           ENDIF
    /  21A1                           ENDIF
    /  21A1                           ENDIF
    /  21A1                           ENDIF
  367  21A1                           %RESTORE
    /  21A1 1838                      puly
    /  21A3 38                        pulx
    /  21A4 33                        pulb
    /  21A5 32                        pula
  368  21A6 39                        rts
  369                 
  370  21A7           gp_shi_l        EQU             *
  371  21A7 E60B                      ldab            11,x
  372  21A9 C101                      cmpb            #MIN_C
  373  21AB 276D                      beq             gp_shi_u        ;si está en el borde izquierdo, se continúa
  374  21AD E60C                      ldab            12,x
  375  21AF 37                        pshb                            ;se envía la letra (fila)
  376  21B0 E60B                      ldab            11,x
  377  21B2 5A                        decb                            ;se retrocede a la izquierda
  378  21B3 37                        pshb                            ;se envía el número (columna)
  379  21B4 1AEE0E                    ldy             14,x
  380  21B7 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  381  21B9 E608                      ldab            8,x
  382  21BB 37                        pshb                            ;se envía el jugador atacado
  383  21BC BD23C1                    jsr             play_src        ;se busca la posición de la izquierda
  384  21BF                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21BF                           IF CONT_M > 0
    /  21BF 31                        ins
    /  21C0                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21C0                           IF CONT_M > 0
    /  21C0 31                        ins
    /  21C1                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21C1                           IF CONT_M > 0
    /  21C1 31                        ins
    /  21C2                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21C2                           IF CONT_M > 0
    /  21C2 31                        ins
    /  21C3                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21C3                           IF CONT_M > 0
    /  21C3 31                        ins
    /  21C4                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21C4                           ENDIF
    /  21C4                           ENDIF
    /  21C4                           ENDIF
    /  21C4                           ENDIF
    /  21C4                           ENDIF
    /  21C4                           ENDIF
  385  21C4 2454                      bcc             gp_shi_u        ;si no había barco atacado a la izquierda, se busca arriba
  386  21C6                           %WRITEPOS       #SUNK_SHI       
    /  21C6 C690                      ldab            #SUNK_SHI
    /  21C8 37                        pshb                            ;se envía el byte a escribir
    /  21C9 E60C                      ldab            12,x
    /  21CB 37                        pshb                            ;se envía letra (fila)
    /  21CC E60B                      ldab            11,x
    /  21CE 37                        pshb                            ;se envía num (columna)
    /  21CF 1AEE09                    ldy             9,x
    /  21D2 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21D4 E608                      ldab            8,x
    /  21D6 37                        pshb                            ;se envía jugador atacado
    /  21D7 BD2390                    jsr             writepos
    /  21DA                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21DA                           IF CONT_M > 0
    /  21DA 31                        ins
    /  21DB                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21DB                           IF CONT_M > 0
    /  21DB 31                        ins
    /  21DC                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21DC                           IF CONT_M > 0
    /  21DC 31                        ins
    /  21DD                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21DD                           IF CONT_M > 0
    /  21DD 31                        ins
    /  21DE                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21DE                           IF CONT_M > 0
    /  21DE 31                        ins
    /  21DF                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21DF                           IF CONT_M > 0
    /  21DF 31                        ins
    /  21E0                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21E0                           ENDIF
    /  21E0                           ENDIF
    /  21E0                           ENDIF
    /  21E0                           ENDIF
    /  21E0                           ENDIF
    /  21E0                           ENDIF
    /  21E0                           ENDIF
  387  21E0 6A0B                      dec             11,x
  388  21E2                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  21E2 C690                      ldab            #SUNK_SHI
    /  21E4 37                        pshb                            ;se envía el byte a escribir
    /  21E5 E60C                      ldab            12,x
    /  21E7 37                        pshb                            ;se envía letra (fila)
    /  21E8 E60B                      ldab            11,x
    /  21EA 37                        pshb                            ;se envía num (columna)
    /  21EB 1AEE09                    ldy             9,x
    /  21EE 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21F0 E608                      ldab            8,x
    /  21F2 37                        pshb                            ;se envía jugador atacado
    /  21F3 BD2390                    jsr             writepos
    /  21F6                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21F6                           IF CONT_M > 0
    /  21F6 31                        ins
    /  21F7                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21F7                           IF CONT_M > 0
    /  21F7 31                        ins
    /  21F8                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21F8                           IF CONT_M > 0
    /  21F8 31                        ins
    /  21F9                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21F9                           IF CONT_M > 0
    /  21F9 31                        ins
    /  21FA                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21FA                           IF CONT_M > 0
    /  21FA 31                        ins
    /  21FB                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21FB                           IF CONT_M > 0
    /  21FB 31                        ins
    /  21FC                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21FC                           ENDIF
    /  21FC                           ENDIF
    /  21FC                           ENDIF
    /  21FC                           ENDIF
    /  21FC                           ENDIF
    /  21FC                           ENDIF
    /  21FC                           ENDIF
  389  21FC 6C0B                      inc             11,x            ;se recupera el dato
  390  21FE                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  21FE E60C                      ldab            12,x
    /  2200 37                        pshb                            ;se envía letra (fila)
    /  2201 E60B                      ldab            11,x
    /  2203 37                        pshb                            ;se envía num (columna)
    /  2204 1AEE0E                    ldy             14,x
    /  2207 183C                      pshy                            ;se envía inicio de array
    /  2209 E608                      ldab            8,x
    /  220B 37                        pshb                            ;se envía jugador atacado
    /  220C BD2418                    jsr             play_wrt
    /  220F                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  220F                           IF CONT_M > 0
    /  220F 31                        ins
    /  2210                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2210                           IF CONT_M > 0
    /  2210 31                        ins
    /  2211                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2211                           IF CONT_M > 0
    /  2211 31                        ins
    /  2212                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2212                           IF CONT_M > 0
    /  2212 31                        ins
    /  2213                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2213                           IF CONT_M > 0
    /  2213 31                        ins
    /  2214                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2214                           ENDIF
    /  2214                           ENDIF
    /  2214                           ENDIF
    /  2214                           ENDIF
    /  2214                           ENDIF
    /  2214                           ENDIF
  391  2214                           %RESTORE
    /  2214 1838                      puly
    /  2216 38                        pulx
    /  2217 33                        pulb
    /  2218 32                        pula
  392  2219 39                        rts
  393                 
  394  221A           gp_shi_u        EQU             *
  395  221A E60C                      ldab            12,x
  396  221C C10A                      cmpb            #MIN_F
  397  221E 276D                      beq             gp_shi_d        ;si está en el borde superior, se continúa
  398  2220 E60C                      ldab            12,x
  399  2222 5A                        decb                            ;se va a la posición de arriba
  400  2223 37                        pshb                            ;se envía la letra (fila)
  401  2224 E60B                      ldab            11,x
  402  2226 37                        pshb                            ;se envía el num (columna)
  403  2227 1AEE0E                    ldy             14,x
  404  222A 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  405  222C E608                      ldab            8,x
  406  222E 37                        pshb                            ;se envía el jugador atacado
  407  222F BD23C1                    jsr             play_src        ;se busca la posición de arriba
  408  2232                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2232                           IF CONT_M > 0
    /  2232 31                        ins
    /  2233                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2233                           IF CONT_M > 0
    /  2233 31                        ins
    /  2234                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2234                           IF CONT_M > 0
    /  2234 31                        ins
    /  2235                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2235                           IF CONT_M > 0
    /  2235 31                        ins
    /  2236                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2236                           IF CONT_M > 0
    /  2236 31                        ins
    /  2237                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2237                           ENDIF
    /  2237                           ENDIF
    /  2237                           ENDIF
    /  2237                           ENDIF
    /  2237                           ENDIF
    /  2237                           ENDIF
  409  2237 2454                      bcc             gp_shi_d        ;si no había barco atacado arriba, se busca abajo
  410  2239                           %WRITEPOS       #SUNK_SHI       
    /  2239 C690                      ldab            #SUNK_SHI
    /  223B 37                        pshb                            ;se envía el byte a escribir
    /  223C E60C                      ldab            12,x
    /  223E 37                        pshb                            ;se envía letra (fila)
    /  223F E60B                      ldab            11,x
    /  2241 37                        pshb                            ;se envía num (columna)
    /  2242 1AEE09                    ldy             9,x
    /  2245 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2247 E608                      ldab            8,x
    /  2249 37                        pshb                            ;se envía jugador atacado
    /  224A BD2390                    jsr             writepos
    /  224D                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  224D                           IF CONT_M > 0
    /  224D 31                        ins
    /  224E                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  224E                           IF CONT_M > 0
    /  224E 31                        ins
    /  224F                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  224F                           IF CONT_M > 0
    /  224F 31                        ins
    /  2250                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2250                           IF CONT_M > 0
    /  2250 31                        ins
    /  2251                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2251                           IF CONT_M > 0
    /  2251 31                        ins
    /  2252                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2252                           IF CONT_M > 0
    /  2252 31                        ins
    /  2253                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2253                           ENDIF
    /  2253                           ENDIF
    /  2253                           ENDIF
    /  2253                           ENDIF
    /  2253                           ENDIF
    /  2253                           ENDIF
    /  2253                           ENDIF
  411  2253 6A0C                      dec             12,x
  412  2255                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2255 C690                      ldab            #SUNK_SHI
    /  2257 37                        pshb                            ;se envía el byte a escribir
    /  2258 E60C                      ldab            12,x
    /  225A 37                        pshb                            ;se envía letra (fila)
    /  225B E60B                      ldab            11,x
    /  225D 37                        pshb                            ;se envía num (columna)
    /  225E 1AEE09                    ldy             9,x
    /  2261 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2263 E608                      ldab            8,x
    /  2265 37                        pshb                            ;se envía jugador atacado
    /  2266 BD2390                    jsr             writepos
    /  2269                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2269                           IF CONT_M > 0
    /  2269 31                        ins
    /  226A                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  226A                           IF CONT_M > 0
    /  226A 31                        ins
    /  226B                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  226B                           IF CONT_M > 0
    /  226B 31                        ins
    /  226C                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  226C                           IF CONT_M > 0
    /  226C 31                        ins
    /  226D                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  226D                           IF CONT_M > 0
    /  226D 31                        ins
    /  226E                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  226E                           IF CONT_M > 0
    /  226E 31                        ins
    /  226F                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  226F                           ENDIF
    /  226F                           ENDIF
    /  226F                           ENDIF
    /  226F                           ENDIF
    /  226F                           ENDIF
    /  226F                           ENDIF
    /  226F                           ENDIF
  413  226F 6C0C                      inc             12,x            ;se recupera el dato
  414  2271                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2271 E60C                      ldab            12,x
    /  2273 37                        pshb                            ;se envía letra (fila)
    /  2274 E60B                      ldab            11,x
    /  2276 37                        pshb                            ;se envía num (columna)
    /  2277 1AEE0E                    ldy             14,x
    /  227A 183C                      pshy                            ;se envía inicio de array
    /  227C E608                      ldab            8,x
    /  227E 37                        pshb                            ;se envía jugador atacado
    /  227F BD2418                    jsr             play_wrt
    /  2282                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2282                           IF CONT_M > 0
    /  2282 31                        ins
    /  2283                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2283                           IF CONT_M > 0
    /  2283 31                        ins
    /  2284                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2284                           IF CONT_M > 0
    /  2284 31                        ins
    /  2285                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2285                           IF CONT_M > 0
    /  2285 31                        ins
    /  2286                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2286                           IF CONT_M > 0
    /  2286 31                        ins
    /  2287                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2287                           ENDIF
    /  2287                           ENDIF
    /  2287                           ENDIF
    /  2287                           ENDIF
    /  2287                           ENDIF
    /  2287                           ENDIF
  415  2287                           %RESTORE
    /  2287 1838                      puly
    /  2289 38                        pulx
    /  228A 33                        pulb
    /  228B 32                        pula
  416  228C 39                        rts
  417                 
  418  228D           gp_shi_d        EQU             *
  419  228D E60C                      ldab            12,x
  420  228F C10F                      cmpb            #MAX_F
  421  2291 276D                      beq             gp_shi_h        ;si está en el borde inferior, se continúa
  422  2293 E60C                      ldab            12,x
  423  2295 5C                        incb                            ;se va a la posición de abajo
  424  2296 37                        pshb                            ;se envía la letra (fila)
  425  2297 E60B                      ldab            11,x
  426  2299 37                        pshb                            ;se envía el num (columna)
  427  229A 1AEE0E                    ldy             14,x
  428  229D 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  429  229F E608                      ldab            8,x
  430  22A1 37                        pshb                            ;se envía el jugador atacado
  431  22A2 BD23C1                    jsr             play_src        ;se busca la posición de abajo
  432  22A5                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22A5                           IF CONT_M > 0
    /  22A5 31                        ins
    /  22A6                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22A6                           IF CONT_M > 0
    /  22A6 31                        ins
    /  22A7                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22A7                           IF CONT_M > 0
    /  22A7 31                        ins
    /  22A8                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22A8                           IF CONT_M > 0
    /  22A8 31                        ins
    /  22A9                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22A9                           IF CONT_M > 0
    /  22A9 31                        ins
    /  22AA                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22AA                           ENDIF
    /  22AA                           ENDIF
    /  22AA                           ENDIF
    /  22AA                           ENDIF
    /  22AA                           ENDIF
    /  22AA                           ENDIF
  433  22AA 2454                      bcc             gp_shi_h        ;si no había barco atacado abajo, el carguero está tocado
  434  22AC                           %WRITEPOS       #SUNK_SHI       
    /  22AC C690                      ldab            #SUNK_SHI
    /  22AE 37                        pshb                            ;se envía el byte a escribir
    /  22AF E60C                      ldab            12,x
    /  22B1 37                        pshb                            ;se envía letra (fila)
    /  22B2 E60B                      ldab            11,x
    /  22B4 37                        pshb                            ;se envía num (columna)
    /  22B5 1AEE09                    ldy             9,x
    /  22B8 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22BA E608                      ldab            8,x
    /  22BC 37                        pshb                            ;se envía jugador atacado
    /  22BD BD2390                    jsr             writepos
    /  22C0                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22C0                           IF CONT_M > 0
    /  22C0 31                        ins
    /  22C1                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22C1                           IF CONT_M > 0
    /  22C1 31                        ins
    /  22C2                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22C2                           IF CONT_M > 0
    /  22C2 31                        ins
    /  22C3                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22C3                           IF CONT_M > 0
    /  22C3 31                        ins
    /  22C4                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22C4                           IF CONT_M > 0
    /  22C4 31                        ins
    /  22C5                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22C5                           IF CONT_M > 0
    /  22C5 31                        ins
    /  22C6                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22C6                           ENDIF
    /  22C6                           ENDIF
    /  22C6                           ENDIF
    /  22C6                           ENDIF
    /  22C6                           ENDIF
    /  22C6                           ENDIF
    /  22C6                           ENDIF
  435  22C6 6C0C                      inc             12,x
  436  22C8                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  22C8 C690                      ldab            #SUNK_SHI
    /  22CA 37                        pshb                            ;se envía el byte a escribir
    /  22CB E60C                      ldab            12,x
    /  22CD 37                        pshb                            ;se envía letra (fila)
    /  22CE E60B                      ldab            11,x
    /  22D0 37                        pshb                            ;se envía num (columna)
    /  22D1 1AEE09                    ldy             9,x
    /  22D4 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22D6 E608                      ldab            8,x
    /  22D8 37                        pshb                            ;se envía jugador atacado
    /  22D9 BD2390                    jsr             writepos
    /  22DC                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22DC                           IF CONT_M > 0
    /  22DC 31                        ins
    /  22DD                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22DD                           IF CONT_M > 0
    /  22DD 31                        ins
    /  22DE                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22DE                           IF CONT_M > 0
    /  22DE 31                        ins
    /  22DF                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22DF                           IF CONT_M > 0
    /  22DF 31                        ins
    /  22E0                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22E0                           IF CONT_M > 0
    /  22E0 31                        ins
    /  22E1                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22E1                           IF CONT_M > 0
    /  22E1 31                        ins
    /  22E2                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22E2                           ENDIF
    /  22E2                           ENDIF
    /  22E2                           ENDIF
    /  22E2                           ENDIF
    /  22E2                           ENDIF
    /  22E2                           ENDIF
    /  22E2                           ENDIF
  437  22E2 6A0C                      dec             12,x            ;se recupera el dato
  438  22E4                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22E4 E60C                      ldab            12,x
    /  22E6 37                        pshb                            ;se envía letra (fila)
    /  22E7 E60B                      ldab            11,x
    /  22E9 37                        pshb                            ;se envía num (columna)
    /  22EA 1AEE0E                    ldy             14,x
    /  22ED 183C                      pshy                            ;se envía inicio de array
    /  22EF E608                      ldab            8,x
    /  22F1 37                        pshb                            ;se envía jugador atacado
    /  22F2 BD2418                    jsr             play_wrt
    /  22F5                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22F5                           IF CONT_M > 0
    /  22F5 31                        ins
    /  22F6                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22F6                           IF CONT_M > 0
    /  22F6 31                        ins
    /  22F7                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22F7                           IF CONT_M > 0
    /  22F7 31                        ins
    /  22F8                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22F8                           IF CONT_M > 0
    /  22F8 31                        ins
    /  22F9                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22F9                           IF CONT_M > 0
    /  22F9 31                        ins
    /  22FA                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22FA                           ENDIF
    /  22FA                           ENDIF
    /  22FA                           ENDIF
    /  22FA                           ENDIF
    /  22FA                           ENDIF
    /  22FA                           ENDIF
  439  22FA                           %RESTORE
    /  22FA 1838                      puly
    /  22FC 38                        pulx
    /  22FD 33                        pulb
    /  22FE 32                        pula
  440  22FF 39                        rts
  441                 
  442  2300           gp_shi_h        EQU             *
  443  2300                           %WRITEPOS       #HIT            ;se marca al carguero como tocado
    /  2300 C6B0                      ldab            #HIT
    /  2302 37                        pshb                            ;se envía el byte a escribir
    /  2303 E60C                      ldab            12,x
    /  2305 37                        pshb                            ;se envía letra (fila)
    /  2306 E60B                      ldab            11,x
    /  2308 37                        pshb                            ;se envía num (columna)
    /  2309 1AEE09                    ldy             9,x
    /  230C 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  230E E608                      ldab            8,x
    /  2310 37                        pshb                            ;se envía jugador atacado
    /  2311 BD2390                    jsr             writepos
    /  2314                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2314                           IF CONT_M > 0
    /  2314 31                        ins
    /  2315                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2315                           IF CONT_M > 0
    /  2315 31                        ins
    /  2316                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2316                           IF CONT_M > 0
    /  2316 31                        ins
    /  2317                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2317                           IF CONT_M > 0
    /  2317 31                        ins
    /  2318                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2318                           IF CONT_M > 0
    /  2318 31                        ins
    /  2319                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2319                           IF CONT_M > 0
    /  2319 31                        ins
    /  231A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  231A                           ENDIF
    /  231A                           ENDIF
    /  231A                           ENDIF
    /  231A                           ENDIF
    /  231A                           ENDIF
    /  231A                           ENDIF
    /  231A                           ENDIF
  444  231A                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  231A E60C                      ldab            12,x
    /  231C 37                        pshb                            ;se envía letra (fila)
    /  231D E60B                      ldab            11,x
    /  231F 37                        pshb                            ;se envía num (columna)
    /  2320 1AEE0E                    ldy             14,x
    /  2323 183C                      pshy                            ;se envía inicio de array
    /  2325 E608                      ldab            8,x
    /  2327 37                        pshb                            ;se envía jugador atacado
    /  2328 BD2418                    jsr             play_wrt
    /  232B                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  232B                           IF CONT_M > 0
    /  232B 31                        ins
    /  232C                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  232C                           IF CONT_M > 0
    /  232C 31                        ins
    /  232D                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  232D                           IF CONT_M > 0
    /  232D 31                        ins
    /  232E                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  232E                           IF CONT_M > 0
    /  232E 31                        ins
    /  232F                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  232F                           IF CONT_M > 0
    /  232F 31                        ins
    /  2330                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2330                           ENDIF
    /  2330                           ENDIF
    /  2330                           ENDIF
    /  2330                           ENDIF
    /  2330                           ENDIF
    /  2330                           ENDIF
  445  2330                           %RESTORE
    /  2330 1838                      puly
    /  2332 38                        pulx
    /  2333 33                        pulb
    /  2334 32                        pula
  446  2335 39                        rts
  447                 
  448                 *====================================================================================
  449                 * Subrutina "MIRROR"
  450                 *
  451                 * Descripción:  Esta subrutina copia el contenido de las posiciones de un array fuente
  452                 *               a un espacio de memoria destino.
  453                 * Parámetros de entrada:
  454                 *               - Dirección de comienzo de array FUENTE
  455                 *               - Número de arreglo contenido en otro arreglo (número de jugador)(0 en adelante)
  456                 *               - Dirección de DESTINO de la copia 
  457                 *               - Número de posiciones a copiar (un byte, hasta 255 posiciones.)
  458                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  459                 *
  460                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  461                 *       Se destruirá el dato de la dirección del array de origen.
  462                 *               
  463                 * Parámetros de salida: NINGUNO
  464                 *       
  465                 *
  466                 * Consideraciones:
  467                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  468                 *
  469                 *====================================================================================
  470                 
  471  2336           mirror          EQU             *       
  472                         
  473  2336                           %BACKUP
    /  2336 36                        psha
    /  2337 37                        pshb
    /  2338 3C                        pshx
    /  2339 183C                      pshy
  474  233B 30                        tsx                             ;creo frame pointer
  475  233C A60B                      ldaa            11,x            ;cargo número de jugador
  476  233E E608                      ldab            8,x             ;cargo longitud de la copia (del array a copiar)
  477  2340 3D                        mul                             ;obtengo offset de jugador
  478  2341 E30C                      addd            12,x            ;sumo offset de jugador
  479  2343 ED0C                      std             12,x            ;guardo la dirección con offset del array fuente
  480                 
  481  2345 A60C                      ldaa            12,x            ;cargo longitud de copia en contador
  482  2347 2710                      beq             mi_end          ;si es cero, vuelvo desde subrutina
  483  2349 1AEE09                    ldy             9,x             ;cargo índice a destino de la copia.
  484  234C EE0C                      ldx             12,x            ;cargo índice a array origen de copia.
  485                 
  486  234E           mi_loop         EQU             *
  487                 
  488  234E E600                      ldab            0,x             ;cargo byte a copiar
  489  2350 18E700                    stab            0,y             ;copio byte en destino
  490  2353 08                        inx                             ;siguiente byte
  491  2354 1808                      iny                             ;siguiente byte
  492  2356 4A                        deca                            ;decremento contador
  493  2357 26F5                      bne             mi_loop
  494                 
  495  2359           mi_end          EQU             *
  496                 
  497  2359                           %RESTORE
    /  2359 1838                      puly
    /  235B 38                        pulx
    /  235C 33                        pulb
    /  235D 32                        pula
  498                         
  499  235E 39                        rts     
  500                                 
  501                                                 
  502                 *====================================================================================
  503                 * Subrutina "FETCHPOS"
  504                 *
  505                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  506                 *               determinada posición, y devuelve el byte que se encuentra
  507                 *               en esa posición por stack. Subrutina limitada a longitud
  508                 *               de elementos del array de un byte.
  509                 *
  510                 * Parámetros de entrada:
  511                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  512                 *               - COLUMNA del array (en HEX)
  513                 *               - Dirección de comienzo del arreglo (2 bytes)
  514                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  515                 *
  516                 *       Todos los parámetros se reciben por stack en el orden indicado.
  517                 *       Se destruirá el dato del índice al arreglo.
  518                 *               
  519                 * Parámetros de salida:
  520                 *               - Byte encontrado en esa posición (se devuelve por stack)
  521                 *
  522                 *
  523                 * Consideraciones:
  524                 *               - Antes de recuperar el byte en stack se debe normalizar el mismo
  525                 *                 en 4 posiciones (4 bytes)
  526                 *               - Requiere definición de constante "ARRAY_L"
  527                 *
  528                 *====================================================================================
  529                 
  530  235F           fetchpos        EQU             *
  531                 
  532  235F                           %BACKUP
    /  235F 36                        psha
    /  2360 37                        pshb
    /  2361 3C                        pshx
    /  2362 183C                      pshy
  533  2364 30                        tsx                             ;creo frame pointer
  534  2365 A608                      ldaa            8,x             ;cargo numero de jugador
  535  2367 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  536  2369 3D                        mul                             ;obtengo offset de jugador
  537  236A E309                      addd            9,x             ;sumo offset de jugador a top of array
  538  236C ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  539                 
  540  236E A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  541  2370 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  542  2372 10                        sba                             ;obtengo numero de fila
  543  2373 C606                      ldab            #COL            ;cargo longitud de fila
  544  2375 3D                        mul                             ;obtengo offset de fila
  545  2376 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  546  2378 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  547                 
  548  237A E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  549  237C 5A                        decb                            ;normalizo offset de columna
  550  237D 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  551  237E E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  552  2380 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  553                 
  554  2382 1AEE09                    ldy             9,x             ;cargo en IY la dirección del byte que se desea obtener
  555  2385 18A600                    ldaa            0,y             ;cargo el byte a devolver en AccA
  556  2388 A70C                      staa            12,x            ;guardo el byte a devolver en stack
  557  238A                           %RESTORE
    /  238A 1838                      puly
    /  238C 38                        pulx
    /  238D 33                        pulb
    /  238E 32                        pula
  558                                 
  559  238F 39                        rts
  560                                 
  561                                 
  562                 
  563                 *====================================================================================
  564                 * Subrutina "WRITEPOS"
  565                 *
  566                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  567                 *               determinada posición, y escribe en la misma un byte de
  568                 *               datos que será recibido como parámetro de entrada por stack.
  569                 *
  570                 * Parámetros de entrada:
  571                 *               - BYTE a escribir en la posición indicada
  572                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  573                 *               - COLUMNA del array (en HEX)
  574                 *               - Dirección de comienzo del arreglo (2 bytes)
  575                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  576                 *
  577                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  578                 *       Se destruirá el dato del índice al arreglo.
  579                 *               
  580                 * Parámetros de salida: NINGUNO
  581                 *       
  582                 *
  583                 * Consideraciones:
  584                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  585                 *               - Requiere definición de constante "ARRAY_L"
  586                 *
  587                 *====================================================================================
  588                 
  589  2390           writepos        EQU             *
  590                 
  591  2390                           %BACKUP
    /  2390 36                        psha
    /  2391 37                        pshb
    /  2392 3C                        pshx
    /  2393 183C                      pshy
  592  2395 30                        tsx                             ;creo frame pointer
  593  2396 A608                      ldaa            8,x             ;cargo numero de jugador
  594  2398 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  595  239A 3D                        mul                             ;obtengo offset de jugador
  596  239B E309                      addd            9,x             ;sumo offset de jugador a top of array
  597  239D ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  598                 
  599  239F A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  600  23A1 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  601  23A3 10                        sba                             ;obtengo numero de fila
  602  23A4 C606                      ldab            #COL            ;cargo longitud de fila
  603  23A6 3D                        mul                             ;obtengo offset de fila
  604  23A7 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  605  23A9 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  606                 
  607  23AB E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  608  23AD 5A                        decb                            ;normalizo offset de columna
  609  23AE 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  610  23AF E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  611  23B1 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  612                 
  613  23B3 1AEE09                    ldy             9,x             ;cargo en IY la dirección donde se desea escribir
  614  23B6 A60D                      ldaa            13,x            ;cargo en AccA el byte que se quiere escribir en el arreglo
  615  23B8 18A700                    staa            0,y             ;escribo el byte sobre el arreglo
  616  23BB                           %RESTORE
    /  23BB 1838                      puly
    /  23BD 38                        pulx
    /  23BE 33                        pulb
    /  23BF 32                        pula
  617                                 
  618  23C0 39                        rts
  619                 *====================================================================================
  620                 * Subrutina "PLAY_SRC"
  621                 *
  622                 * Descripción:  Esta subrutina busca dos bytes consecutivos (posicion jugada) dentro de un arreglo.
  623                 *               El valor $00 podrá estar en el array solo como terminador
  624                 * Parámetros de entrada:
  625                 *               - Byte1 a buscar (en este caso, n° fila)
  626                 *               - Byte2 a buscar (en este caso, n° columna)
  627                 *               - Dirección de inicio del array
  628                 *               - Número de jugador (0 o mayor)
  629                 *
  630                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  631                 *               
  632                 * Parámetros de salida:
  633                 *               - Carry en 1, si se encontró la posición.
  634                 *       
  635                 *
  636                 * Consideraciones:
  637                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones antes de
  638                 *                 recuperar el parámetro de salida.
  639                 *
  640                 *====================================================================================
  641                 
  642  23C1           play_src        EQU             *               
  643                                         
  644  23C1                           %BACKUP
    /  23C1 36                        psha
    /  23C2 37                        pshb
    /  23C3 3C                        pshx
    /  23C4 183C                      pshy
  645  23C6 30                        tsx                             ;creo frame pointer
  646  23C7 A608                      ldaa            8,x             ;cargo número de array (jugador)
  647  23C9 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  648  23CB 3D                        mul                             ;obtengo offset de jugador
  649  23CC E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  650  23CE 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  651                 
  652  23D0           ps_loop         EQU             *
  653                 
  654  23D0 18A600                    ldaa            0,y             ;cargo byte1 a comparar
  655  23D3 2718                      beq             ps_ntfnd        ;si encontré el terminador, el valor requerido no está en el array
  656                 
  657  23D5 A10C                      cmpa            12,x            ;comparo con el byte1 a buscar
  658  23D7 2706                      beq             ps_next         ;si coinciden, busco el byte 2
  659  23D9 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  660  23DB 1808                      iny
  661  23DD 20F1                      bra             ps_loop         ;vuelvo a comparar
  662                 
  663  23DF           ps_next         EQU             *
  664                 
  665  23DF 18E601                    ldab            1,y             ;cargo byte a continuación del anterior
  666  23E2 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  667  23E4 1808                      iny
  668  23E6 E10B                      cmpb            11,x            ;comparo con byte2
  669  23E8 26E6                      bne             ps_loop         ;si no son iguales, sigo buscando
  670  23EA 0D                        sec                             ;set del carry para informar que se encontró el valor
  671  23EB 2001                      bra             ps_end
  672                                         
  673  23ED           ps_ntfnd        EQU             *
  674                 
  675  23ED 0C                        clc                             ;carry en 0 para informar que no se encontró el valor
  676                 
  677  23EE           ps_end          EQU             *
  678                                 
  679  23EE                           %RESTORE
    /  23EE 1838                      puly
    /  23F0 38                        pulx
    /  23F1 33                        pulb
    /  23F2 32                        pula
  680                 
  681  23F3 39                        rts
  682                 
  683                 
  684                 
  685                                         
  686                 
  687                                         
  688                 
  689                 *====================================================================================
  690                 * Subrutina "PLAY_CNT"
  691                 *
  692                 * Descripción:  Esta subrutina cuenta la cantidad de datos de dos bytes que se encuentran en una
  693                 *               determinada zona de memoria configurada como array. Se supone que $00 no es un dato presente en dicho array, 
  694                 *               usándose solamente como terminador del mismo.
  695                 *
  696                 * Parámetros de entrada:
  697                 *               - Dirección de inicio del array
  698                 *               - Número de jugador (0 o mayor)
  699                 *
  700                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  701                 *               
  702                 * Parámetros de salida:
  703                 *               - Cantidad de datos de dos bytes encontrados, por stack (máximo 255 datos).
  704                 *       
  705                 *
  706                 * Consideraciones:
  707                 *               - Luego de invocada, se debe normalizar el stack en 2 posiciones antes de
  708                 *                 recuperar el parámetro de salida.
  709                 *
  710                 *====================================================================================
  711                 
  712  23F4           play_cnt        EQU             *
  713                 
  714  23F4                           %BACKUP
    /  23F4 36                        psha
    /  23F5 37                        pshb
    /  23F6 3C                        pshx
    /  23F7 183C                      pshy
  715  23F9 30                        tsx                             ;creo frame pointer
  716  23FA A608                      ldaa            8,x             ;cargo número de array (jugador)
  717  23FC C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  718  23FE 3D                        mul                             ;obtengo offset de jugador
  719  23FF E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  720  2401 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  721  2403 4F                        clra                            ;inicializo contador
  722                                         
  723  2404           pc_loop         EQU             *               
  724                                         
  725  2404 18E600                    ldab            0,y             ;cargo byte a comparar
  726  2407 2707                      beq             pc_end          ;si es terminador, terminé de buscar
  727  2409 1808                      iny                             ;si no es terminador, me posiciono sobre siguiente dato de 
  728  240B 1808                      iny                             ;2 bytes
  729  240D 4C                        inca                            ;incremento contador
  730  240E 20F4                      bra             pc_loop         ;vuelvo a comparar
  731                                         
  732  2410           pc_end          EQU             *       
  733                                         
  734  2410 A70A                      staa            10,x            ;devuelvo valor por stack
  735  2412                           %RESTORE
    /  2412 1838                      puly
    /  2414 38                        pulx
    /  2415 33                        pulb
    /  2416 32                        pula
  736                                 
  737  2417 39                        rts
  738                 
  739                 
  740                 *====================================================================================
  741                 * Subrutina "PLAY_WRT"
  742                 *
  743                 * Descripción:  Esta subrutina escribe dos bytes distintos (en este caso, la posición 
  744                 *               jugada, compuesta de una letra y un número) en la primera posición "libre"
  745                 *               de un array y en la siguiente. La subrutina escribirá los datos desde la primera posición con ceros
  746                 *               que encuentre en el array, por lo que el mismo NO podrá contener el dato "$00" en ninguno
  747                 *               de sus bytes, caso contrario la subrutina lo interpretará como vacío y sobreescribirá información. Se
  748                 *               supone que el array tendrá por lo menos, dos posiciones libres.
  749                 *
  750                 * Parámetros de entrada:
  751                 *               - Primer byte a escribir (en este caso, fila jugada)
  752                 *               - Byte a escribir a continuación del primero (en este caso, columna jugada)
  753                 *               - Dirección de inicio del array en el que se va a escribir
  754                 *               - Número de jugador (0 o mayor)
  755                 *
  756                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  757                 *               
  758                 * Parámetros de salida: NINGUNO
  759                 *       
  760                 *
  761                 * Consideraciones:
  762                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones
  763                 *
  764                 *====================================================================================
  765                 
  766  2418           play_wrt        EQU             *
  767                 
  768  2418                           %BACKUP
    /  2418 36                        psha
    /  2419 37                        pshb
    /  241A 3C                        pshx
    /  241B 183C                      pshy
  769  241D 30                        tsx                             ;creo frame pointer
  770  241E A608                      ldaa            8,x             ;cargo número de array (jugador)
  771  2420 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  772  2422 3D                        mul                             ;obtengo offset de jugador
  773  2423 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  774  2425 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  775                 
  776                 
  777  2427           pw_loop         EQU             *
  778                 
  779  2427 18A600                    ldaa            0,y             ;cargo byte del array
  780  242A 2704                      beq             pw_end          ;si es cero, entonces escribo los datos
  781  242C 1808                      iny                             ;si no es cero, me posiciono sobre la siguiente posición
  782  242E 20F7                      bra             pw_loop         ;vuelvo a buscar ceros
  783                 
  784  2430           pw_end          EQU             *
  785                 
  786  2430 A60C                      ldaa            12,x            ;cargo primer byte a escribir
  787  2432 18A700                    staa            0,y             ;guardo primer byte en memoria
  788  2435 1808                      iny                             ;me posiciono en el siguiente byte
  789  2437 A60B                      ldaa            11,x            ;cargo segundo byte a escribir
  790  2439 18A700                    staa            0,y             ;guardo segundo byte en memoria
  791  243C                           %RESTORE
    /  243C 1838                      puly
    /  243E 38                        pulx
    /  243F 33                        pulb
    /  2440 32                        pula
  792                 
  793  2441 39                        rts
  794                 
  795                 ***************************************************************************************
  796                 *Subrutina "CLRZONE"
  797                 *Función: "borra" (guarda ceros) una determinada zona de memoria.
  798                 *         
  799                 *
  800                 * Parámetros de entrada: -Dirección de comienzo de sección a borrar (por stack)
  801                 *                        -Longitud de zona de memoria (por stack)
  802                 *                       
  803                 *
  804                 * Parámetros de salida: Ninguno
  805                 *
  806                 * consideraciones: 
  807                 *                  - Incluir macros "%BACKUP" y "%RESTORE".
  808                 *                                       
  809                 *************************************************************************************** 
  810  2442           clrzone         EQU     *
  811                 
  812  2442                           %BACKUP                         ;backup de registros en stack
    /  2442 36                        psha
    /  2443 37                        pshb
    /  2444 3C                        pshx
    /  2445 183C                      pshy
  813                 
  814  2447 30                        tsx
  815  2448 A608                      ldaa    8,x                     ;cargo contador con longitud de zona a borrar
  816  244A EE09                      ldx     9,x                     ;cargo puntero zona de memoria a borrar
  817  244C D600                      ldab    $00                     ;cargo el cero
  818  244E           clr_loop        EQU     *
  819  244E E700                      stab    0,x                     ;guardo caracter en posicion del array
  820  2450 08                        inx                             ;siguiente posición     
  821  2451 4A                        deca                            ;decremento contador
  822  2452 26FA                      bne     clr_loop                ;si no es cero, escribo en la posición siguiente.
  823                 
  824  2454                           %RESTORE                        :restauro backup en registros
    /  2454 1838                      puly
    /  2456 38                        pulx
    /  2457 33                        pulb
    /  2458 32                        pula
  825                 
  826  2459 39                        rts
  827                 
  828                 *---------------------------------------
  829                 * WhoPlays: subrutina para ver que 
  830                 *           jugador juega
  831                 *---------------------------------------
  832                 
  833  245A           whoplays        EQU             *
  834                 
  835  245A BD251F    wait_ply        jsr             read_kb
  836  245D 4D                        tsta
  837  245E 2BFA                      bmi             wait_ply
  838  2460 8103                      cmpa            #B_P1
  839  2462 2708                      beq             play_p1
  840  2464 8107                      cmpa            #B_P2
  841  2466 26F2                      bne             wait_ply
  842  2468 8600                      ldaa            #P1
  843  246A 2002                      bra             ply_end
  844                 
  845  246C 8601      play_p1         ldaa            #P2
  846  246E 39        ply_end         rts             
  847                 
  848                 *---------------------------------------
  849                 * Input: subrutina que devuelve
  850                 *        entrada para la batalla naval
  851                 * AccA: Fila de la posicion jugada
  852                 * AccB: Columna de la posicion jugada
  853                 *---------------------------------------
  854                 
  855  246F           input           EQU             *
  856                 
  857                 * back up de registros
  858  246F 3C                        pshx
  859  2470 183C                      pshy
  860                 
  861                 * creo variables locales
  862  2472 36                        psha
  863  2473 36                        psha
  864  2474 36                        psha
  865                 
  866                 * inicializo framepointer
  867  2475 1830                      tsy
  868                 
  869                 * prendo el led
  870  2477                           %LED_INV
    /  2477 B61000                    ldaa            PORTA
    /  247A 8840                      eora            #SHF_LED
    /  247C B71000                    staa            PORTA
  871                 
  872                 * inicializo el contador
  873  247F 8603      inp_rest        ldaa            #INPUTS
  874  2481 18A700                    staa            CONT,Y
  875                                 
  876                 * limpio el display
  877  2484 CE41F9                    ldx             #string
  878  2487 8604                      ldaa            #4
  879  2489 C620                      ldab            #ESP
  880  248B BD25E9                    jsr             clrarray
  881                 
  882  248E BD25D8                    jsr             clr_dis
  883                 
  884  2491 86FF                      ldaa            #$FF
  885  2493 B741F8                    staa            buffer
  886                 
  887                 * lectura de teclado
  888  2496 BD251F    wait_kb         jsr             read_kb
  889  2499 4D                        tsta
  890  249A 2BFA                      bmi             wait_kb
  891  249C B141F8                    cmpa            buffer
  892  249F 27F5                      beq             wait_kb
  893  24A1 B741F8                    staa            buffer
  894                                 
  895  24A4 810F                      cmpa            #B_reset
  896  24A6 27D7                      beq             inp_rest
  897  24A8 8103                      cmpa            #B_P1
  898  24AA 27D3                      beq             inp_rest
  899  24AC 8107                      cmpa            #B_P2
  900  24AE 27CF                      beq             inp_rest
  901                 
  902  24B0 186A00                    dec             CONT,Y
  903  24B3 2727                      beq             chk_fire
  904  24B5 36                        psha
  905  24B6 CE41FE                    ldx             #kb_value
  906  24B9 16                        tab
  907  24BA 3A                        abx
  908  24BB A600                      ldaa            0,X             
  909  24BD 183C                      pshy
  910  24BF 18E600                    ldab            CONT,Y
  911  24C2 183A                      aby
  912  24C4 18A700                    staa            0,Y
  913  24C7 1838                      puly
  914                 
  915  24C9 33                        pulb
  916  24CA BD25C8                    jsr             to_ascii
  917  24CD 17                        tba
  918                                 
  919  24CE CE41F9                    ldx             #string
  920  24D1 BD25B8                    jsr             sh_value
  921                 
  922  24D4 CE41F9                    ldx             #string
  923  24D7 BD250B                    jsr             show
  924                 
  925  24DA 20BA                      bra             wait_kb
  926                 
  927  24DC 810B      chk_fire        cmpa            #B_fire
  928  24DE 269F                      bne             inp_rest
  929  24E0 18A602                    ldaa            FILA_L,Y
  930  24E3 810A                      cmpa            #MIN_FIL
  931  24E5 2598                      blo             inp_rest
  932  24E7 810F                      cmpa            #MAX_FIL
  933  24E9 2294                      bhi             inp_rest
  934  24EB 18A601                    ldaa            COL_L,Y
  935  24EE 8101                      cmpa            #MIN_COL
  936  24F0 258D                      blo             inp_rest
  937  24F2 8106                      cmpa            #MAX_COL
  938  24F4 2289                      bhi             inp_rest
  939                 
  940                 * apago el led
  941  24F6                           %LED_INV
    /  24F6 B61000                    ldaa            PORTA
    /  24F9 8840                      eora            #SHF_LED
    /  24FB B71000                    staa            PORTA
  942                 
  943                 * libero variables locales
  944  24FE 32                        pula
  945  24FF 32                        pula
  946  2500 32                        pula
  947                 
  948  2501 18A602    return          ldaa            FILA_L,Y
  949  2504 18E601                    ldab            COL_L,Y         
  950                 
  951                 * restore de registros
  952  2507 1838                      puly
  953  2509 38                        pulx
  954                 
  955  250A 39                        rts
  956                 
  957                 *------------------------------------
  958                 * Show: Por IX direccion de string de
  959                 *       4 caracteres para imprimir
  960                 *------------------------------------
  961                 
  962  250B           show            EQU             *
  963                 
  964                 * back up de registros
  965  250B 3C                        pshx
  966  250C 37                        pshb
  967  250D 36                        psha
  968                 
  969                 * inicializo contador de posiciones
  970  250E C604                      ldab            #LENGTH
  971                                 
  972                 * loop para enviar a cada posicion
  973  2510 5A        sh_loop         decb
  974  2511 2B08                      bmi             sh_end          ; si no pase por todas las posiciones
  975  2513 A600                      ldaa            0,X             ; tomo del string el caracter
  976  2515 BD25D1                    jsr             outchar         ; y lo imprimo en la posicion actual
  977  2518 08                        inx
  978  2519 20F5                      bra             sh_loop
  979                 
  980                 * restore de registros                          
  981  251B 32        sh_end          pula
  982  251C 33                        pulb
  983  251D 38                        pulx
  984  251E 39                        rts
  985                 
  986                 *----------------------------------------------
  987                 * read_kb: AccA: tecla presionada
  988                 *          o -1
  989                 *----------------------------------------------
  990                 
  991  251F           read_kb         EQU             *
  992                 
  993                 * back up de registros
  994  251F 3C                        pshx
  995  2520 37                        pshb
  996                 
  997                 * creo espacio para variables locales
  998  2521                           %MALLOC         1               ; variable mascara de filas
    /  2521                           IF 1 > 0
    /  2521 30                        tsx
    /  2522 8F                        xgdx
    /  2523 830001                    subd    #1
    /  2526 8F                        xgdx
    /  2527 35                        txs
    /  2528                           ENDIF
  999  2528                           %MALLOC         1               ; variable mascara de columnas
    /  2528                           IF 1 > 0
    /  2528 30                        tsx
    /  2529 8F                        xgdx
    /  252A 830001                    subd    #1
    /  252D 8F                        xgdx
    /  252E 35                        txs
    /  252F                           ENDIF
 1000  252F                           %MALLOC         1               ; variable contador de columnas
    /  252F                           IF 1 > 0
    /  252F 30                        tsx
    /  2530 8F                        xgdx
    /  2531 830001                    subd    #1
    /  2534 8F                        xgdx
    /  2535 35                        txs
    /  2536                           ENDIF
 1001  2536                           %MALLOC         1               ; variable contador de tecla
    /  2536                           IF 1 > 0
    /  2536 30                        tsx
    /  2537 8F                        xgdx
    /  2538 830001                    subd    #1
    /  253B 8F                        xgdx
    /  253C 35                        txs
    /  253D                           ENDIF
 1002                 
 1003                 * inicializacion de variables
 1004  253D 30                        tsx                             ; framepointer para acceder a locales
 1005  253E C604                      ldab            #LENGTH         ; contador de fila
 1006  2540 860E                      ldaa            #FIL0           ; mascara para la fila cero
 1007  2542 A703                      staa            MASK_FIL,X      
 1008  2544 8610                      ldaa            #COL0           ; mascara para la columna cero
 1009  2546 A702                      staa            MASK_COL,X
 1010  2548 4F                        clra                            ; contador de columna
 1011  2549 A701                      staa            COL_CONT,X
 1012  254B A700                      staa            KB_PRESS,X      ; variable con numero de tecla
 1013                 
 1014                 * loop para barrer y mirar teclado matricial
 1015  254D 86FF      kb_loop         ldaa            #NONE
 1016  254F 5A                        decb                            
 1017  2550 2B2C                      bmi             kb_end          ; me fijo si recorrio todas las filas
 1018  2552 A603                      ldaa            MASK_FIL,X      ; enmascaro la siguiente fila
 1019  2554 B71003                    staa            ROWS
 1020  2557 0D                        sec                             ; carry para rotacion de byte
 1021  2558 49                        rola                            
 1022  2559 A703                      staa            MASK_FIL,X      ; cambio variable mascara para la proxima fila
 1023                 
 1024  255B 8604                      ldaa            #LENGTH
 1025  255D A701                      staa            COL_CONT,X
 1026  255F 8610                      ldaa            #COL0           ; inicializo variable para barrer
 1027  2561 A702                      staa            MASK_COL,X      ; la columna
 1028                 
 1029  2563 6A01      kb_col          dec             COL_CONT,X      ; me fijo si barrio todas las columnas
 1030  2565 2BE6                      bmi             kb_loop
 1031  2567 B61005                    ldaa            COLS            ; leo el puerto de columnas
 1032  256A A402                      anda            MASK_COL,X      ; enmascaro columna
 1033  256C 2707                      beq             kb_hit          ; si es nulo apretaron un boton
 1034  256E 48                        lsla                            ; cambio mascara para proxima columna
 1035  256F A702                      staa            MASK_COL,X
 1036  2571 6C00                      inc             KB_PRESS,X      ; incremento numero de tecla
 1037  2573 20EE                      bra             kb_col
 1038                 
 1039  2575 A600      kb_hit          ldaa            KB_PRESS,X      ; apretaron una tecla, lo comparo
 1040  2577 B141F7                    cmpa            kb_buff         ; con la que fue apretada antes
 1041  257A 2602                      bne             kb_end          ; aviso por led
 1042                 
 1043  257C 86FF      kb_none         ldaa            #NONE           ; en caso de que no apreten nada
 1044                 
 1045  257E B741F7    kb_end          staa            kb_buff         ; actualizo variable
 1046                                         
 1047                 * elimino variables locales
 1048  2581                           %RELMEM         1
    /  2581                           IF 1 > 0
    /  2581 30                        tsx
    /  2582 8F                        xgdx
    /  2583 C30001                    addd    #1
    /  2586 8F                        xgdx
    /  2587 35                        txs
    /  2588                           ENDIF           
 1049  2588                           %RELMEM         1
    /  2588                           IF 1 > 0
    /  2588 30                        tsx
    /  2589 8F                        xgdx
    /  258A C30001                    addd    #1
    /  258D 8F                        xgdx
    /  258E 35                        txs
    /  258F                           ENDIF           
 1050  258F                           %RELMEM         1
    /  258F                           IF 1 > 0
    /  258F 30                        tsx
    /  2590 8F                        xgdx
    /  2591 C30001                    addd    #1
    /  2594 8F                        xgdx
    /  2595 35                        txs
    /  2596                           ENDIF           
 1051  2596                           %RELMEM         1
    /  2596                           IF 1 > 0
    /  2596 30                        tsx
    /  2597 8F                        xgdx
    /  2598 C30001                    addd    #1
    /  259B 8F                        xgdx
    /  259C 35                        txs
    /  259D                           ENDIF           
 1052                 
 1053                 * restore de registros
 1054  259D 33                        pulb
 1055  259E 38                        pulx
 1056                                 
 1057  259F 39                        rts
 1058                 
 1059                 *----------------------------------------------
 1060                 * init_kb: subrutina para inicializar teclado
 1061                 *----------------------------------------------
 1062                 
 1063  25A0           init_kb         EQU             *
 1064                 
 1065                 * back up de registros
 1066  25A0 36                        psha
 1067                 
 1068                 * inicializacion de teclado             
 1069  25A1 86FF                      ldaa            #NONE
 1070  25A3 B741F7                    staa            kb_buff
 1071                 
 1072                 * restore de registros
 1073  25A6 32                        pula
 1074  25A7 39                        rts
 1075                 
 1076                 *--------------------------------
 1077                 * Inicializa display (y teclado)
 1078                 *--------------------------------
 1079                 
 1080  25A8           initdis         EQU             *
 1081                         
 1082  25A8 36                        psha
 1083                 
 1084  25A9 860F                      ldaa            #$0F       ;set for input/output
 1085  25AB B71007                    staa            DDRC       ;C output
 1086  25AE B61002                    ldaa            PIOC       ;get current value
 1087  25B1 84FE                      anda            #$FE       ;reset bit 0 to 0
 1088  25B3 B71002                    staa            PIOC       ;send it out
 1089                         
 1090  25B6 32                        pula
 1091  25B7 39                        rts
 1092                 
 1093                 *--------------------------------------------------------------
 1094                 * sh_value: toma un string, desplaza los caracteres a izquierda
 1095                 *           y agrega un nuevo caracter
 1096                 *           IX: direccion del string
 1097                 *           AccA: nuevo valor
 1098                 *--------------------------------------------------------------
 1099                 
 1100  25B8           sh_value        EQU             *
 1101                 
 1102                 * back up de registros
 1103  25B8 3C                        pshx
 1104  25B9 37                        pshb
 1105                 
 1106                 * loop para desplazar caracteres
 1107  25BA E601      v_loop          ldab            1,X             ;tomo elemento siguiente en string
 1108  25BC 2705                      beq             v_end
 1109  25BE E700                      stab            0,X             ;y lo guardo en posicion actual
 1110  25C0 08                        inx
 1111  25C1 20F7                      bra             v_loop          
 1112                 
 1113  25C3 A700      v_end           staa            0,X             ;ingresa nuevo caracter en cadena desplazada
 1114                 
 1115                 * restore de registros
 1116  25C5 33                        pulb
 1117  25C6 38                        pulx
 1118  25C7 39                        rts
 1119                 
 1120                 *----------------------------------------------
 1121                 * toAscii: toma numero de boton del teclado
 1122                 *          y devuelve su correspondiente en
 1123                 *          ascii
 1124                 *          toma  AccB: valor del boton
 1125                 *          devuelve AccB: ascii
 1126                 *----------------------------------------------
 1127                 
 1128  25C8           to_ascii        EQU             *
 1129                 
 1130                 * back up de registros
 1131  25C8 3C                        pshx
 1132                 
 1133                 * inicializacion de variables
 1134  25C9 CE420D                    ldx             #kb_ascii       ; apunto a string con caracteres asignados por tecla
 1135  25CC 3A                        abx                             ; me muevo en string con indice y recupero segun tecla presionada
 1136  25CD E600                      ldab            0,X             
 1137                 
 1138                 * restore de registros
 1139  25CF 38                        pulx
 1140  25D0 39                        rts
 1141                 
 1142                 *--------------------------------
 1143                 *Outchar: ACCA: Carácter a enviar
 1144                 *           ACCB: Posición (0-3)
 1145                 *--------------------------------
 1146  25D1           outchar         EQU             *
 1147                         
 1148  25D1 F71005                    stab            PORTCL          ;set the position 
 1149  25D4 B71004                    staa            PORTB           ;set the character
 1150                         
 1151  25D7 39                        rts
 1152                 
 1153                 *-------------------------
 1154                 * clr_dis: Limpia display
 1155                 *-------------------------
 1156                 
 1157  25D8           clr_dis         EQU             *
 1158                 
 1159                 * hago back up de registros
 1160  25D8 37                        pshb
 1161  25D9 36                        psha
 1162                 
 1163                 * inicializo el contador de posiciones
 1164  25DA C604                      ldab            #LENGTH
 1165                 
 1166                 * loop para limpiar cada posicion
 1167  25DC 5A        clrloop         decb
 1168  25DD 2B07                      bmi             clr_end         ; si no pase por todas las posiciones
 1169  25DF 8620                      ldaa            #ESP            ; cargo en esta posicion espacio blanco
 1170  25E1 BD25D1                    jsr             outchar         ; y lo envio
 1171  25E4 20F6                      bra             clrloop         
 1172                 
 1173                 * restore de registros
 1174  25E6 32        clr_end         pula
 1175  25E7 33                        pulb
 1176  25E8 39                        rts
 1177                 
 1178                 *-------------------------------------------------------
 1179                 * clrarray: subrutina para limpiar un array dado
 1180                 * parametros: IX direccion del array
 1181                 *             AccA cantidad de elementos del array
 1182                 *             AccB caracter a poner
 1183                 *-------------------------------------------------------
 1184                 
 1185  25E9           clrarray        EQU             *
 1186                                 
 1187  25E9 4A        cra_loop        deca                            ;contador con cantidad de elementos a limpiar
 1188  25EA 2705                      beq             cra_end
 1189  25EC E700                      stab            0,X             ;reemplazar elemento por caracter a poner
 1190  25EE 08                        inx
 1191  25EF 20F8                      bra             cra_loop
 1192                                 
 1193  25F1 E700      cra_end         stab            0,X
 1194  25F3 39                        rts
 1195                 
 1196                 *=============================================
 1197                 *Subrutina winner: Recibe por stack un 1 si
 1198                 *gano el player 1 y un 0 si gano el player 2.
 1199                 *=============================================
 1200                 
 1201                                 
 1202  25F4           winner          EQU             *
 1203  25F4                           %BACKUP
    /  25F4 36                        psha
    /  25F5 37                        pshb
    /  25F6 3C                        pshx
    /  25F7 183C                      pshy
 1204  25F9 30                        tsx
 1205  25FA A608                      ldaa            8,x     ;recupero parametro enviado por stack
 1206  25FC 2708                      beq             win2
 1207                 
 1208  25FE           win1            EQU             *
 1209  25FE CE4242                    ldx             #string1
 1210  2601 BD250B                    jsr             show
 1211  2604 2006                      bra             end
 1212                 
 1213  2606           win2            EQU             *
 1214  2606 CE4247                    ldx             #string2
 1215  2609 BD250B                    jsr             show
 1216                         
 1217  260C           end             EQU             *
 1218  260C                           %RESTORE
    /  260C 1838                      puly
    /  260E 38                        pulx
    /  260F 33                        pulb
    /  2610 32                        pula
 1219  2611 39                        rts
 1220                 
 1221                 *=============================================
 1222                 *Subrutina turn: Recibe por stack un 1 si
 1223                 *juega el player 1 y un 0 si juega el player 2.
 1224                 *=============================================
 1225                 
 1226  2612           turn            EQU             *
 1227  2612                           %BACKUP
    /  2612 36                        psha
    /  2613 37                        pshb
    /  2614 3C                        pshx
    /  2615 183C                      pshy
 1228  2617 30                        tsx
 1229  2618 A608                      ldaa            8,x
 1230  261A 2708                      beq             p2_t
 1231                 
 1232  261C           p1_t            EQU             *
 1233  261C CE424C                    ldx             #play1
 1234  261F BD250B                    jsr             show
 1235  2622 20E8                      bra             end
 1236                         
 1237  2624           p2_t            EQU             *
 1238  2624 CE4250                    ldx             #play2
 1239  2627 BD250B                    jsr             show
 1240                 
 1241  262A           end_t           EQU             *
 1242  262A                           %RESTORE        
    /  262A 1838                      puly
    /  262C 38                        pulx
    /  262D 33                        pulb
    /  262E 32                        pula
 1243  262F 39                        rts
 1244                 
 1245                 *************
 1246                 * VARIABLES *
 1247                 *************
 1248                 ***STACK***
 1249  4000                           ORG             $4000
 1250  4000           stack           RMB             500
 1251  41F3           STACKP          EQU             *-1
 1252                 
 1253                 ***MAIN VARIABLES***
 1254  41F4           player          RMB             1               ;variable de jugador
 1255  41F5           letra_p         RMB             1
 1256  41F6           num_p           RMB             1
 1257                 
 1258                 ***KEYBOARD VARIABLES***
 1259  41F7           kb_buff         RMB             1
 1260  41F8           buffer          RMB             1
 1261                 
 1262  41F9 20202020  string          FCC             '    '
 1263  41FD 00                        FCB             0
 1264                 
 1265  41FE 0A0B0C00  kb_value        FCB             10,11,12,0,13,14,15,0,1,2,3,0,4,5,6
       4202 0D0E0F00
       4206 01020300
       420A 040506
 1266                 
 1267  420D 41424320  kb_ascii        FCC             'ABC DEF 123 456'
       4211 44454620
       4215 31323320
       4219 343536
 1268                 
 1269                 ***ARREGLO DE BARCOS TOCADOS***
 1270  0003           SUB             EQU             3
 1271  0003           CAR             EQU             3
 1272  0002           EL_SIZE         EQU             2
 1273  0009           CANTIDAD        EQU             SUB*1+CAR*2
 1274  0013           HITSIZE         EQU             EL_SIZE*CANTIDAD+1
 1275  421C           hitlist         RMB             HITSIZE*2
 1276                 
 1277                 ***DISPLAY MESSAGES VARIABLES***
 1278  4242 57494E31  string1         FCC     'WIN1'
 1279  4246 00                        FCB     00
 1280  4247 57494E32  string2         FCC     'WIN2'
 1281  424B 00                        FCB     00
 1282                 
 1283  424C 5031      play1           FCC     'P1'
 1284  424E 0000                      FCB     0,0
 1285  4250 5032      play2           FCC     'P2'
 1286  4252 0000                      FCB     0,0
 1287                 
 1288                 ***MATRICES DE TABLERO DE CADA JUGADOR***
 1289  5000                           ORG             $5000
 1290  5000 03030303  p_board         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5004 0303
 1291  5006 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP
       500A 8303
 1292  500C 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP
       5010 8303
 1293  5012 03830303                  FCB             WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5016 0303
 1294  5018 03830343                  FCB             WAT_NP,SHI_NP,WAT_NP,SUB_NP,WAT_NP,SUB_NP
       501C 0343
 1295  501E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SUB_NP,WAT_NP
       5022 4303
 1296                 
 1297  5024 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP
       5028 0303
 1298  502A 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP
       502E 0303
 1299  5030 03430303                  FCB             WAT_NP,SUB_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP
       5034 8303
 1300  5036 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP
       503A 8303
 1301  503C 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5040 0303
 1302  5042 83830303                  FCB             SHI_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,SUB_NP
       5046 0343
 1303                 
 1304                 ***MATRIZ DE DISPLAY***
 1305  5F00                           ORG             $5F00
 1306  5F00 03030303  display         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F04 0303
 1307  5F06 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F0A 0303
 1308  5F0C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F10 0303
 1309  5F12 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F16 0303
 1310  5F18 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F1C 0303
 1311  5F1E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F22 0303
 1312                 
 1313                                 
 1314  5F24                           END

    Errors:  None         ###########
    Bytes:   1745         # main_bn #
    CRC:     D0CA         ###########

