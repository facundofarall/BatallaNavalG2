################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              27/Nov/17  01:50:53    #
#                                                                              #
#       Source   =   main_bn.msa                                               #
#       List     =   main_bn.lst                                               #
#       Object   =   main_bn.r07                                               #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                           p68h11
    2                 $macros.msa
    3                 **********************************
    4                 * definicion de macro utilizados *
    5                 **********************************
    6                 * invocar a la subrutina writepos
    7  0000                   MACRO   %WRITEPOS
    8                                 ldab            \0
    9                                 pshb                            ;se envía el byte a escribir
   10                                 ldab            12,x
   11                                 pshb                            ;se envía letra (fila)
   12                                 ldab            11,x
   13                                 pshb                            ;se envía num (columna)
   14                                 ldy             9,x
   15                                 pshy                            ;se envía dirección de inicio de matriz
   16                                 ldab            8,x
   17                                 pshb                            ;se envía jugador atacado
   18                                 jsr             writepos
   19                                 %CLRST          6
   20  0000                   ENDMAC
   21                 
   22                 * invocar a la subrutina writepos
   23  0000                   MACRO   %PLAY_WRT
   24                                 ldab            12,x
   25                                 pshb                            ;se envía letra (fila)
   26                                 ldab            11,x
   27                                 pshb                            ;se envía num (columna)
   28                                 ldy             14,x
   29                                 pshy                            ;se envía inicio de array
   30                                 ldab            8,x
   31                                 pshb                            ;se envía jugador atacado
   32                                 jsr             play_wrt
   33                                 %CLRST          5
   34  0000                   ENDMAC
   35                 
   36                 * realizar back up de AccA, AccB, IX e IY
   37  0000                   MACRO   %BACKUP
   38                                 psha
   39                                 pshb
   40                                 pshx
   41                                 pshy
   42  0000                   ENDMAC
   43                 
   44                 * realizar restore de AccA, AccB, IX e IY
   45  0000                   MACRO   %RESTORE
   46                                 puly
   47                                 pulx
   48                                 pulb
   49                                 pula
   50  0000                   ENDMAC
   51                 
   52                 * limpiar el stack de datos enviados
   53  0000                   MACRO   %CLRST
   54                 CONT_M          SET     \0
   55                                 IF CONT_M > 0
   56                                 ins
   57                                 %CLRST  CONT_M-1
   58                                 ENDIF
   59  0000                   ENDMAC
   60                 * activar un led en funcion de una variable
   61  0000                   MACRO   %LED_INV
   62                                 ldaa            PORTA
   63                                 eora            #SHF_LED
   64                                 staa            PORTA
   65  0000                   ENDMAC
   66                 
   67                 * declarar o reservar variables locales en subrutinas
   68  0000                   MACRO   %MALLOC
   69                                 IF \0 > 0
   70                                 tsx
   71                                 xgdx
   72                                 subd    #\0
   73                                 xgdx
   74                                 txs
   75                                 ENDIF
   76  0000                   ENDMAC
   77                 
   78                 * liberar espacio de variables en subrutinas
   79  0000                   MACRO   %RELMEM
   80                                 IF \0 > 0
   81                                 tsx
   82                                 xgdx
   83                                 addd    #\0
   84                                 xgdx
   85                                 txs
   86                                 ENDIF           
   87  0000                   ENDMAC
   88                 
   89                 *************
   90                 * CONSTANTS *
   91                 *************
   92  0000           P1              EQU             0
   93  0001           P2              EQU             1
   94  0002           PN              EQU             2               ;cantidad de jugadores
   95                 
   96  0006           MAX_C           EQU             6
   97  0001           MIN_C           EQU             1
   98  000F           MAX_F           EQU             15
   99  000A           MIN_F           EQU             10              
  100                 
  101  0003           WAT_NP          EQU             00000011b
  102  0043           SUB_NP          EQU             01000011b
  103  0083           SHI_NP          EQU             10000011b
  104  0008           WATER           EQU             00001000b       ;verde
  105  0050           SUNK_SUB        EQU             01010000b       ;bordeaux para submarinos
  106  00B0           HIT             EQU             10110000b       ;naranja
  107  0090           SUNK_SHI        EQU             10010000b       ;bordeaux para cargueros
  108                 
  109  0006           FILA            EQU             6
  110  0006           COL             EQU             6
  111  0024           ARRAY_L         EQU             FILA*COL
  112  000A           NORM            EQU             10
  113                 
  114  000A           MIN_FIL         EQU             10
  115  000F           MAX_FIL         EQU             15
  116  0001           MIN_COL         EQU             1
  117  0006           MAX_COL         EQU             6       
  118                 
  119  0000           CONT            EQU             0
  120  0002           FILA_L          EQU             2
  121  0001           COL_L           EQU             1
  122                 
  123  0003           INPUTS          EQU             3
  124                 
  125  FFFF           NONE            EQU             -1
  126  0003           MASK_FIL        EQU             3
  127  0002           MASK_COL        EQU             2
  128  0001           COL_CONT        EQU             1
  129  0000           KB_PRESS        EQU             0
  130                 
  131                 ******* Ports ***************************
  132                 
  133  1007           DDRC            EQU             $1007           ;data direction register for C
  134  1002           PIOC            EQU             $1002           ;for strobe B assertion change
  135  1005           PORTCL          EQU             $1005           ;port C latched
  136  1004           PORTB           EQU             $1004           ;port B
  137  1003           PORTC           EQU             $1003           ;rows
  138  1000           PORTA           EQU             $1000
  139                 
  140  0040           SHF_LED         EQU             $40
  141                 
  142                 ******* Cols and Row Ports **************
  143                 
  144  1003           ROWS            EQU             PORTC           ;outputs
  145  1005           COLS            EQU             PORTCL          ;inputs
  146                 
  147                 ***** Col Mask **************************
  148  0010           COL0            EQU             00010000b
  149                          
  150                 ***** Row Masks *************************
  151                 
  152  000E           FIL0            EQU             00001110b       ;mascaras para manejo de filas
  153  000D           FIL1            EQU             00001101b
  154  000B           FIL2            EQU             00001011b
  155  0007           FIL3            EQU             00000111b
  156                 
  157  0004           LENGTH          EQU             4               ; largo del display
  158                 
  159                 ****** Keyboard Mask ********************
  160  0008           Button_1        EQU             8
  161  0009           Button_2        EQU             9
  162  000A           Button_3        EQU             10
  163  000C           Button_4        EQU             12
  164  000D           Button_5        EQU             13
  165  000E           Button_6        EQU             14              
  166  0000           Button_A        EQU             0       
  167  0001           Button_B        EQU             1
  168  0002           Button_C        EQU             2
  169  0004           Button_D        EQU             4
  170  0005           Button_E        EQU             5
  171  0006           Button_F        EQU             6
  172  000B           B_fire          EQU             11
  173  0003           B_P1            EQU             3
  174  0007           B_P2            EQU             7
  175  000F           B_reset         EQU             15
  176                 
  177  0000           EOT             EQU             0
  178  0020           ESP             EQU             $20     
  179                 
  180                 *========================================================
  181                 * El siguiente es un programa de un juego de batalla
  182                 * naval para dos jugadores en el emulador Wookie FX.
  183                 *========================================================
  184                 
  185                 ****************
  186                 * MAIN PROGRAM *
  187                 ****************
  188                 
  189  2000                           ORG             $2000
  190  2000           init            EQU             *
  191  2000 8E41F3                    lds             #STACKP
  192  2003 BD2597                    jsr             initdis         ;inicialización de display 7 seg
  193  2006 BD258F                    jsr             init_kb         ;inicialización de teclado
  194  2009 CE421C                    ldx             #hitlist
  195  200C 3C                        pshx                            ;se envía inicio de arreglo de barcos a poner en 0
  196  200D 8626                      ldaa            #(HITSIZE*2)
  197  200F 36                        psha                            ;se envía el tamaño del arreglo a limpiar
  198  2010 BD2439                    jsr             clrzone
  199  2013                           %CLRST          3
    /  0003           CONT_M          SET     3
    /  2013                           IF CONT_M > 0
    /  2013 31                        ins
    /  2014                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2014                           IF CONT_M > 0
    /  2014 31                        ins
    /  2015                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2015                           IF CONT_M > 0
    /  2015 31                        ins
    /  2016                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
  200  2016 8601                      ldaa            #P2             ;se inicia atacando al jugador 2
  201  2018 B741F4                    staa            player          ;se inicia con el jugador 1 (atacando al 2)
  202                 
  203  201B           main            EQU             *
  204  201B BD2451                    jsr             whoplays        ;se recibirá en AccA el jugador a atacar a continuación
  205  201E B741F4                    staa            player          ;se habilita la siguiente jugada
  206                 
  207  2021 CE5000                    ldx             #p_board
  208  2024 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  209  2025 B641F4                    ldaa            player
  210  2028 36                        psha                            ;se envía el jugador atacado
  211  2029 CE5F00                    ldx             #display
  212  202C 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  213  202D 8624                      ldaa            #ARRAY_L
  214  202F 36                        psha                            ;se envía el tamaño de la matriz tablero
  215  2030 BD232D                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  216  2033                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2033                           IF CONT_M > 0
    /  2033 31                        ins
    /  2034                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2034                           IF CONT_M > 0
    /  2034 31                        ins
    /  2035                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2035                           IF CONT_M > 0
    /  2035 31                        ins
    /  2036                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2036                           IF CONT_M > 0
    /  2036 31                        ins
    /  2037                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2037                           IF CONT_M > 0
    /  2037 31                        ins
    /  2038                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2038                           IF CONT_M > 0
    /  2038 31                        ins
    /  2039                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
  217                 
  218  2039 BD2466                    jsr             input           ;se llama a la subrutina de interfaz de usuario
  219  203C B741F5                    staa            letra_p         ;se recibe en AccA la letra jugada (fila) y en AccB el número (columna)
  220  203F F741F6                    stab            num_p           ;se guarda la jugada
  221                 
  222  2042 B641F5                    ldaa            letra_p
  223  2045 36                        psha                            ;se envía la letra jugada
  224  2046 F641F6                    ldab            num_p
  225  2049 37                        pshb                            ;se envía el número jugado
  226  204A CE421C                    ldx             #hitlist
  227  204D 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  228  204E B641F4                    ldaa            player
  229  2051 36                        psha                            ;se envía el jugador a atacar
  230  2052 BD23B8                    jsr             play_src        ;se recibirá el carry en 1 si la posición corresponde a un barco ya atacado
  231  2055                           %CLRST          5               ;se limpia el stack
    /  0005           CONT_M          SET     5
    /  2055                           IF CONT_M > 0
    /  2055 31                        ins
    /  2056                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2056                           IF CONT_M > 0
    /  2056 31                        ins
    /  2057                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2057                           IF CONT_M > 0
    /  2057 31                        ins
    /  2058                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2058                           IF CONT_M > 0
    /  2058 31                        ins
    /  2059                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2059                           IF CONT_M > 0
    /  2059 31                        ins
    /  205A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
  232  205A 25BF                      bcs             main            ;si la posición ya fue jugada, se pierde el turno y pasa al siguiente
  233                                 
  234  205C B641F5                    ldaa            letra_p
  235  205F 36                        psha                            ;se envía le letra jugada
  236  2060 F641F6                    ldab            num_p
  237  2063 37                        pshb                            ;se envía el número jugado
  238  2064 CE5000                    ldx             #p_board
  239  2067 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  240  2068 F641F4                    ldab            player
  241  206B 37                        pshb                            ;se envía el jugador a atacar
  242  206C BD2356                    jsr             fetchpos
  243  206F                           %CLRST          4               ;se limpia el stack
    /  0004           CONT_M          SET     4
    /  206F                           IF CONT_M > 0
    /  206F 31                        ins
    /  2070                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2070                           IF CONT_M > 0
    /  2070 31                        ins
    /  2071                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2071                           IF CONT_M > 0
    /  2071 31                        ins
    /  2072                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2072                           IF CONT_M > 0
    /  2072 31                        ins
    /  2073                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
  244  2073 32                        pula                            ;se toma del stack el dato del byte jugado
  245                 
  246  2074 CE421C                    ldx             #hitlist
  247  2077 3C                        pshx                            ;se envía inicio del arreglo de barcos atacados
  248  2078 36                        psha                            ;se envía el byte a jugado
  249  2079 B641F5                    ldaa            letra_p
  250  207C 36                        psha                            ;se envía le letra jugada
  251  207D F641F6                    ldab            num_p
  252  2080 37                        pshb                            ;se envía el número jugado
  253  2081 CE5000                    ldx             #p_board
  254  2084 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  255  2085 F641F4                    ldab            player
  256  2088 37                        pshb                            ;se envía el jugador a atacar
  257  2089 BD20C5                    jsr             gameplay
  258  208C                           %CLRST          8               ;se limpia el stack
    /  0008           CONT_M          SET     8
    /  208C                           IF CONT_M > 0
    /  208C 31                        ins
    /  208D                           %CLRST  CONT_M-1
    /  0007           CONT_M          SET     CONT_M-1
    /  208D                           IF CONT_M > 0
    /  208D 31                        ins
    /  208E                           %CLRST  CONT_M-1
    /  0006           CONT_M          SET     CONT_M-1
    /  208E                           IF CONT_M > 0
    /  208E 31                        ins
    /  208F                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  208F                           IF CONT_M > 0
    /  208F 31                        ins
    /  2090                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2090                           IF CONT_M > 0
    /  2090 31                        ins
    /  2091                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2091                           IF CONT_M > 0
    /  2091 31                        ins
    /  2092                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2092                           IF CONT_M > 0
    /  2092 31                        ins
    /  2093                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2093                           IF CONT_M > 0
    /  2093 31                        ins
    /  2094                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
  259                 
  260  2094 CE5000                    ldx             #p_board
  261  2097 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  262  2098 B641F4                    ldaa            player
  263  209B 36                        psha                            ;se envía el jugador atacado
  264  209C CE5F00                    ldx             #display
  265  209F 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  266  20A0 8624                      ldaa            #ARRAY_L
  267  20A2 36                        psha                            ;se envía el tamaño de la matriz tablero
  268  20A3 BD232D                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  269  20A6                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20A6                           IF CONT_M > 0
    /  20A6 31                        ins
    /  20A7                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20A7                           IF CONT_M > 0
    /  20A7 31                        ins
    /  20A8                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20A8                           IF CONT_M > 0
    /  20A8 31                        ins
    /  20A9                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20A9                           IF CONT_M > 0
    /  20A9 31                        ins
    /  20AA                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20AA                           IF CONT_M > 0
    /  20AA 31                        ins
    /  20AB                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20AB                           IF CONT_M > 0
    /  20AB 31                        ins
    /  20AC                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
  270                                 
  271  20AC CE421C                    ldx             #hitlist
  272  20AF 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  273  20B0 B641F4                    ldaa            player
  274  20B3 36                        psha                            ;se envía el jugador a atacar
  275  20B4 BD23EB                    jsr             play_cnt
  276  20B7                           %CLRST          2
    /  0002           CONT_M          SET     2
    /  20B7                           IF CONT_M > 0
    /  20B7 31                        ins
    /  20B8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20B8                           IF CONT_M > 0
    /  20B8 31                        ins
    /  20B9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20B9                           ENDIF
    /  20B9                           ENDIF
    /  20B9                           ENDIF
  277  20B9 32                        pula                            ;se recibe la cantidad de bytes contados
  278  20BA 8109                      cmpa            #9              
  279  20BC 2703                      beq             end_game        ;si se llegó al máximo de barcos, se termina el juego
  280                 
  281  20BE 7E201B                    jmp             main
  282                 
  283  20C1           end_game        EQU             *
  284                 *               ldaa            player
  285                 *               psha
  286                 *               jsr             winner
  287  20C1 20FE                      bra             end_game
  288                 
  289  20C3           end_loop        EQU             *
  290  20C3 20FE                      bra             end_loop
  291                 
  292                 **************
  293                 * SUBRUTINES *
  294                 **************
  295                 *=======================================================================
  296                 * subrutina gameplay
  297                 * Función: Determina si la posición jugada en el juego de batalla naval
  298                 *          para Wookie FX fue "agua", "submarion" o "carguero", y toma 
  299                 *          la decisión de qué hacer al respecto.
  300                 * Recibe: - Dirección arreglo auxiliar de barcos
  301                 *         - Byte a jugar.
  302                 *         - FILA del array (En HEX, de $0A (fil.0) en adelante)
  303                 *         - COLUMNA del array (en HEX)
  304                 *         - Dirección de comienzo del arreglo (2 bytes)
  305                 *         - Número de arreglo (de 0 en adelante) (número de jugador)
  306                 *       TODO POR STACK.
  307                 * Devuelve: parámetro jugado en posición correspondiente.
  308                 * Requiere: 
  309                 *=======================================================================
  310  20C5           gameplay        EQU             *
  311  20C5                           %BACKUP
    /  20C5 36                        psha
    /  20C6 37                        pshb
    /  20C7 3C                        pshx
    /  20C8 183C                      pshy
  312                                 
  313  20CA 30                        tsx                             ;se usa el IX como frame pointer
  314  20CB A60D                      ldaa            13,x            ;se carga en AccA el byte a analizar
  315  20CD 84C0                      anda            #11000000b      ;se enmascan los bits 0 a 5, para analizar los más significativos
  316                 
  317  20CF           gp_water        EQU             *
  318  20CF 2620                      bne             gp_sub          ;se estudia si era agua
  319  20D1                           %WRITEPOS       #WATER          ;se cambia el color en el tablero
    /  20D1 C608                      ldab            #WATER
    /  20D3 37                        pshb                            ;se envía el byte a escribir
    /  20D4 E60C                      ldab            12,x
    /  20D6 37                        pshb                            ;se envía letra (fila)
    /  20D7 E60B                      ldab            11,x
    /  20D9 37                        pshb                            ;se envía num (columna)
    /  20DA 1AEE09                    ldy             9,x
    /  20DD 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20DF E608                      ldab            8,x
    /  20E1 37                        pshb                            ;se envía jugador atacado
    /  20E2 BD2387                    jsr             writepos
    /  20E5                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20E5                           IF CONT_M > 0
    /  20E5 31                        ins
    /  20E6                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20E6                           IF CONT_M > 0
    /  20E6 31                        ins
    /  20E7                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20E7                           IF CONT_M > 0
    /  20E7 31                        ins
    /  20E8                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20E8                           IF CONT_M > 0
    /  20E8 31                        ins
    /  20E9                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20E9                           IF CONT_M > 0
    /  20E9 31                        ins
    /  20EA                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20EA                           IF CONT_M > 0
    /  20EA 31                        ins
    /  20EB                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20EB                           ENDIF
    /  20EB                           ENDIF
    /  20EB                           ENDIF
    /  20EB                           ENDIF
    /  20EB                           ENDIF
    /  20EB                           ENDIF
    /  20EB                           ENDIF
  320  20EB                           %RESTORE
    /  20EB 1838                      puly
    /  20ED 38                        pulx
    /  20EE 33                        pulb
    /  20EF 32                        pula
  321  20F0 39                        rts
  322                 
  323  20F1           gp_sub          EQU             *
  324  20F1 8140                      cmpa            #01000000b      ;se estudia si era un submarino
  325  20F3 2636                      bne             gp_shi_r
  326  20F5                           %WRITEPOS       #SUNK_SUB       ;se cambia el color en el tablero
    /  20F5 C650                      ldab            #SUNK_SUB
    /  20F7 37                        pshb                            ;se envía el byte a escribir
    /  20F8 E60C                      ldab            12,x
    /  20FA 37                        pshb                            ;se envía letra (fila)
    /  20FB E60B                      ldab            11,x
    /  20FD 37                        pshb                            ;se envía num (columna)
    /  20FE 1AEE09                    ldy             9,x
    /  2101 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2103 E608                      ldab            8,x
    /  2105 37                        pshb                            ;se envía jugador atacado
    /  2106 BD2387                    jsr             writepos
    /  2109                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2109                           IF CONT_M > 0
    /  2109 31                        ins
    /  210A                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  210A                           IF CONT_M > 0
    /  210A 31                        ins
    /  210B                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  210B                           IF CONT_M > 0
    /  210B 31                        ins
    /  210C                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  210C                           IF CONT_M > 0
    /  210C 31                        ins
    /  210D                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  210D                           IF CONT_M > 0
    /  210D 31                        ins
    /  210E                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  210E                           IF CONT_M > 0
    /  210E 31                        ins
    /  210F                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  210F                           ENDIF
    /  210F                           ENDIF
    /  210F                           ENDIF
    /  210F                           ENDIF
    /  210F                           ENDIF
    /  210F                           ENDIF
    /  210F                           ENDIF
  327  210F                           %PLAY_WRT                       ;se agraga la posición al array de barcos atacados
    /  210F E60C                      ldab            12,x
    /  2111 37                        pshb                            ;se envía letra (fila)
    /  2112 E60B                      ldab            11,x
    /  2114 37                        pshb                            ;se envía num (columna)
    /  2115 1AEE0E                    ldy             14,x
    /  2118 183C                      pshy                            ;se envía inicio de array
    /  211A E608                      ldab            8,x
    /  211C 37                        pshb                            ;se envía jugador atacado
    /  211D BD240F                    jsr             play_wrt
    /  2120                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2120                           IF CONT_M > 0
    /  2120 31                        ins
    /  2121                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2121                           IF CONT_M > 0
    /  2121 31                        ins
    /  2122                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2122                           IF CONT_M > 0
    /  2122 31                        ins
    /  2123                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2123                           IF CONT_M > 0
    /  2123 31                        ins
    /  2124                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2124                           IF CONT_M > 0
    /  2124 31                        ins
    /  2125                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2125                           ENDIF
    /  2125                           ENDIF
    /  2125                           ENDIF
    /  2125                           ENDIF
    /  2125                           ENDIF
    /  2125                           ENDIF
  328  2125                           %RESTORE
    /  2125 1838                      puly
    /  2127 38                        pulx
    /  2128 33                        pulb
    /  2129 32                        pula
  329  212A 39                        rts
  330                 
  331  212B           gp_shi_r        EQU             *               ;si no era ninguno de los anteriores, es un carguero
  332  212B E60B                      ldab            11,x
  333  212D C106                      cmpb            #MAX_C
  334  212F 276D                      beq             gp_shi_l        ;si está en el borde derecho, se continúa
  335  2131 E60C                      ldab            12,x
  336  2133 37                        pshb                            ;se envía la letra (fila)
  337  2134 E60B                      ldab            11,x
  338  2136 5C                        incb                            ;se avanza a la derecha
  339  2137 37                        pshb                            ;se envía el num (columna)
  340  2138 1AEE0E                    ldy             14,x
  341  213B 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  342  213D E608                      ldab            8,x
  343  213F 37                        pshb                            ;se envía el jugador atacado
  344  2140 BD23B8                    jsr             play_src        ;se busca la posición de la derecha
  345  2143                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2143                           IF CONT_M > 0
    /  2143 31                        ins
    /  2144                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2144                           IF CONT_M > 0
    /  2144 31                        ins
    /  2145                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2145                           IF CONT_M > 0
    /  2145 31                        ins
    /  2146                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2146                           IF CONT_M > 0
    /  2146 31                        ins
    /  2147                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2147                           IF CONT_M > 0
    /  2147 31                        ins
    /  2148                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2148                           ENDIF
    /  2148                           ENDIF
    /  2148                           ENDIF
    /  2148                           ENDIF
    /  2148                           ENDIF
    /  2148                           ENDIF
  346  2148 2454                      bcc             gp_shi_l        ;si no había barco atacado en la derecha, se busca la izquierda
  347  214A                           %WRITEPOS       #SUNK_SHI       
    /  214A C690                      ldab            #SUNK_SHI
    /  214C 37                        pshb                            ;se envía el byte a escribir
    /  214D E60C                      ldab            12,x
    /  214F 37                        pshb                            ;se envía letra (fila)
    /  2150 E60B                      ldab            11,x
    /  2152 37                        pshb                            ;se envía num (columna)
    /  2153 1AEE09                    ldy             9,x
    /  2156 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2158 E608                      ldab            8,x
    /  215A 37                        pshb                            ;se envía jugador atacado
    /  215B BD2387                    jsr             writepos
    /  215E                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  215E                           IF CONT_M > 0
    /  215E 31                        ins
    /  215F                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  215F                           IF CONT_M > 0
    /  215F 31                        ins
    /  2160                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2160                           IF CONT_M > 0
    /  2160 31                        ins
    /  2161                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2161                           IF CONT_M > 0
    /  2161 31                        ins
    /  2162                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2162                           IF CONT_M > 0
    /  2162 31                        ins
    /  2163                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2163                           IF CONT_M > 0
    /  2163 31                        ins
    /  2164                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2164                           ENDIF
    /  2164                           ENDIF
    /  2164                           ENDIF
    /  2164                           ENDIF
    /  2164                           ENDIF
    /  2164                           ENDIF
    /  2164                           ENDIF
  348  2164 6C0B                      inc             11,x
  349  2166                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2166 C690                      ldab            #SUNK_SHI
    /  2168 37                        pshb                            ;se envía el byte a escribir
    /  2169 E60C                      ldab            12,x
    /  216B 37                        pshb                            ;se envía letra (fila)
    /  216C E60B                      ldab            11,x
    /  216E 37                        pshb                            ;se envía num (columna)
    /  216F 1AEE09                    ldy             9,x
    /  2172 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2174 E608                      ldab            8,x
    /  2176 37                        pshb                            ;se envía jugador atacado
    /  2177 BD2387                    jsr             writepos
    /  217A                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  217A                           IF CONT_M > 0
    /  217A 31                        ins
    /  217B                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  217B                           IF CONT_M > 0
    /  217B 31                        ins
    /  217C                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  217C                           IF CONT_M > 0
    /  217C 31                        ins
    /  217D                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  217D                           IF CONT_M > 0
    /  217D 31                        ins
    /  217E                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  217E                           IF CONT_M > 0
    /  217E 31                        ins
    /  217F                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  217F                           IF CONT_M > 0
    /  217F 31                        ins
    /  2180                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2180                           ENDIF
    /  2180                           ENDIF
    /  2180                           ENDIF
    /  2180                           ENDIF
    /  2180                           ENDIF
    /  2180                           ENDIF
    /  2180                           ENDIF
  350  2180 6A0B                      dec             11,x            ;se recupera el dato
  351  2182                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2182 E60C                      ldab            12,x
    /  2184 37                        pshb                            ;se envía letra (fila)
    /  2185 E60B                      ldab            11,x
    /  2187 37                        pshb                            ;se envía num (columna)
    /  2188 1AEE0E                    ldy             14,x
    /  218B 183C                      pshy                            ;se envía inicio de array
    /  218D E608                      ldab            8,x
    /  218F 37                        pshb                            ;se envía jugador atacado
    /  2190 BD240F                    jsr             play_wrt
    /  2193                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2193                           IF CONT_M > 0
    /  2193 31                        ins
    /  2194                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2194                           IF CONT_M > 0
    /  2194 31                        ins
    /  2195                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2195                           IF CONT_M > 0
    /  2195 31                        ins
    /  2196                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2196                           IF CONT_M > 0
    /  2196 31                        ins
    /  2197                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2197                           IF CONT_M > 0
    /  2197 31                        ins
    /  2198                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
  352  2198                           %RESTORE
    /  2198 1838                      puly
    /  219A 38                        pulx
    /  219B 33                        pulb
    /  219C 32                        pula
  353  219D 39                        rts
  354                 
  355  219E           gp_shi_l        EQU             *
  356  219E E60B                      ldab            11,x
  357  21A0 C101                      cmpb            #MIN_C
  358  21A2 276D                      beq             gp_shi_u        ;si está en el borde izquierdo, se continúa
  359  21A4 E60C                      ldab            12,x
  360  21A6 37                        pshb                            ;se envía la letra (fila)
  361  21A7 E60B                      ldab            11,x
  362  21A9 5A                        decb                            ;se retrocede a la izquierda
  363  21AA 37                        pshb                            ;se envía el número (columna)
  364  21AB 1AEE0E                    ldy             14,x
  365  21AE 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  366  21B0 E608                      ldab            8,x
  367  21B2 37                        pshb                            ;se envía el jugador atacado
  368  21B3 BD23B8                    jsr             play_src        ;se busca la posición de la izquierda
  369  21B6                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21B6                           IF CONT_M > 0
    /  21B6 31                        ins
    /  21B7                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21B7                           IF CONT_M > 0
    /  21B7 31                        ins
    /  21B8                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21B8                           IF CONT_M > 0
    /  21B8 31                        ins
    /  21B9                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21B9                           IF CONT_M > 0
    /  21B9 31                        ins
    /  21BA                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21BA                           IF CONT_M > 0
    /  21BA 31                        ins
    /  21BB                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21BB                           ENDIF
    /  21BB                           ENDIF
    /  21BB                           ENDIF
    /  21BB                           ENDIF
    /  21BB                           ENDIF
    /  21BB                           ENDIF
  370  21BB 2454                      bcc             gp_shi_u        ;si no había barco atacado a la izquierda, se busca arriba
  371  21BD                           %WRITEPOS       #SUNK_SHI       
    /  21BD C690                      ldab            #SUNK_SHI
    /  21BF 37                        pshb                            ;se envía el byte a escribir
    /  21C0 E60C                      ldab            12,x
    /  21C2 37                        pshb                            ;se envía letra (fila)
    /  21C3 E60B                      ldab            11,x
    /  21C5 37                        pshb                            ;se envía num (columna)
    /  21C6 1AEE09                    ldy             9,x
    /  21C9 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21CB E608                      ldab            8,x
    /  21CD 37                        pshb                            ;se envía jugador atacado
    /  21CE BD2387                    jsr             writepos
    /  21D1                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21D1                           IF CONT_M > 0
    /  21D1 31                        ins
    /  21D2                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21D2                           IF CONT_M > 0
    /  21D2 31                        ins
    /  21D3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21D3                           IF CONT_M > 0
    /  21D3 31                        ins
    /  21D4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21D4                           IF CONT_M > 0
    /  21D4 31                        ins
    /  21D5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21D5                           IF CONT_M > 0
    /  21D5 31                        ins
    /  21D6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21D6                           IF CONT_M > 0
    /  21D6 31                        ins
    /  21D7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21D7                           ENDIF
    /  21D7                           ENDIF
    /  21D7                           ENDIF
    /  21D7                           ENDIF
    /  21D7                           ENDIF
    /  21D7                           ENDIF
    /  21D7                           ENDIF
  372  21D7 6A0B                      dec             11,x
  373  21D9                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  21D9 C690                      ldab            #SUNK_SHI
    /  21DB 37                        pshb                            ;se envía el byte a escribir
    /  21DC E60C                      ldab            12,x
    /  21DE 37                        pshb                            ;se envía letra (fila)
    /  21DF E60B                      ldab            11,x
    /  21E1 37                        pshb                            ;se envía num (columna)
    /  21E2 1AEE09                    ldy             9,x
    /  21E5 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21E7 E608                      ldab            8,x
    /  21E9 37                        pshb                            ;se envía jugador atacado
    /  21EA BD2387                    jsr             writepos
    /  21ED                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21ED                           IF CONT_M > 0
    /  21ED 31                        ins
    /  21EE                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21EE                           IF CONT_M > 0
    /  21EE 31                        ins
    /  21EF                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21EF                           IF CONT_M > 0
    /  21EF 31                        ins
    /  21F0                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21F0                           IF CONT_M > 0
    /  21F0 31                        ins
    /  21F1                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21F1                           IF CONT_M > 0
    /  21F1 31                        ins
    /  21F2                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21F2                           IF CONT_M > 0
    /  21F2 31                        ins
    /  21F3                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21F3                           ENDIF
    /  21F3                           ENDIF
    /  21F3                           ENDIF
    /  21F3                           ENDIF
    /  21F3                           ENDIF
    /  21F3                           ENDIF
    /  21F3                           ENDIF
  374  21F3 6C0B                      inc             11,x            ;se recupera el dato
  375  21F5                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  21F5 E60C                      ldab            12,x
    /  21F7 37                        pshb                            ;se envía letra (fila)
    /  21F8 E60B                      ldab            11,x
    /  21FA 37                        pshb                            ;se envía num (columna)
    /  21FB 1AEE0E                    ldy             14,x
    /  21FE 183C                      pshy                            ;se envía inicio de array
    /  2200 E608                      ldab            8,x
    /  2202 37                        pshb                            ;se envía jugador atacado
    /  2203 BD240F                    jsr             play_wrt
    /  2206                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2206                           IF CONT_M > 0
    /  2206 31                        ins
    /  2207                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2207                           IF CONT_M > 0
    /  2207 31                        ins
    /  2208                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2208                           IF CONT_M > 0
    /  2208 31                        ins
    /  2209                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2209                           IF CONT_M > 0
    /  2209 31                        ins
    /  220A                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  220A                           IF CONT_M > 0
    /  220A 31                        ins
    /  220B                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
  376  220B                           %RESTORE
    /  220B 1838                      puly
    /  220D 38                        pulx
    /  220E 33                        pulb
    /  220F 32                        pula
  377  2210 39                        rts
  378                 
  379  2211           gp_shi_u        EQU             *
  380  2211 E60C                      ldab            12,x
  381  2213 C10A                      cmpb            #MIN_F
  382  2215 276D                      beq             gp_shi_d        ;si está en el borde superior, se continúa
  383  2217 E60C                      ldab            12,x
  384  2219 5A                        decb                            ;se va a la posición de arriba
  385  221A 37                        pshb                            ;se envía la letra (fila)
  386  221B E60B                      ldab            11,x
  387  221D 37                        pshb                            ;se envía el num (columna)
  388  221E 1AEE0E                    ldy             14,x
  389  2221 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  390  2223 E608                      ldab            8,x
  391  2225 37                        pshb                            ;se envía el jugador atacado
  392  2226 BD23B8                    jsr             play_src        ;se busca la posición de arriba
  393  2229                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2229                           IF CONT_M > 0
    /  2229 31                        ins
    /  222A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  222A                           IF CONT_M > 0
    /  222A 31                        ins
    /  222B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  222B                           IF CONT_M > 0
    /  222B 31                        ins
    /  222C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  222C                           IF CONT_M > 0
    /  222C 31                        ins
    /  222D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  222D                           IF CONT_M > 0
    /  222D 31                        ins
    /  222E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  222E                           ENDIF
    /  222E                           ENDIF
    /  222E                           ENDIF
    /  222E                           ENDIF
    /  222E                           ENDIF
    /  222E                           ENDIF
  394  222E 2454                      bcc             gp_shi_d        ;si no había barco atacado arriba, se busca abajo
  395  2230                           %WRITEPOS       #SUNK_SHI       
    /  2230 C690                      ldab            #SUNK_SHI
    /  2232 37                        pshb                            ;se envía el byte a escribir
    /  2233 E60C                      ldab            12,x
    /  2235 37                        pshb                            ;se envía letra (fila)
    /  2236 E60B                      ldab            11,x
    /  2238 37                        pshb                            ;se envía num (columna)
    /  2239 1AEE09                    ldy             9,x
    /  223C 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  223E E608                      ldab            8,x
    /  2240 37                        pshb                            ;se envía jugador atacado
    /  2241 BD2387                    jsr             writepos
    /  2244                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2244                           IF CONT_M > 0
    /  2244 31                        ins
    /  2245                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2245                           IF CONT_M > 0
    /  2245 31                        ins
    /  2246                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2246                           IF CONT_M > 0
    /  2246 31                        ins
    /  2247                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2247                           IF CONT_M > 0
    /  2247 31                        ins
    /  2248                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2248                           IF CONT_M > 0
    /  2248 31                        ins
    /  2249                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2249                           IF CONT_M > 0
    /  2249 31                        ins
    /  224A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  224A                           ENDIF
    /  224A                           ENDIF
    /  224A                           ENDIF
    /  224A                           ENDIF
    /  224A                           ENDIF
    /  224A                           ENDIF
    /  224A                           ENDIF
  396  224A 6A0C                      dec             12,x
  397  224C                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  224C C690                      ldab            #SUNK_SHI
    /  224E 37                        pshb                            ;se envía el byte a escribir
    /  224F E60C                      ldab            12,x
    /  2251 37                        pshb                            ;se envía letra (fila)
    /  2252 E60B                      ldab            11,x
    /  2254 37                        pshb                            ;se envía num (columna)
    /  2255 1AEE09                    ldy             9,x
    /  2258 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  225A E608                      ldab            8,x
    /  225C 37                        pshb                            ;se envía jugador atacado
    /  225D BD2387                    jsr             writepos
    /  2260                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2260                           IF CONT_M > 0
    /  2260 31                        ins
    /  2261                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2261                           IF CONT_M > 0
    /  2261 31                        ins
    /  2262                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2262                           IF CONT_M > 0
    /  2262 31                        ins
    /  2263                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2263                           IF CONT_M > 0
    /  2263 31                        ins
    /  2264                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2264                           IF CONT_M > 0
    /  2264 31                        ins
    /  2265                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2265                           IF CONT_M > 0
    /  2265 31                        ins
    /  2266                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2266                           ENDIF
    /  2266                           ENDIF
    /  2266                           ENDIF
    /  2266                           ENDIF
    /  2266                           ENDIF
    /  2266                           ENDIF
    /  2266                           ENDIF
  398  2266 6C0C                      inc             12,x            ;se recupera el dato
  399  2268                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2268 E60C                      ldab            12,x
    /  226A 37                        pshb                            ;se envía letra (fila)
    /  226B E60B                      ldab            11,x
    /  226D 37                        pshb                            ;se envía num (columna)
    /  226E 1AEE0E                    ldy             14,x
    /  2271 183C                      pshy                            ;se envía inicio de array
    /  2273 E608                      ldab            8,x
    /  2275 37                        pshb                            ;se envía jugador atacado
    /  2276 BD240F                    jsr             play_wrt
    /  2279                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2279                           IF CONT_M > 0
    /  2279 31                        ins
    /  227A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  227A                           IF CONT_M > 0
    /  227A 31                        ins
    /  227B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  227B                           IF CONT_M > 0
    /  227B 31                        ins
    /  227C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  227C                           IF CONT_M > 0
    /  227C 31                        ins
    /  227D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  227D                           IF CONT_M > 0
    /  227D 31                        ins
    /  227E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
  400  227E                           %RESTORE
    /  227E 1838                      puly
    /  2280 38                        pulx
    /  2281 33                        pulb
    /  2282 32                        pula
  401  2283 39                        rts
  402                 
  403  2284           gp_shi_d        EQU             *
  404  2284 E60C                      ldab            12,x
  405  2286 C10F                      cmpb            #MAX_F
  406  2288 276D                      beq             gp_shi_h        ;si está en el borde inferior, se continúa
  407  228A E60C                      ldab            12,x
  408  228C 5C                        incb                            ;se va a la posición de abajo
  409  228D 37                        pshb                            ;se envía la letra (fila)
  410  228E E60B                      ldab            11,x
  411  2290 37                        pshb                            ;se envía el num (columna)
  412  2291 1AEE0E                    ldy             14,x
  413  2294 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  414  2296 E608                      ldab            8,x
  415  2298 37                        pshb                            ;se envía el jugador atacado
  416  2299 BD23B8                    jsr             play_src        ;se busca la posición de abajo
  417  229C                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  229C                           IF CONT_M > 0
    /  229C 31                        ins
    /  229D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  229D                           IF CONT_M > 0
    /  229D 31                        ins
    /  229E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  229E                           IF CONT_M > 0
    /  229E 31                        ins
    /  229F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  229F                           IF CONT_M > 0
    /  229F 31                        ins
    /  22A0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22A0                           IF CONT_M > 0
    /  22A0 31                        ins
    /  22A1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22A1                           ENDIF
    /  22A1                           ENDIF
    /  22A1                           ENDIF
    /  22A1                           ENDIF
    /  22A1                           ENDIF
    /  22A1                           ENDIF
  418  22A1 2454                      bcc             gp_shi_h        ;si no había barco atacado abajo, el carguero está tocado
  419  22A3                           %WRITEPOS       #SUNK_SHI       
    /  22A3 C690                      ldab            #SUNK_SHI
    /  22A5 37                        pshb                            ;se envía el byte a escribir
    /  22A6 E60C                      ldab            12,x
    /  22A8 37                        pshb                            ;se envía letra (fila)
    /  22A9 E60B                      ldab            11,x
    /  22AB 37                        pshb                            ;se envía num (columna)
    /  22AC 1AEE09                    ldy             9,x
    /  22AF 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22B1 E608                      ldab            8,x
    /  22B3 37                        pshb                            ;se envía jugador atacado
    /  22B4 BD2387                    jsr             writepos
    /  22B7                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22B7                           IF CONT_M > 0
    /  22B7 31                        ins
    /  22B8                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22B8                           IF CONT_M > 0
    /  22B8 31                        ins
    /  22B9                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22B9                           IF CONT_M > 0
    /  22B9 31                        ins
    /  22BA                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22BA                           IF CONT_M > 0
    /  22BA 31                        ins
    /  22BB                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22BB                           IF CONT_M > 0
    /  22BB 31                        ins
    /  22BC                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22BC                           IF CONT_M > 0
    /  22BC 31                        ins
    /  22BD                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22BD                           ENDIF
    /  22BD                           ENDIF
    /  22BD                           ENDIF
    /  22BD                           ENDIF
    /  22BD                           ENDIF
    /  22BD                           ENDIF
    /  22BD                           ENDIF
  420  22BD 6C0C                      inc             12,x
  421  22BF                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  22BF C690                      ldab            #SUNK_SHI
    /  22C1 37                        pshb                            ;se envía el byte a escribir
    /  22C2 E60C                      ldab            12,x
    /  22C4 37                        pshb                            ;se envía letra (fila)
    /  22C5 E60B                      ldab            11,x
    /  22C7 37                        pshb                            ;se envía num (columna)
    /  22C8 1AEE09                    ldy             9,x
    /  22CB 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22CD E608                      ldab            8,x
    /  22CF 37                        pshb                            ;se envía jugador atacado
    /  22D0 BD2387                    jsr             writepos
    /  22D3                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22D3                           IF CONT_M > 0
    /  22D3 31                        ins
    /  22D4                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22D4                           IF CONT_M > 0
    /  22D4 31                        ins
    /  22D5                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22D5                           IF CONT_M > 0
    /  22D5 31                        ins
    /  22D6                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22D6                           IF CONT_M > 0
    /  22D6 31                        ins
    /  22D7                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22D7                           IF CONT_M > 0
    /  22D7 31                        ins
    /  22D8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22D8                           IF CONT_M > 0
    /  22D8 31                        ins
    /  22D9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22D9                           ENDIF
    /  22D9                           ENDIF
    /  22D9                           ENDIF
    /  22D9                           ENDIF
    /  22D9                           ENDIF
    /  22D9                           ENDIF
    /  22D9                           ENDIF
  422  22D9 6A0C                      dec             12,x            ;se recupera el dato
  423  22DB                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22DB E60C                      ldab            12,x
    /  22DD 37                        pshb                            ;se envía letra (fila)
    /  22DE E60B                      ldab            11,x
    /  22E0 37                        pshb                            ;se envía num (columna)
    /  22E1 1AEE0E                    ldy             14,x
    /  22E4 183C                      pshy                            ;se envía inicio de array
    /  22E6 E608                      ldab            8,x
    /  22E8 37                        pshb                            ;se envía jugador atacado
    /  22E9 BD240F                    jsr             play_wrt
    /  22EC                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22EC                           IF CONT_M > 0
    /  22EC 31                        ins
    /  22ED                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22ED                           IF CONT_M > 0
    /  22ED 31                        ins
    /  22EE                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22EE                           IF CONT_M > 0
    /  22EE 31                        ins
    /  22EF                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22EF                           IF CONT_M > 0
    /  22EF 31                        ins
    /  22F0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22F0                           IF CONT_M > 0
    /  22F0 31                        ins
    /  22F1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
  424  22F1                           %RESTORE
    /  22F1 1838                      puly
    /  22F3 38                        pulx
    /  22F4 33                        pulb
    /  22F5 32                        pula
  425  22F6 39                        rts
  426                 
  427  22F7           gp_shi_h        EQU             *
  428  22F7                           %WRITEPOS       #HIT            ;se marca al carguero como tocado
    /  22F7 C6B0                      ldab            #HIT
    /  22F9 37                        pshb                            ;se envía el byte a escribir
    /  22FA E60C                      ldab            12,x
    /  22FC 37                        pshb                            ;se envía letra (fila)
    /  22FD E60B                      ldab            11,x
    /  22FF 37                        pshb                            ;se envía num (columna)
    /  2300 1AEE09                    ldy             9,x
    /  2303 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2305 E608                      ldab            8,x
    /  2307 37                        pshb                            ;se envía jugador atacado
    /  2308 BD2387                    jsr             writepos
    /  230B                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  230B                           IF CONT_M > 0
    /  230B 31                        ins
    /  230C                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  230C                           IF CONT_M > 0
    /  230C 31                        ins
    /  230D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  230D                           IF CONT_M > 0
    /  230D 31                        ins
    /  230E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  230E                           IF CONT_M > 0
    /  230E 31                        ins
    /  230F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  230F                           IF CONT_M > 0
    /  230F 31                        ins
    /  2310                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2310                           IF CONT_M > 0
    /  2310 31                        ins
    /  2311                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2311                           ENDIF
    /  2311                           ENDIF
    /  2311                           ENDIF
    /  2311                           ENDIF
    /  2311                           ENDIF
    /  2311                           ENDIF
    /  2311                           ENDIF
  429  2311                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2311 E60C                      ldab            12,x
    /  2313 37                        pshb                            ;se envía letra (fila)
    /  2314 E60B                      ldab            11,x
    /  2316 37                        pshb                            ;se envía num (columna)
    /  2317 1AEE0E                    ldy             14,x
    /  231A 183C                      pshy                            ;se envía inicio de array
    /  231C E608                      ldab            8,x
    /  231E 37                        pshb                            ;se envía jugador atacado
    /  231F BD240F                    jsr             play_wrt
    /  2322                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2322                           IF CONT_M > 0
    /  2322 31                        ins
    /  2323                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2323                           IF CONT_M > 0
    /  2323 31                        ins
    /  2324                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2324                           IF CONT_M > 0
    /  2324 31                        ins
    /  2325                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2325                           IF CONT_M > 0
    /  2325 31                        ins
    /  2326                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2326                           IF CONT_M > 0
    /  2326 31                        ins
    /  2327                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2327                           ENDIF
    /  2327                           ENDIF
    /  2327                           ENDIF
    /  2327                           ENDIF
    /  2327                           ENDIF
    /  2327                           ENDIF
  430  2327                           %RESTORE
    /  2327 1838                      puly
    /  2329 38                        pulx
    /  232A 33                        pulb
    /  232B 32                        pula
  431  232C 39                        rts
  432                 
  433                 *====================================================================================
  434                 * Subrutina "MIRROR"
  435                 *
  436                 * Descripción:  Esta subrutina copia el contenido de las posiciones de un array fuente
  437                 *               a un espacio de memoria destino.
  438                 * Parámetros de entrada:
  439                 *               - Dirección de comienzo de array FUENTE
  440                 *               - Número de arreglo contenido en otro arreglo (número de jugador)(0 en adelante)
  441                 *               - Dirección de DESTINO de la copia 
  442                 *               - Número de posiciones a copiar (un byte, hasta 255 posiciones.)
  443                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  444                 *
  445                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  446                 *       Se destruirá el dato de la dirección del array de origen.
  447                 *               
  448                 * Parámetros de salida: NINGUNO
  449                 *       
  450                 *
  451                 * Consideraciones:
  452                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  453                 *
  454                 *====================================================================================
  455                 
  456  232D           mirror          EQU             *       
  457                         
  458  232D                           %BACKUP
    /  232D 36                        psha
    /  232E 37                        pshb
    /  232F 3C                        pshx
    /  2330 183C                      pshy
  459  2332 30                        tsx                             ;creo frame pointer
  460  2333 A60B                      ldaa            11,x            ;cargo número de jugador
  461  2335 E608                      ldab            8,x             ;cargo longitud de la copia (del array a copiar)
  462  2337 3D                        mul                             ;obtengo offset de jugador
  463  2338 E30C                      addd            12,x            ;sumo offset de jugador
  464  233A ED0C                      std             12,x            ;guardo la dirección con offset del array fuente
  465                 
  466  233C A60C                      ldaa            12,x            ;cargo longitud de copia en contador
  467  233E 2710                      beq             mi_end          ;si es cero, vuelvo desde subrutina
  468  2340 1AEE09                    ldy             9,x             ;cargo índice a destino de la copia.
  469  2343 EE0C                      ldx             12,x            ;cargo índice a array origen de copia.
  470                 
  471  2345           mi_loop         EQU             *
  472                 
  473  2345 E600                      ldab            0,x             ;cargo byte a copiar
  474  2347 18E700                    stab            0,y             ;copio byte en destino
  475  234A 08                        inx                             ;siguiente byte
  476  234B 1808                      iny                             ;siguiente byte
  477  234D 4A                        deca                            ;decremento contador
  478  234E 26F5                      bne             mi_loop
  479                 
  480  2350           mi_end          EQU             *
  481                 
  482  2350                           %RESTORE
    /  2350 1838                      puly
    /  2352 38                        pulx
    /  2353 33                        pulb
    /  2354 32                        pula
  483                         
  484  2355 39                        rts     
  485                                 
  486                                                 
  487                 *====================================================================================
  488                 * Subrutina "FETCHPOS"
  489                 *
  490                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  491                 *               determinada posición, y devuelve el byte que se encuentra
  492                 *               en esa posición por stack. Subrutina limitada a longitud
  493                 *               de elementos del array de un byte.
  494                 *
  495                 * Parámetros de entrada:
  496                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  497                 *               - COLUMNA del array (en HEX)
  498                 *               - Dirección de comienzo del arreglo (2 bytes)
  499                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  500                 *
  501                 *       Todos los parámetros se reciben por stack en el orden indicado.
  502                 *       Se destruirá el dato del índice al arreglo.
  503                 *               
  504                 * Parámetros de salida:
  505                 *               - Byte encontrado en esa posición (se devuelve por stack)
  506                 *
  507                 *
  508                 * Consideraciones:
  509                 *               - Antes de recuperar el byte en stack se debe normalizar el mismo
  510                 *                 en 4 posiciones (4 bytes)
  511                 *               - Requiere definición de constante "ARRAY_L"
  512                 *
  513                 *====================================================================================
  514                 
  515  2356           fetchpos        EQU             *
  516                 
  517  2356                           %BACKUP
    /  2356 36                        psha
    /  2357 37                        pshb
    /  2358 3C                        pshx
    /  2359 183C                      pshy
  518  235B 30                        tsx                             ;creo frame pointer
  519  235C A608                      ldaa            8,x             ;cargo numero de jugador
  520  235E C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  521  2360 3D                        mul                             ;obtengo offset de jugador
  522  2361 E309                      addd            9,x             ;sumo offset de jugador a top of array
  523  2363 ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  524                 
  525  2365 A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  526  2367 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  527  2369 10                        sba                             ;obtengo numero de fila
  528  236A C606                      ldab            #COL            ;cargo longitud de fila
  529  236C 3D                        mul                             ;obtengo offset de fila
  530  236D E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  531  236F ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  532                 
  533  2371 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  534  2373 5A                        decb                            ;normalizo offset de columna
  535  2374 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  536  2375 E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  537  2377 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  538                 
  539  2379 1AEE09                    ldy             9,x             ;cargo en IY la dirección del byte que se desea obtener
  540  237C 18A600                    ldaa            0,y             ;cargo el byte a devolver en AccA
  541  237F A70C                      staa            12,x            ;guardo el byte a devolver en stack
  542  2381                           %RESTORE
    /  2381 1838                      puly
    /  2383 38                        pulx
    /  2384 33                        pulb
    /  2385 32                        pula
  543                                 
  544  2386 39                        rts
  545                                 
  546                                 
  547                 
  548                 *====================================================================================
  549                 * Subrutina "WRITEPOS"
  550                 *
  551                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  552                 *               determinada posición, y escribe en la misma un byte de
  553                 *               datos que será recibido como parámetro de entrada por stack.
  554                 *
  555                 * Parámetros de entrada:
  556                 *               - BYTE a escribir en la posición indicada
  557                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  558                 *               - COLUMNA del array (en HEX)
  559                 *               - Dirección de comienzo del arreglo (2 bytes)
  560                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  561                 *
  562                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  563                 *       Se destruirá el dato del índice al arreglo.
  564                 *               
  565                 * Parámetros de salida: NINGUNO
  566                 *       
  567                 *
  568                 * Consideraciones:
  569                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  570                 *               - Requiere definición de constante "ARRAY_L"
  571                 *
  572                 *====================================================================================
  573                 
  574  2387           writepos        EQU             *
  575                 
  576  2387                           %BACKUP
    /  2387 36                        psha
    /  2388 37                        pshb
    /  2389 3C                        pshx
    /  238A 183C                      pshy
  577  238C 30                        tsx                             ;creo frame pointer
  578  238D A608                      ldaa            8,x             ;cargo numero de jugador
  579  238F C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  580  2391 3D                        mul                             ;obtengo offset de jugador
  581  2392 E309                      addd            9,x             ;sumo offset de jugador a top of array
  582  2394 ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  583                 
  584  2396 A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  585  2398 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  586  239A 10                        sba                             ;obtengo numero de fila
  587  239B C606                      ldab            #COL            ;cargo longitud de fila
  588  239D 3D                        mul                             ;obtengo offset de fila
  589  239E E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  590  23A0 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  591                 
  592  23A2 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  593  23A4 5A                        decb                            ;normalizo offset de columna
  594  23A5 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  595  23A6 E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  596  23A8 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  597                 
  598  23AA 1AEE09                    ldy             9,x             ;cargo en IY la dirección donde se desea escribir
  599  23AD A60D                      ldaa            13,x            ;cargo en AccA el byte que se quiere escribir en el arreglo
  600  23AF 18A700                    staa            0,y             ;escribo el byte sobre el arreglo
  601  23B2                           %RESTORE
    /  23B2 1838                      puly
    /  23B4 38                        pulx
    /  23B5 33                        pulb
    /  23B6 32                        pula
  602                                 
  603  23B7 39                        rts
  604                 *====================================================================================
  605                 * Subrutina "PLAY_SRC"
  606                 *
  607                 * Descripción:  Esta subrutina busca dos bytes consecutivos (posicion jugada) dentro de un arreglo.
  608                 *               El valor $00 podrá estar en el array solo como terminador
  609                 * Parámetros de entrada:
  610                 *               - Byte1 a buscar (en este caso, n° fila)
  611                 *               - Byte2 a buscar (en este caso, n° columna)
  612                 *               - Dirección de inicio del array
  613                 *               - Número de jugador (0 o mayor)
  614                 *
  615                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  616                 *               
  617                 * Parámetros de salida:
  618                 *               - Carry en 1, si se encontró la posición.
  619                 *       
  620                 *
  621                 * Consideraciones:
  622                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones antes de
  623                 *                 recuperar el parámetro de salida.
  624                 *
  625                 *====================================================================================
  626                 
  627  23B8           play_src        EQU             *               
  628                                         
  629  23B8                           %BACKUP
    /  23B8 36                        psha
    /  23B9 37                        pshb
    /  23BA 3C                        pshx
    /  23BB 183C                      pshy
  630  23BD 30                        tsx                             ;creo frame pointer
  631  23BE A608                      ldaa            8,x             ;cargo número de array (jugador)
  632  23C0 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  633  23C2 3D                        mul                             ;obtengo offset de jugador
  634  23C3 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  635  23C5 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  636                 
  637  23C7           ps_loop         EQU             *
  638                 
  639  23C7 18A600                    ldaa            0,y             ;cargo byte1 a comparar
  640  23CA 2718                      beq             ps_ntfnd        ;si encontré el terminador, el valor requerido no está en el array
  641                 
  642  23CC A10C                      cmpa            12,x            ;comparo con el byte1 a buscar
  643  23CE 2706                      beq             ps_next         ;si coinciden, busco el byte 2
  644  23D0 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  645  23D2 1808                      iny
  646  23D4 20F1                      bra             ps_loop         ;vuelvo a comparar
  647                 
  648  23D6           ps_next         EQU             *
  649                 
  650  23D6 18E601                    ldab            1,y             ;cargo byte a continuación del anterior
  651  23D9 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  652  23DB 1808                      iny
  653  23DD E10B                      cmpb            11,x            ;comparo con byte2
  654  23DF 26E6                      bne             ps_loop         ;si no son iguales, sigo buscando
  655  23E1 0D                        sec                             ;set del carry para informar que se encontró el valor
  656  23E2 2001                      bra             ps_end
  657                                         
  658  23E4           ps_ntfnd        EQU             *
  659                 
  660  23E4 0C                        clc                             ;carry en 0 para informar que no se encontró el valor
  661                 
  662  23E5           ps_end          EQU             *
  663                                 
  664  23E5                           %RESTORE
    /  23E5 1838                      puly
    /  23E7 38                        pulx
    /  23E8 33                        pulb
    /  23E9 32                        pula
  665                 
  666  23EA 39                        rts
  667                 
  668                 
  669                 
  670                                         
  671                 
  672                                         
  673                 
  674                 *====================================================================================
  675                 * Subrutina "PLAY_CNT"
  676                 *
  677                 * Descripción:  Esta subrutina cuenta la cantidad de datos de dos bytes que se encuentran en una
  678                 *               determinada zona de memoria configurada como array. Se supone que $00 no es un dato presente en dicho array, 
  679                 *               usándose solamente como terminador del mismo.
  680                 *
  681                 * Parámetros de entrada:
  682                 *               - Dirección de inicio del array
  683                 *               - Número de jugador (0 o mayor)
  684                 *
  685                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  686                 *               
  687                 * Parámetros de salida:
  688                 *               - Cantidad de datos de dos bytes encontrados, por stack (máximo 255 datos).
  689                 *       
  690                 *
  691                 * Consideraciones:
  692                 *               - Luego de invocada, se debe normalizar el stack en 2 posiciones antes de
  693                 *                 recuperar el parámetro de salida.
  694                 *
  695                 *====================================================================================
  696                 
  697  23EB           play_cnt        EQU             *
  698                 
  699  23EB                           %BACKUP
    /  23EB 36                        psha
    /  23EC 37                        pshb
    /  23ED 3C                        pshx
    /  23EE 183C                      pshy
  700  23F0 30                        tsx                             ;creo frame pointer
  701  23F1 A608                      ldaa            8,x             ;cargo número de array (jugador)
  702  23F3 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  703  23F5 3D                        mul                             ;obtengo offset de jugador
  704  23F6 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  705  23F8 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  706  23FA 4F                        clra                            ;inicializo contador
  707                                         
  708  23FB           pc_loop         EQU             *               
  709                                         
  710  23FB 18E600                    ldab            0,y             ;cargo byte a comparar
  711  23FE 2707                      beq             pc_end          ;si es terminador, terminé de buscar
  712  2400 1808                      iny                             ;si no es terminador, me posiciono sobre siguiente dato de 
  713  2402 1808                      iny                             ;2 bytes
  714  2404 4C                        inca                            ;incremento contador
  715  2405 20F4                      bra             pc_loop         ;vuelvo a comparar
  716                                         
  717  2407           pc_end          EQU             *       
  718                                         
  719  2407 A70A                      staa            10,x            ;devuelvo valor por stack
  720  2409                           %RESTORE
    /  2409 1838                      puly
    /  240B 38                        pulx
    /  240C 33                        pulb
    /  240D 32                        pula
  721                                 
  722  240E 39                        rts
  723                 
  724                 
  725                 *====================================================================================
  726                 * Subrutina "PLAY_WRT"
  727                 *
  728                 * Descripción:  Esta subrutina escribe dos bytes distintos (en este caso, la posición 
  729                 *               jugada, compuesta de una letra y un número) en la primera posición "libre"
  730                 *               de un array y en la siguiente. La subrutina escribirá los datos desde la primera posición con ceros
  731                 *               que encuentre en el array, por lo que el mismo NO podrá contener el dato "$00" en ninguno
  732                 *               de sus bytes, caso contrario la subrutina lo interpretará como vacío y sobreescribirá información. Se
  733                 *               supone que el array tendrá por lo menos, dos posiciones libres.
  734                 *
  735                 * Parámetros de entrada:
  736                 *               - Primer byte a escribir (en este caso, fila jugada)
  737                 *               - Byte a escribir a continuación del primero (en este caso, columna jugada)
  738                 *               - Dirección de inicio del array en el que se va a escribir
  739                 *               - Número de jugador (0 o mayor)
  740                 *
  741                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  742                 *               
  743                 * Parámetros de salida: NINGUNO
  744                 *       
  745                 *
  746                 * Consideraciones:
  747                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones
  748                 *
  749                 *====================================================================================
  750                 
  751  240F           play_wrt        EQU             *
  752                 
  753  240F                           %BACKUP
    /  240F 36                        psha
    /  2410 37                        pshb
    /  2411 3C                        pshx
    /  2412 183C                      pshy
  754  2414 30                        tsx                             ;creo frame pointer
  755  2415 A608                      ldaa            8,x             ;cargo número de array (jugador)
  756  2417 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  757  2419 3D                        mul                             ;obtengo offset de jugador
  758  241A E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  759  241C 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  760                 
  761                 
  762  241E           pw_loop         EQU             *
  763                 
  764  241E 18A600                    ldaa            0,y             ;cargo byte del array
  765  2421 2704                      beq             pw_end          ;si es cero, entonces escribo los datos
  766  2423 1808                      iny                             ;si no es cero, me posiciono sobre la siguiente posición
  767  2425 20F7                      bra             pw_loop         ;vuelvo a buscar ceros
  768                 
  769  2427           pw_end          EQU             *
  770                 
  771  2427 A60C                      ldaa            12,x            ;cargo primer byte a escribir
  772  2429 18A700                    staa            0,y             ;guardo primer byte en memoria
  773  242C 1808                      iny                             ;me posiciono en el siguiente byte
  774  242E A60B                      ldaa            11,x            ;cargo segundo byte a escribir
  775  2430 18A700                    staa            0,y             ;guardo segundo byte en memoria
  776  2433                           %RESTORE
    /  2433 1838                      puly
    /  2435 38                        pulx
    /  2436 33                        pulb
    /  2437 32                        pula
  777                 
  778  2438 39                        rts
  779                 
  780                 ***************************************************************************************
  781                 *Subrutina "CLRZONE"
  782                 *Función: "borra" (guarda ceros) una determinada zona de memoria.
  783                 *         
  784                 *
  785                 * Parámetros de entrada: -Dirección de comienzo de sección a borrar (por stack)
  786                 *                        -Longitud de zona de memoria (por stack)
  787                 *                       
  788                 *
  789                 * Parámetros de salida: Ninguno
  790                 *
  791                 * consideraciones: 
  792                 *                  - Incluir macros "%BACKUP" y "%RESTORE".
  793                 *                                       
  794                 *************************************************************************************** 
  795  2439           clrzone         EQU     *
  796                 
  797  2439                           %BACKUP                         ;backup de registros en stack
    /  2439 36                        psha
    /  243A 37                        pshb
    /  243B 3C                        pshx
    /  243C 183C                      pshy
  798                 
  799  243E 30                        tsx
  800  243F A608                      ldaa    8,x                     ;cargo contador con longitud de zona a borrar
  801  2441 EE09                      ldx     9,x                     ;cargo puntero zona de memoria a borrar
  802  2443 D600                      ldab    $00                     ;cargo el cero
  803  2445           clr_loop        EQU     *
  804  2445 E700                      stab    0,x                     ;guardo caracter en posicion del array
  805  2447 08                        inx                             ;siguiente posición     
  806  2448 4A                        deca                            ;decremento contador
  807  2449 26FA                      bne     clr_loop                ;si no es cero, escribo en la posición siguiente.
  808                 
  809  244B                           %RESTORE                        :restauro backup en registros
    /  244B 1838                      puly
    /  244D 38                        pulx
    /  244E 33                        pulb
    /  244F 32                        pula
  810                 
  811  2450 39                        rts
  812                 
  813                 *---------------------------------------
  814                 * WhoPlays: subrutina para ver que 
  815                 *           jugador juega
  816                 *---------------------------------------
  817                 
  818  2451           whoplays        EQU             *
  819                 
  820  2451 BD250E    wait_ply        jsr             read_kb
  821  2454 4D                        tsta
  822  2455 2BFA                      bmi             wait_ply
  823  2457 8103                      cmpa            #B_P1
  824  2459 2708                      beq             play_p1
  825  245B 8107                      cmpa            #B_P2
  826  245D 26F2                      bne             wait_ply
  827  245F 8600                      ldaa            #P1
  828  2461 2002                      bra             ply_end
  829                 
  830  2463 8601      play_p1         ldaa            #P2
  831  2465 39        ply_end         rts             
  832                 
  833                 *---------------------------------------
  834                 * Input: subrutina que devuelve
  835                 *        entrada para la batalla naval
  836                 * AccA: Fila de la posicion jugada
  837                 * AccB: Columna de la posicion jugada
  838                 *---------------------------------------
  839                 
  840  2466           input           EQU             *
  841                 
  842                 * back up de registros
  843  2466 3C                        pshx
  844  2467 183C                      pshy
  845                 
  846                 * creo variables locales
  847  2469 36                        psha
  848  246A 36                        psha
  849  246B 36                        psha
  850                 
  851                 * inicializo framepointer
  852  246C 1830                      tsy
  853                 
  854                 * prendo el led
  855  246E                           %LED_INV
    /  246E B61000                    ldaa            PORTA
    /  2471 8840                      eora            #SHF_LED
    /  2473 B71000                    staa            PORTA
  856                 
  857                 * inicializo el contador
  858  2476 8603      inp_rest        ldaa            #INPUTS
  859  2478 18A700                    staa            CONT,Y
  860                                 
  861                 * limpio el display
  862  247B CE41F9                    ldx             #string
  863  247E 8604                      ldaa            #4
  864  2480 C620                      ldab            #ESP
  865  2482 BD25D8                    jsr             clrarray
  866                 
  867  2485 BD25C7                    jsr             clr_dis
  868                 
  869  2488 86FF                      ldaa            #$FF
  870  248A B741F8                    staa            buffer
  871                 
  872                 * lectura de teclado
  873  248D BD250E    wait_kb         jsr             read_kb
  874  2490 4D                        tsta
  875  2491 2BFA                      bmi             wait_kb
  876  2493 B141F8                    cmpa            buffer
  877  2496 27F5                      beq             wait_kb
  878  2498 B741F8                    staa            buffer
  879                                 
  880  249B 810F                      cmpa            #B_reset
  881  249D 27D7                      beq             inp_rest
  882                 
  883  249F 186A00                    dec             CONT,Y
  884  24A2 2727                      beq             chk_fire
  885  24A4 36                        psha
  886  24A5 CE41FE                    ldx             #kb_value
  887  24A8 16                        tab
  888  24A9 3A                        abx
  889  24AA A600                      ldaa            0,X             
  890  24AC 183C                      pshy
  891  24AE 18E600                    ldab            CONT,Y
  892  24B1 183A                      aby
  893  24B3 18A700                    staa            0,Y
  894  24B6 1838                      puly
  895                 
  896  24B8 33                        pulb
  897  24B9 BD25B7                    jsr             to_ascii
  898  24BC 17                        tba
  899                                 
  900  24BD CE41F9                    ldx             #string
  901  24C0 BD25A7                    jsr             sh_value
  902                 
  903  24C3 CE41F9                    ldx             #string
  904  24C6 BD24FA                    jsr             show
  905                 
  906  24C9 20C2                      bra             wait_kb
  907                 
  908  24CB 810B      chk_fire        cmpa            #B_fire
  909  24CD 26A7                      bne             inp_rest
  910  24CF 18A602                    ldaa            FILA_L,Y
  911  24D2 810A                      cmpa            #MIN_FIL
  912  24D4 25A0                      blo             inp_rest
  913  24D6 810F                      cmpa            #MAX_FIL
  914  24D8 229C                      bhi             inp_rest
  915  24DA 18A601                    ldaa            COL_L,Y
  916  24DD 8101                      cmpa            #MIN_COL
  917  24DF 2595                      blo             inp_rest
  918  24E1 8106                      cmpa            #MAX_COL
  919  24E3 2291                      bhi             inp_rest
  920                 
  921                 * apago el led
  922  24E5                           %LED_INV
    /  24E5 B61000                    ldaa            PORTA
    /  24E8 8840                      eora            #SHF_LED
    /  24EA B71000                    staa            PORTA
  923                 
  924                 * libero variables locales
  925  24ED 32                        pula
  926  24EE 32                        pula
  927  24EF 32                        pula
  928                 
  929  24F0 18A602    return          ldaa            FILA_L,Y
  930  24F3 18E601                    ldab            COL_L,Y         
  931                 
  932                 * restore de registros
  933  24F6 1838                      puly
  934  24F8 38                        pulx
  935                 
  936  24F9 39                        rts
  937                 
  938                 *------------------------------------
  939                 * Show: Por IX direccion de string de
  940                 *       4 caracteres para imprimir
  941                 *------------------------------------
  942                 
  943  24FA           show            EQU             *
  944                 
  945                 * back up de registros
  946  24FA 3C                        pshx
  947  24FB 37                        pshb
  948  24FC 36                        psha
  949                 
  950                 * inicializo contador de posiciones
  951  24FD C604                      ldab            #LENGTH
  952                                 
  953                 * loop para enviar a cada posicion
  954  24FF 5A        sh_loop         decb
  955  2500 2B08                      bmi             sh_end          ; si no pase por todas las posiciones
  956  2502 A600                      ldaa            0,X             ; tomo del string el caracter
  957  2504 BD25C0                    jsr             outchar         ; y lo imprimo en la posicion actual
  958  2507 08                        inx
  959  2508 20F5                      bra             sh_loop
  960                 
  961                 * restore de registros                          
  962  250A 32        sh_end          pula
  963  250B 33                        pulb
  964  250C 38                        pulx
  965  250D 39                        rts
  966                 
  967                 *----------------------------------------------
  968                 * read_kb: AccA: tecla presionada
  969                 *          o -1
  970                 *----------------------------------------------
  971                 
  972  250E           read_kb         EQU             *
  973                 
  974                 * back up de registros
  975  250E 3C                        pshx
  976  250F 37                        pshb
  977                 
  978                 * creo espacio para variables locales
  979  2510                           %MALLOC         1               ; variable mascara de filas
    /  2510                           IF 1 > 0
    /  2510 30                        tsx
    /  2511 8F                        xgdx
    /  2512 830001                    subd    #1
    /  2515 8F                        xgdx
    /  2516 35                        txs
    /  2517                           ENDIF
  980  2517                           %MALLOC         1               ; variable mascara de columnas
    /  2517                           IF 1 > 0
    /  2517 30                        tsx
    /  2518 8F                        xgdx
    /  2519 830001                    subd    #1
    /  251C 8F                        xgdx
    /  251D 35                        txs
    /  251E                           ENDIF
  981  251E                           %MALLOC         1               ; variable contador de columnas
    /  251E                           IF 1 > 0
    /  251E 30                        tsx
    /  251F 8F                        xgdx
    /  2520 830001                    subd    #1
    /  2523 8F                        xgdx
    /  2524 35                        txs
    /  2525                           ENDIF
  982  2525                           %MALLOC         1               ; variable contador de tecla
    /  2525                           IF 1 > 0
    /  2525 30                        tsx
    /  2526 8F                        xgdx
    /  2527 830001                    subd    #1
    /  252A 8F                        xgdx
    /  252B 35                        txs
    /  252C                           ENDIF
  983                 
  984                 * inicializacion de variables
  985  252C 30                        tsx                             ; framepointer para acceder a locales
  986  252D C604                      ldab            #LENGTH         ; contador de fila
  987  252F 860E                      ldaa            #FIL0           ; mascara para la fila cero
  988  2531 A703                      staa            MASK_FIL,X      
  989  2533 8610                      ldaa            #COL0           ; mascara para la columna cero
  990  2535 A702                      staa            MASK_COL,X
  991  2537 4F                        clra                            ; contador de columna
  992  2538 A701                      staa            COL_CONT,X
  993  253A A700                      staa            KB_PRESS,X      ; variable con numero de tecla
  994                 
  995                 * loop para barrer y mirar teclado matricial
  996  253C 86FF      kb_loop         ldaa            #NONE
  997  253E 5A                        decb                            
  998  253F 2B2C                      bmi             kb_end          ; me fijo si recorrio todas las filas
  999  2541 A603                      ldaa            MASK_FIL,X      ; enmascaro la siguiente fila
 1000  2543 B71003                    staa            ROWS
 1001  2546 0D                        sec                             ; carry para rotacion de byte
 1002  2547 49                        rola                            
 1003  2548 A703                      staa            MASK_FIL,X      ; cambio variable mascara para la proxima fila
 1004                 
 1005  254A 8604                      ldaa            #LENGTH
 1006  254C A701                      staa            COL_CONT,X
 1007  254E 8610                      ldaa            #COL0           ; inicializo variable para barrer
 1008  2550 A702                      staa            MASK_COL,X      ; la columna
 1009                 
 1010  2552 6A01      kb_col          dec             COL_CONT,X      ; me fijo si barrio todas las columnas
 1011  2554 2BE6                      bmi             kb_loop
 1012  2556 B61005                    ldaa            COLS            ; leo el puerto de columnas
 1013  2559 A402                      anda            MASK_COL,X      ; enmascaro columna
 1014  255B 2707                      beq             kb_hit          ; si es nulo apretaron un boton
 1015  255D 48                        lsla                            ; cambio mascara para proxima columna
 1016  255E A702                      staa            MASK_COL,X
 1017  2560 6C00                      inc             KB_PRESS,X      ; incremento numero de tecla
 1018  2562 20EE                      bra             kb_col
 1019                 
 1020  2564 A600      kb_hit          ldaa            KB_PRESS,X      ; apretaron una tecla, lo comparo
 1021  2566 B141F7                    cmpa            kb_buff         ; con la que fue apretada antes
 1022  2569 2602                      bne             kb_end          ; aviso por led
 1023                 
 1024  256B 86FF      kb_none         ldaa            #NONE           ; en caso de que no apreten nada
 1025                 
 1026  256D B741F7    kb_end          staa            kb_buff         ; actualizo variable
 1027                                         
 1028                 * elimino variables locales
 1029  2570                           %RELMEM         1
    /  2570                           IF 1 > 0
    /  2570 30                        tsx
    /  2571 8F                        xgdx
    /  2572 C30001                    addd    #1
    /  2575 8F                        xgdx
    /  2576 35                        txs
    /  2577                           ENDIF           
 1030  2577                           %RELMEM         1
    /  2577                           IF 1 > 0
    /  2577 30                        tsx
    /  2578 8F                        xgdx
    /  2579 C30001                    addd    #1
    /  257C 8F                        xgdx
    /  257D 35                        txs
    /  257E                           ENDIF           
 1031  257E                           %RELMEM         1
    /  257E                           IF 1 > 0
    /  257E 30                        tsx
    /  257F 8F                        xgdx
    /  2580 C30001                    addd    #1
    /  2583 8F                        xgdx
    /  2584 35                        txs
    /  2585                           ENDIF           
 1032  2585                           %RELMEM         1
    /  2585                           IF 1 > 0
    /  2585 30                        tsx
    /  2586 8F                        xgdx
    /  2587 C30001                    addd    #1
    /  258A 8F                        xgdx
    /  258B 35                        txs
    /  258C                           ENDIF           
 1033                 
 1034                 * restore de registros
 1035  258C 33                        pulb
 1036  258D 38                        pulx
 1037                                 
 1038  258E 39                        rts
 1039                 
 1040                 *----------------------------------------------
 1041                 * init_kb: subrutina para inicializar teclado
 1042                 *----------------------------------------------
 1043                 
 1044  258F           init_kb         EQU             *
 1045                 
 1046                 * back up de registros
 1047  258F 36                        psha
 1048                 
 1049                 * inicializacion de teclado             
 1050  2590 86FF                      ldaa            #NONE
 1051  2592 B741F7                    staa            kb_buff
 1052                 
 1053                 * restore de registros
 1054  2595 32                        pula
 1055  2596 39                        rts
 1056                 
 1057                 *--------------------------------
 1058                 * Inicializa display (y teclado)
 1059                 *--------------------------------
 1060                 
 1061  2597           initdis         EQU             *
 1062                         
 1063  2597 36                        psha
 1064                 
 1065  2598 860F                      ldaa            #$0F       ;set for input/output
 1066  259A B71007                    staa            DDRC       ;C output
 1067  259D B61002                    ldaa            PIOC       ;get current value
 1068  25A0 84FE                      anda            #$FE       ;reset bit 0 to 0
 1069  25A2 B71002                    staa            PIOC       ;send it out
 1070                         
 1071  25A5 32                        pula
 1072  25A6 39                        rts
 1073                 
 1074                 *--------------------------------------------------------------
 1075                 * sh_value: toma un string, desplaza los caracteres a izquierda
 1076                 *           y agrega un nuevo caracter
 1077                 *           IX: direccion del string
 1078                 *           AccA: nuevo valor
 1079                 *--------------------------------------------------------------
 1080                 
 1081  25A7           sh_value        EQU             *
 1082                 
 1083                 * back up de registros
 1084  25A7 3C                        pshx
 1085  25A8 37                        pshb
 1086                 
 1087                 * loop para desplazar caracteres
 1088  25A9 E601      v_loop          ldab            1,X             ;tomo elemento siguiente en string
 1089  25AB 2705                      beq             v_end
 1090  25AD E700                      stab            0,X             ;y lo guardo en posicion actual
 1091  25AF 08                        inx
 1092  25B0 20F7                      bra             v_loop          
 1093                 
 1094  25B2 A700      v_end           staa            0,X             ;ingresa nuevo caracter en cadena desplazada
 1095                 
 1096                 * restore de registros
 1097  25B4 33                        pulb
 1098  25B5 38                        pulx
 1099  25B6 39                        rts
 1100                 
 1101                 *----------------------------------------------
 1102                 * toAscii: toma numero de boton del teclado
 1103                 *          y devuelve su correspondiente en
 1104                 *          ascii
 1105                 *          toma  AccB: valor del boton
 1106                 *          devuelve AccB: ascii
 1107                 *----------------------------------------------
 1108                 
 1109  25B7           to_ascii        EQU             *
 1110                 
 1111                 * back up de registros
 1112  25B7 3C                        pshx
 1113                 
 1114                 * inicializacion de variables
 1115  25B8 CE420D                    ldx             #kb_ascii       ; apunto a string con caracteres asignados por tecla
 1116  25BB 3A                        abx                             ; me muevo en string con indice y recupero segun tecla presionada
 1117  25BC E600                      ldab            0,X             
 1118                 
 1119                 * restore de registros
 1120  25BE 38                        pulx
 1121  25BF 39                        rts
 1122                 
 1123                 *--------------------------------
 1124                 *Outchar: ACCA: Carácter a enviar
 1125                 *           ACCB: Posición (0-3)
 1126                 *--------------------------------
 1127  25C0           outchar         EQU             *
 1128                         
 1129  25C0 F71005                    stab            PORTCL          ;set the position 
 1130  25C3 B71004                    staa            PORTB           ;set the character
 1131                         
 1132  25C6 39                        rts
 1133                 
 1134                 *-------------------------
 1135                 * clr_dis: Limpia display
 1136                 *-------------------------
 1137                 
 1138  25C7           clr_dis         EQU             *
 1139                 
 1140                 * hago back up de registros
 1141  25C7 37                        pshb
 1142  25C8 36                        psha
 1143                 
 1144                 * inicializo el contador de posiciones
 1145  25C9 C604                      ldab            #LENGTH
 1146                 
 1147                 * loop para limpiar cada posicion
 1148  25CB 5A        clrloop         decb
 1149  25CC 2B07                      bmi             clr_end         ; si no pase por todas las posiciones
 1150  25CE 8620                      ldaa            #ESP            ; cargo en esta posicion espacio blanco
 1151  25D0 BD25C0                    jsr             outchar         ; y lo envio
 1152  25D3 20F6                      bra             clrloop         
 1153                 
 1154                 * restore de registros
 1155  25D5 32        clr_end         pula
 1156  25D6 33                        pulb
 1157  25D7 39                        rts
 1158                 
 1159                 *-------------------------------------------------------
 1160                 * clrarray: subrutina para limpiar un array dado
 1161                 * parametros: IX direccion del array
 1162                 *             AccA cantidad de elementos del array
 1163                 *             AccB caracter a poner
 1164                 *-------------------------------------------------------
 1165                 
 1166  25D8           clrarray        EQU             *
 1167                                 
 1168  25D8 4A        cra_loop        deca                            ;contador con cantidad de elementos a limpiar
 1169  25D9 2705                      beq             cra_end
 1170  25DB E700                      stab            0,X             ;reemplazar elemento por caracter a poner
 1171  25DD 08                        inx
 1172  25DE 20F8                      bra             cra_loop
 1173                                 
 1174  25E0 E700      cra_end         stab            0,X
 1175  25E2 39                        rts
 1176                 
 1177                 *************
 1178                 * VARIABLES *
 1179                 *************
 1180                 ***STACK***
 1181  4000                           ORG             $4000
 1182  4000           stack           RMB             500
 1183  41F3           STACKP          EQU             *-1
 1184                 
 1185                 ***MAIN VARIABLES***
 1186  41F4           player          RMB             1               ;variable de jugador
 1187  41F5           letra_p         RMB             1
 1188  41F6           num_p           RMB             1
 1189                 
 1190                 ***KEYBOARD VARIABLES***
 1191  41F7           kb_buff         RMB             1
 1192  41F8           buffer          RMB             1
 1193                 
 1194  41F9 20202020  string          FCC             '    '
 1195  41FD 00                        FCB             0
 1196                 
 1197  41FE 0A0B0C00  kb_value        FCB             10,11,12,0,13,14,15,0,1,2,3,0,4,5,6
       4202 0D0E0F00
       4206 01020300
       420A 040506
 1198                 
 1199  420D 41424320  kb_ascii        FCC             'ABC DEF 123 456'
       4211 44454620
       4215 31323320
       4219 343536
 1200                 
 1201                 ***ARREGLO DE BARCOS TOCADOS***
 1202  0003           SUB             EQU             3
 1203  0003           CAR             EQU             3
 1204  0002           EL_SIZE         EQU             2
 1205  0009           CANTIDAD        EQU             SUB*1+CAR*2
 1206  0013           HITSIZE         EQU             EL_SIZE*CANTIDAD+1
 1207  421C           hitlist         RMB             HITSIZE*2
 1208                 
 1209                 ***MATRICES DE TABLERO DE CADA JUGADOR***
 1210  5000                           ORG             $5000
 1211  5000 83830383  p_board         FCB             SHI_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP,SUB_NP
       5004 0343
 1212  5006 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP
       500A 0303
 1213  500C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5010 0303
 1214  5012 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP
       5016 8383
 1215  5018 43030303                  FCB             SUB_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       501C 0303
 1216  501E 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5022 0303
 1217                 
 1218  5024 03830383                  FCB             WAT_NP,SHI_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5028 8303
 1219  502A 03830303                  FCB             WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       502E 0303
 1220  5030 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5034 8303
 1221  5036 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       503A 0303
 1222  503C 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5040 0303
 1223  5042 03430343                  FCB             WAT_NP,SUB_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP
       5046 0303
 1224                 
 1225                 ***MATRIZ DE DISPLAY***
 1226  5F00                           ORG             $5F00
 1227  5F00 03030303  display         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F04 0303
 1228  5F06 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F0A 0303
 1229  5F0C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F10 0303
 1230  5F12 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F16 0303
 1231  5F18 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F1C 0303
 1232  5F1E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F22 0303
 1233                 
 1234                                 
 1235  5F24                           END

    Errors:  None         ###########
    Bytes:   1650         # main_bn #
    CRC:     A2C8         ###########

