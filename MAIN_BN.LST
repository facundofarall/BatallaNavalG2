################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              27/Nov/17  12:18:57    #
#                                                                              #
#       Source   =   main_bn.msa                                               #
#       List     =   main_bn.lst                                               #
#       Object   =   main_bn.r07                                               #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                           p68h11
    2                 $macros.msa
    3                 **********************************
    4                 * definicion de macro utilizados *
    5                 **********************************
    6                 * invocar a la subrutina writepos
    7  0000                   MACRO   %WRITEPOS
    8                                 ldab            \0
    9                                 pshb                            ;se envía el byte a escribir
   10                                 ldab            12,x
   11                                 pshb                            ;se envía letra (fila)
   12                                 ldab            11,x
   13                                 pshb                            ;se envía num (columna)
   14                                 ldy             9,x
   15                                 pshy                            ;se envía dirección de inicio de matriz
   16                                 ldab            8,x
   17                                 pshb                            ;se envía jugador atacado
   18                                 jsr             writepos
   19                                 %CLRST          6
   20  0000                   ENDMAC
   21                 
   22                 * invocar a la subrutina writepos
   23  0000                   MACRO   %PLAY_WRT
   24                                 ldab            12,x
   25                                 pshb                            ;se envía letra (fila)
   26                                 ldab            11,x
   27                                 pshb                            ;se envía num (columna)
   28                                 ldy             14,x
   29                                 pshy                            ;se envía inicio de array
   30                                 ldab            8,x
   31                                 pshb                            ;se envía jugador atacado
   32                                 jsr             play_wrt
   33                                 %CLRST          5
   34  0000                   ENDMAC
   35                 
   36                 * realizar back up de AccA, AccB, IX e IY
   37  0000                   MACRO   %BACKUP
   38                                 psha
   39                                 pshb
   40                                 pshx
   41                                 pshy
   42  0000                   ENDMAC
   43                 
   44                 * realizar restore de AccA, AccB, IX e IY
   45  0000                   MACRO   %RESTORE
   46                                 puly
   47                                 pulx
   48                                 pulb
   49                                 pula
   50  0000                   ENDMAC
   51                 
   52                 * limpiar el stack de datos enviados
   53  0000                   MACRO   %CLRST
   54                 CONT_M          SET     \0
   55                                 IF CONT_M > 0
   56                                 ins
   57                                 %CLRST  CONT_M-1
   58                                 ENDIF
   59  0000                   ENDMAC
   60                 * activar un led en funcion de una variable
   61  0000                   MACRO   %LED_INV
   62                                 ldaa            PORTA
   63                                 eora            #SHF_LED
   64                                 staa            PORTA
   65  0000                   ENDMAC
   66                 
   67                 * declarar o reservar variables locales en subrutinas
   68  0000                   MACRO   %MALLOC
   69                                 IF \0 > 0
   70                                 tsx
   71                                 xgdx
   72                                 subd    #\0
   73                                 xgdx
   74                                 txs
   75                                 ENDIF
   76  0000                   ENDMAC
   77                 
   78                 * liberar espacio de variables en subrutinas
   79  0000                   MACRO   %RELMEM
   80                                 IF \0 > 0
   81                                 tsx
   82                                 xgdx
   83                                 addd    #\0
   84                                 xgdx
   85                                 txs
   86                                 ENDIF           
   87  0000                   ENDMAC
   88                 
   89                 *************
   90                 * CONSTANTS *
   91                 *************
   92  0000           P1              EQU             0
   93  0001           P2              EQU             1
   94  0002           PN              EQU             2               ;cantidad de jugadores
   95                 
   96  0006           MAX_C           EQU             6
   97  0001           MIN_C           EQU             1
   98  000F           MAX_F           EQU             15
   99  000A           MIN_F           EQU             10              
  100                 
  101  0003           WAT_NP          EQU             00000011b
  102  0043           SUB_NP          EQU             01000011b
  103  0083           SHI_NP          EQU             10000011b
  104  0008           WATER           EQU             00001000b       ;verde
  105  0050           SUNK_SUB        EQU             01010000b       ;bordeaux para submarinos
  106  00B0           HIT             EQU             10110000b       ;naranja
  107  0090           SUNK_SHI        EQU             10010000b       ;bordeaux para cargueros
  108                 
  109  0006           FILA            EQU             6
  110  0006           COL             EQU             6
  111  0024           ARRAY_L         EQU             FILA*COL
  112  000A           NORM            EQU             10
  113                 
  114  000A           MIN_FIL         EQU             10
  115  000F           MAX_FIL         EQU             15
  116  0001           MIN_COL         EQU             1
  117  0006           MAX_COL         EQU             6       
  118                 
  119  0000           CONT            EQU             0
  120  0002           FILA_L          EQU             2
  121  0001           COL_L           EQU             1
  122                 
  123  0003           INPUTS          EQU             3
  124                 
  125  FFFF           NONE            EQU             -1
  126  0003           MASK_FIL        EQU             3
  127  0002           MASK_COL        EQU             2
  128  0001           COL_CONT        EQU             1
  129  0000           KB_PRESS        EQU             0
  130                 
  131                 ******* Ports ***************************
  132                 
  133  1007           DDRC            EQU             $1007           ;data direction register for C
  134  1002           PIOC            EQU             $1002           ;for strobe B assertion change
  135  1005           PORTCL          EQU             $1005           ;port C latched
  136  1004           PORTB           EQU             $1004           ;port B
  137  1003           PORTC           EQU             $1003           ;rows
  138  1000           PORTA           EQU             $1000
  139                 
  140  0040           SHF_LED         EQU             $40
  141                 
  142                 ******* Cols and Row Ports **************
  143                 
  144  1003           ROWS            EQU             PORTC           ;outputs
  145  1005           COLS            EQU             PORTCL          ;inputs
  146                 
  147                 ***** Col Mask **************************
  148  0010           COL0            EQU             00010000b
  149                          
  150                 ***** Row Masks *************************
  151                 
  152  000E           FIL0            EQU             00001110b       ;mascaras para manejo de filas
  153  000D           FIL1            EQU             00001101b
  154  000B           FIL2            EQU             00001011b
  155  0007           FIL3            EQU             00000111b
  156                 
  157  0004           LENGTH          EQU             4               ; largo del display
  158                 
  159                 ****** Keyboard Mask ********************
  160  0008           Button_1        EQU             8
  161  0009           Button_2        EQU             9
  162  000A           Button_3        EQU             10
  163  000C           Button_4        EQU             12
  164  000D           Button_5        EQU             13
  165  000E           Button_6        EQU             14              
  166  0000           Button_A        EQU             0       
  167  0001           Button_B        EQU             1
  168  0002           Button_C        EQU             2
  169  0004           Button_D        EQU             4
  170  0005           Button_E        EQU             5
  171  0006           Button_F        EQU             6
  172  000B           B_fire          EQU             11
  173  0003           B_P1            EQU             3
  174  0007           B_P2            EQU             7
  175  000F           B_reset         EQU             15
  176                 
  177  0000           EOT             EQU             0
  178  0020           ESP             EQU             $20     
  179                 
  180                 *========================================================
  181                 * El siguiente es un programa de un juego de batalla
  182                 * naval para dos jugadores en el emulador Wookie FX.
  183                 *========================================================
  184                 
  185                 ****************
  186                 * MAIN PROGRAM *
  187                 ****************
  188                 
  189  2000                           ORG             $2000
  190  2000           init            EQU             *
  191  2000 8E41F3                    lds             #STACKP
  192  2003 BD25A5                    jsr             initdis         ;inicialización de display 7 seg
  193  2006 BD259D                    jsr             init_kb         ;inicialización de teclado
  194  2009 CE421C                    ldx             #hitlist
  195  200C 3C                        pshx                            ;se envía inicio de arreglo de barcos a poner en 0
  196  200D 8626                      ldaa            #(HITSIZE*2)
  197  200F 36                        psha                            ;se envía el tamaño del arreglo a limpiar
  198  2010 BD243F                    jsr             clrzone
  199  2013                           %CLRST          3
    /  0003           CONT_M          SET     3
    /  2013                           IF CONT_M > 0
    /  2013 31                        ins
    /  2014                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2014                           IF CONT_M > 0
    /  2014 31                        ins
    /  2015                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2015                           IF CONT_M > 0
    /  2015 31                        ins
    /  2016                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
  200  2016 8601                      ldaa            #P2             ;se inicia atacando al jugador 2
  201  2018 B741F4                    staa            player          ;se inicia con el jugador 1 (atacando al 2)
  202                 
  203  201B           main            EQU             *
  204  201B BD2457                    jsr             whoplays        ;se recibirá en AccA el jugador a atacar a continuación
  205  201E B741F4                    staa            player          ;se habilita la siguiente jugada
  206                 
  207  2021 CE5000                    ldx             #p_board
  208  2024 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  209  2025 B641F4                    ldaa            player
  210  2028 36                        psha                            ;se envía el jugador atacado
  211  2029 CE5F00                    ldx             #display
  212  202C 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  213  202D 8624                      ldaa            #ARRAY_L
  214  202F 36                        psha                            ;se envía el tamaño de la matriz tablero
  215  2030 BD2333                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  216  2033                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2033                           IF CONT_M > 0
    /  2033 31                        ins
    /  2034                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2034                           IF CONT_M > 0
    /  2034 31                        ins
    /  2035                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2035                           IF CONT_M > 0
    /  2035 31                        ins
    /  2036                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2036                           IF CONT_M > 0
    /  2036 31                        ins
    /  2037                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2037                           IF CONT_M > 0
    /  2037 31                        ins
    /  2038                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2038                           IF CONT_M > 0
    /  2038 31                        ins
    /  2039                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
    /  2039                           ENDIF
  217                 
  218  2039 BD246C                    jsr             input           ;se llama a la subrutina de interfaz de usuario
  219  203C B741F5                    staa            letra_p         ;se recibe en AccA la letra jugada (fila) y en AccB el número (columna)
  220  203F F741F6                    stab            num_p           ;se guarda la jugada
  221                 
  222  2042 B641F5                    ldaa            letra_p
  223  2045 36                        psha                            ;se envía la letra jugada
  224  2046 F641F6                    ldab            num_p
  225  2049 37                        pshb                            ;se envía el número jugado
  226  204A CE421C                    ldx             #hitlist
  227  204D 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  228  204E B641F4                    ldaa            player
  229  2051 36                        psha                            ;se envía el jugador a atacar
  230  2052 BD23BE                    jsr             play_src        ;se recibirá el carry en 1 si la posición corresponde a un barco ya atacado
  231  2055                           %CLRST          5               ;se limpia el stack
    /  0005           CONT_M          SET     5
    /  2055                           IF CONT_M > 0
    /  2055 31                        ins
    /  2056                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2056                           IF CONT_M > 0
    /  2056 31                        ins
    /  2057                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2057                           IF CONT_M > 0
    /  2057 31                        ins
    /  2058                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2058                           IF CONT_M > 0
    /  2058 31                        ins
    /  2059                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2059                           IF CONT_M > 0
    /  2059 31                        ins
    /  205A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
    /  205A                           ENDIF
  232  205A 25BF                      bcs             main            ;si la posición ya fue jugada, se pierde el turno y pasa al siguiente
  233                                 
  234  205C B641F5                    ldaa            letra_p
  235  205F 36                        psha                            ;se envía le letra jugada
  236  2060 F641F6                    ldab            num_p
  237  2063 37                        pshb                            ;se envía el número jugado
  238  2064 CE5000                    ldx             #p_board
  239  2067 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  240  2068 F641F4                    ldab            player
  241  206B 37                        pshb                            ;se envía el jugador a atacar
  242  206C BD235C                    jsr             fetchpos
  243  206F                           %CLRST          4               ;se limpia el stack
    /  0004           CONT_M          SET     4
    /  206F                           IF CONT_M > 0
    /  206F 31                        ins
    /  2070                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2070                           IF CONT_M > 0
    /  2070 31                        ins
    /  2071                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2071                           IF CONT_M > 0
    /  2071 31                        ins
    /  2072                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2072                           IF CONT_M > 0
    /  2072 31                        ins
    /  2073                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
    /  2073                           ENDIF
  244  2073 32                        pula                            ;se toma del stack el dato del byte jugado
  245                 
  246  2074 CE421C                    ldx             #hitlist
  247  2077 3C                        pshx                            ;se envía inicio del arreglo de barcos atacados
  248  2078 36                        psha                            ;se envía el byte a jugado
  249  2079 B641F5                    ldaa            letra_p
  250  207C 36                        psha                            ;se envía le letra jugada
  251  207D F641F6                    ldab            num_p
  252  2080 37                        pshb                            ;se envía el número jugado
  253  2081 CE5000                    ldx             #p_board
  254  2084 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  255  2085 F641F4                    ldab            player
  256  2088 37                        pshb                            ;se envía el jugador a atacar
  257  2089 BD20CB                    jsr             gameplay
  258  208C                           %CLRST          8               ;se limpia el stack
    /  0008           CONT_M          SET     8
    /  208C                           IF CONT_M > 0
    /  208C 31                        ins
    /  208D                           %CLRST  CONT_M-1
    /  0007           CONT_M          SET     CONT_M-1
    /  208D                           IF CONT_M > 0
    /  208D 31                        ins
    /  208E                           %CLRST  CONT_M-1
    /  0006           CONT_M          SET     CONT_M-1
    /  208E                           IF CONT_M > 0
    /  208E 31                        ins
    /  208F                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  208F                           IF CONT_M > 0
    /  208F 31                        ins
    /  2090                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2090                           IF CONT_M > 0
    /  2090 31                        ins
    /  2091                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2091                           IF CONT_M > 0
    /  2091 31                        ins
    /  2092                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2092                           IF CONT_M > 0
    /  2092 31                        ins
    /  2093                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2093                           IF CONT_M > 0
    /  2093 31                        ins
    /  2094                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
    /  2094                           ENDIF
  259                 
  260  2094 CE5000                    ldx             #p_board
  261  2097 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  262  2098 B641F4                    ldaa            player
  263  209B 36                        psha                            ;se envía el jugador atacado
  264  209C CE5F00                    ldx             #display
  265  209F 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  266  20A0 8624                      ldaa            #ARRAY_L
  267  20A2 36                        psha                            ;se envía el tamaño de la matriz tablero
  268  20A3 BD2333                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  269  20A6                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20A6                           IF CONT_M > 0
    /  20A6 31                        ins
    /  20A7                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20A7                           IF CONT_M > 0
    /  20A7 31                        ins
    /  20A8                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20A8                           IF CONT_M > 0
    /  20A8 31                        ins
    /  20A9                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20A9                           IF CONT_M > 0
    /  20A9 31                        ins
    /  20AA                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20AA                           IF CONT_M > 0
    /  20AA 31                        ins
    /  20AB                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20AB                           IF CONT_M > 0
    /  20AB 31                        ins
    /  20AC                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
    /  20AC                           ENDIF
  270                                 
  271  20AC CE421C                    ldx             #hitlist
  272  20AF 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  273  20B0 B641F4                    ldaa            player
  274  20B3 36                        psha                            ;se envía el jugador a atacar
  275  20B4 BD23F1                    jsr             play_cnt
  276  20B7                           %CLRST          2
    /  0002           CONT_M          SET     2
    /  20B7                           IF CONT_M > 0
    /  20B7 31                        ins
    /  20B8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20B8                           IF CONT_M > 0
    /  20B8 31                        ins
    /  20B9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20B9                           ENDIF
    /  20B9                           ENDIF
    /  20B9                           ENDIF
  277  20B9 32                        pula                            ;se recibe la cantidad de bytes contados
  278  20BA 8109                      cmpa            #9              
  279  20BC 2703                      beq             end_game        ;si se llegó al máximo de barcos, se termina el juego
  280                 
  281  20BE 7E201B                    jmp             main
  282                 
  283  20C1           end_game        EQU             *
  284  20C1 B641F4                    ldaa            player
  285  20C4 36                        psha
  286  20C5 BD25F1                    jsr             winner
  287  20C8                           %CLRST          1
    /  0001           CONT_M          SET     1
    /  20C8                           IF CONT_M > 0
    /  20C8 31                        ins
    /  20C9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20C9                           ENDIF
    /  20C9                           ENDIF
  288                 
  289  20C9           end_loop        EQU             *
  290  20C9 20FE                      bra             end_loop
  291                 
  292                 **************
  293                 * SUBRUTINES *
  294                 **************
  295                 *=======================================================================
  296                 * subrutina gameplay
  297                 * Función: Determina si la posición jugada en el juego de batalla naval
  298                 *          para Wookie FX fue "agua", "submarion" o "carguero", y toma 
  299                 *          la decisión de qué hacer al respecto.
  300                 * Recibe: - Dirección arreglo auxiliar de barcos
  301                 *         - Byte a jugar.
  302                 *         - FILA del array (En HEX, de $0A (fil.0) en adelante)
  303                 *         - COLUMNA del array (en HEX)
  304                 *         - Dirección de comienzo del arreglo (2 bytes)
  305                 *         - Número de arreglo (de 0 en adelante) (número de jugador)
  306                 *       TODO POR STACK.
  307                 * Devuelve: parámetro jugado en posición correspondiente.
  308                 * Requiere: 
  309                 *=======================================================================
  310  20CB           gameplay        EQU             *
  311  20CB                           %BACKUP
    /  20CB 36                        psha
    /  20CC 37                        pshb
    /  20CD 3C                        pshx
    /  20CE 183C                      pshy
  312                                 
  313  20D0 30                        tsx                             ;se usa el IX como frame pointer
  314  20D1 A60D                      ldaa            13,x            ;se carga en AccA el byte a analizar
  315  20D3 84C0                      anda            #11000000b      ;se enmascan los bits 0 a 5, para analizar los más significativos
  316                 
  317  20D5           gp_water        EQU             *
  318  20D5 2620                      bne             gp_sub          ;se estudia si era agua
  319  20D7                           %WRITEPOS       #WATER          ;se cambia el color en el tablero
    /  20D7 C608                      ldab            #WATER
    /  20D9 37                        pshb                            ;se envía el byte a escribir
    /  20DA E60C                      ldab            12,x
    /  20DC 37                        pshb                            ;se envía letra (fila)
    /  20DD E60B                      ldab            11,x
    /  20DF 37                        pshb                            ;se envía num (columna)
    /  20E0 1AEE09                    ldy             9,x
    /  20E3 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20E5 E608                      ldab            8,x
    /  20E7 37                        pshb                            ;se envía jugador atacado
    /  20E8 BD238D                    jsr             writepos
    /  20EB                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20EB                           IF CONT_M > 0
    /  20EB 31                        ins
    /  20EC                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20EC                           IF CONT_M > 0
    /  20EC 31                        ins
    /  20ED                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20ED                           IF CONT_M > 0
    /  20ED 31                        ins
    /  20EE                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20EE                           IF CONT_M > 0
    /  20EE 31                        ins
    /  20EF                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20EF                           IF CONT_M > 0
    /  20EF 31                        ins
    /  20F0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20F0                           IF CONT_M > 0
    /  20F0 31                        ins
    /  20F1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20F1                           ENDIF
    /  20F1                           ENDIF
    /  20F1                           ENDIF
    /  20F1                           ENDIF
    /  20F1                           ENDIF
    /  20F1                           ENDIF
    /  20F1                           ENDIF
  320  20F1                           %RESTORE
    /  20F1 1838                      puly
    /  20F3 38                        pulx
    /  20F4 33                        pulb
    /  20F5 32                        pula
  321  20F6 39                        rts
  322                 
  323  20F7           gp_sub          EQU             *
  324  20F7 8140                      cmpa            #01000000b      ;se estudia si era un submarino
  325  20F9 2636                      bne             gp_shi_r
  326  20FB                           %WRITEPOS       #SUNK_SUB       ;se cambia el color en el tablero
    /  20FB C650                      ldab            #SUNK_SUB
    /  20FD 37                        pshb                            ;se envía el byte a escribir
    /  20FE E60C                      ldab            12,x
    /  2100 37                        pshb                            ;se envía letra (fila)
    /  2101 E60B                      ldab            11,x
    /  2103 37                        pshb                            ;se envía num (columna)
    /  2104 1AEE09                    ldy             9,x
    /  2107 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2109 E608                      ldab            8,x
    /  210B 37                        pshb                            ;se envía jugador atacado
    /  210C BD238D                    jsr             writepos
    /  210F                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  210F                           IF CONT_M > 0
    /  210F 31                        ins
    /  2110                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2110                           IF CONT_M > 0
    /  2110 31                        ins
    /  2111                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2111                           IF CONT_M > 0
    /  2111 31                        ins
    /  2112                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2112                           IF CONT_M > 0
    /  2112 31                        ins
    /  2113                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2113                           IF CONT_M > 0
    /  2113 31                        ins
    /  2114                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2114                           IF CONT_M > 0
    /  2114 31                        ins
    /  2115                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2115                           ENDIF
    /  2115                           ENDIF
    /  2115                           ENDIF
    /  2115                           ENDIF
    /  2115                           ENDIF
    /  2115                           ENDIF
    /  2115                           ENDIF
  327  2115                           %PLAY_WRT                       ;se agraga la posición al array de barcos atacados
    /  2115 E60C                      ldab            12,x
    /  2117 37                        pshb                            ;se envía letra (fila)
    /  2118 E60B                      ldab            11,x
    /  211A 37                        pshb                            ;se envía num (columna)
    /  211B 1AEE0E                    ldy             14,x
    /  211E 183C                      pshy                            ;se envía inicio de array
    /  2120 E608                      ldab            8,x
    /  2122 37                        pshb                            ;se envía jugador atacado
    /  2123 BD2415                    jsr             play_wrt
    /  2126                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2126                           IF CONT_M > 0
    /  2126 31                        ins
    /  2127                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2127                           IF CONT_M > 0
    /  2127 31                        ins
    /  2128                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2128                           IF CONT_M > 0
    /  2128 31                        ins
    /  2129                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2129                           IF CONT_M > 0
    /  2129 31                        ins
    /  212A                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  212A                           IF CONT_M > 0
    /  212A 31                        ins
    /  212B                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  212B                           ENDIF
    /  212B                           ENDIF
    /  212B                           ENDIF
    /  212B                           ENDIF
    /  212B                           ENDIF
    /  212B                           ENDIF
  328  212B                           %RESTORE
    /  212B 1838                      puly
    /  212D 38                        pulx
    /  212E 33                        pulb
    /  212F 32                        pula
  329  2130 39                        rts
  330                 
  331  2131           gp_shi_r        EQU             *               ;si no era ninguno de los anteriores, es un carguero
  332  2131 E60B                      ldab            11,x
  333  2133 C106                      cmpb            #MAX_C
  334  2135 276D                      beq             gp_shi_l        ;si está en el borde derecho, se continúa
  335  2137 E60C                      ldab            12,x
  336  2139 37                        pshb                            ;se envía la letra (fila)
  337  213A E60B                      ldab            11,x
  338  213C 5C                        incb                            ;se avanza a la derecha
  339  213D 37                        pshb                            ;se envía el num (columna)
  340  213E 1AEE0E                    ldy             14,x
  341  2141 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  342  2143 E608                      ldab            8,x
  343  2145 37                        pshb                            ;se envía el jugador atacado
  344  2146 BD23BE                    jsr             play_src        ;se busca la posición de la derecha
  345  2149                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2149                           IF CONT_M > 0
    /  2149 31                        ins
    /  214A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  214A                           IF CONT_M > 0
    /  214A 31                        ins
    /  214B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  214B                           IF CONT_M > 0
    /  214B 31                        ins
    /  214C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  214C                           IF CONT_M > 0
    /  214C 31                        ins
    /  214D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  214D                           IF CONT_M > 0
    /  214D 31                        ins
    /  214E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  214E                           ENDIF
    /  214E                           ENDIF
    /  214E                           ENDIF
    /  214E                           ENDIF
    /  214E                           ENDIF
    /  214E                           ENDIF
  346  214E 2454                      bcc             gp_shi_l        ;si no había barco atacado en la derecha, se busca la izquierda
  347  2150                           %WRITEPOS       #SUNK_SHI       
    /  2150 C690                      ldab            #SUNK_SHI
    /  2152 37                        pshb                            ;se envía el byte a escribir
    /  2153 E60C                      ldab            12,x
    /  2155 37                        pshb                            ;se envía letra (fila)
    /  2156 E60B                      ldab            11,x
    /  2158 37                        pshb                            ;se envía num (columna)
    /  2159 1AEE09                    ldy             9,x
    /  215C 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  215E E608                      ldab            8,x
    /  2160 37                        pshb                            ;se envía jugador atacado
    /  2161 BD238D                    jsr             writepos
    /  2164                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2164                           IF CONT_M > 0
    /  2164 31                        ins
    /  2165                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2165                           IF CONT_M > 0
    /  2165 31                        ins
    /  2166                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2166                           IF CONT_M > 0
    /  2166 31                        ins
    /  2167                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2167                           IF CONT_M > 0
    /  2167 31                        ins
    /  2168                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2168                           IF CONT_M > 0
    /  2168 31                        ins
    /  2169                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2169                           IF CONT_M > 0
    /  2169 31                        ins
    /  216A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  216A                           ENDIF
    /  216A                           ENDIF
    /  216A                           ENDIF
    /  216A                           ENDIF
    /  216A                           ENDIF
    /  216A                           ENDIF
    /  216A                           ENDIF
  348  216A 6C0B                      inc             11,x
  349  216C                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  216C C690                      ldab            #SUNK_SHI
    /  216E 37                        pshb                            ;se envía el byte a escribir
    /  216F E60C                      ldab            12,x
    /  2171 37                        pshb                            ;se envía letra (fila)
    /  2172 E60B                      ldab            11,x
    /  2174 37                        pshb                            ;se envía num (columna)
    /  2175 1AEE09                    ldy             9,x
    /  2178 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  217A E608                      ldab            8,x
    /  217C 37                        pshb                            ;se envía jugador atacado
    /  217D BD238D                    jsr             writepos
    /  2180                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2180                           IF CONT_M > 0
    /  2180 31                        ins
    /  2181                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2181                           IF CONT_M > 0
    /  2181 31                        ins
    /  2182                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2182                           IF CONT_M > 0
    /  2182 31                        ins
    /  2183                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2183                           IF CONT_M > 0
    /  2183 31                        ins
    /  2184                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2184                           IF CONT_M > 0
    /  2184 31                        ins
    /  2185                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2185                           IF CONT_M > 0
    /  2185 31                        ins
    /  2186                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2186                           ENDIF
    /  2186                           ENDIF
    /  2186                           ENDIF
    /  2186                           ENDIF
    /  2186                           ENDIF
    /  2186                           ENDIF
    /  2186                           ENDIF
  350  2186 6A0B                      dec             11,x            ;se recupera el dato
  351  2188                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2188 E60C                      ldab            12,x
    /  218A 37                        pshb                            ;se envía letra (fila)
    /  218B E60B                      ldab            11,x
    /  218D 37                        pshb                            ;se envía num (columna)
    /  218E 1AEE0E                    ldy             14,x
    /  2191 183C                      pshy                            ;se envía inicio de array
    /  2193 E608                      ldab            8,x
    /  2195 37                        pshb                            ;se envía jugador atacado
    /  2196 BD2415                    jsr             play_wrt
    /  2199                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2199                           IF CONT_M > 0
    /  2199 31                        ins
    /  219A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  219A                           IF CONT_M > 0
    /  219A 31                        ins
    /  219B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  219B                           IF CONT_M > 0
    /  219B 31                        ins
    /  219C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  219C                           IF CONT_M > 0
    /  219C 31                        ins
    /  219D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  219D                           IF CONT_M > 0
    /  219D 31                        ins
    /  219E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  219E                           ENDIF
    /  219E                           ENDIF
    /  219E                           ENDIF
    /  219E                           ENDIF
    /  219E                           ENDIF
    /  219E                           ENDIF
  352  219E                           %RESTORE
    /  219E 1838                      puly
    /  21A0 38                        pulx
    /  21A1 33                        pulb
    /  21A2 32                        pula
  353  21A3 39                        rts
  354                 
  355  21A4           gp_shi_l        EQU             *
  356  21A4 E60B                      ldab            11,x
  357  21A6 C101                      cmpb            #MIN_C
  358  21A8 276D                      beq             gp_shi_u        ;si está en el borde izquierdo, se continúa
  359  21AA E60C                      ldab            12,x
  360  21AC 37                        pshb                            ;se envía la letra (fila)
  361  21AD E60B                      ldab            11,x
  362  21AF 5A                        decb                            ;se retrocede a la izquierda
  363  21B0 37                        pshb                            ;se envía el número (columna)
  364  21B1 1AEE0E                    ldy             14,x
  365  21B4 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  366  21B6 E608                      ldab            8,x
  367  21B8 37                        pshb                            ;se envía el jugador atacado
  368  21B9 BD23BE                    jsr             play_src        ;se busca la posición de la izquierda
  369  21BC                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21BC                           IF CONT_M > 0
    /  21BC 31                        ins
    /  21BD                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21BD                           IF CONT_M > 0
    /  21BD 31                        ins
    /  21BE                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21BE                           IF CONT_M > 0
    /  21BE 31                        ins
    /  21BF                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21BF                           IF CONT_M > 0
    /  21BF 31                        ins
    /  21C0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21C0                           IF CONT_M > 0
    /  21C0 31                        ins
    /  21C1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21C1                           ENDIF
    /  21C1                           ENDIF
    /  21C1                           ENDIF
    /  21C1                           ENDIF
    /  21C1                           ENDIF
    /  21C1                           ENDIF
  370  21C1 2454                      bcc             gp_shi_u        ;si no había barco atacado a la izquierda, se busca arriba
  371  21C3                           %WRITEPOS       #SUNK_SHI       
    /  21C3 C690                      ldab            #SUNK_SHI
    /  21C5 37                        pshb                            ;se envía el byte a escribir
    /  21C6 E60C                      ldab            12,x
    /  21C8 37                        pshb                            ;se envía letra (fila)
    /  21C9 E60B                      ldab            11,x
    /  21CB 37                        pshb                            ;se envía num (columna)
    /  21CC 1AEE09                    ldy             9,x
    /  21CF 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21D1 E608                      ldab            8,x
    /  21D3 37                        pshb                            ;se envía jugador atacado
    /  21D4 BD238D                    jsr             writepos
    /  21D7                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21D7                           IF CONT_M > 0
    /  21D7 31                        ins
    /  21D8                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21D8                           IF CONT_M > 0
    /  21D8 31                        ins
    /  21D9                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21D9                           IF CONT_M > 0
    /  21D9 31                        ins
    /  21DA                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21DA                           IF CONT_M > 0
    /  21DA 31                        ins
    /  21DB                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21DB                           IF CONT_M > 0
    /  21DB 31                        ins
    /  21DC                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21DC                           IF CONT_M > 0
    /  21DC 31                        ins
    /  21DD                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21DD                           ENDIF
    /  21DD                           ENDIF
    /  21DD                           ENDIF
    /  21DD                           ENDIF
    /  21DD                           ENDIF
    /  21DD                           ENDIF
    /  21DD                           ENDIF
  372  21DD 6A0B                      dec             11,x
  373  21DF                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  21DF C690                      ldab            #SUNK_SHI
    /  21E1 37                        pshb                            ;se envía el byte a escribir
    /  21E2 E60C                      ldab            12,x
    /  21E4 37                        pshb                            ;se envía letra (fila)
    /  21E5 E60B                      ldab            11,x
    /  21E7 37                        pshb                            ;se envía num (columna)
    /  21E8 1AEE09                    ldy             9,x
    /  21EB 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21ED E608                      ldab            8,x
    /  21EF 37                        pshb                            ;se envía jugador atacado
    /  21F0 BD238D                    jsr             writepos
    /  21F3                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21F3                           IF CONT_M > 0
    /  21F3 31                        ins
    /  21F4                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21F4                           IF CONT_M > 0
    /  21F4 31                        ins
    /  21F5                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21F5                           IF CONT_M > 0
    /  21F5 31                        ins
    /  21F6                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21F6                           IF CONT_M > 0
    /  21F6 31                        ins
    /  21F7                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21F7                           IF CONT_M > 0
    /  21F7 31                        ins
    /  21F8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21F8                           IF CONT_M > 0
    /  21F8 31                        ins
    /  21F9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21F9                           ENDIF
    /  21F9                           ENDIF
    /  21F9                           ENDIF
    /  21F9                           ENDIF
    /  21F9                           ENDIF
    /  21F9                           ENDIF
    /  21F9                           ENDIF
  374  21F9 6C0B                      inc             11,x            ;se recupera el dato
  375  21FB                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  21FB E60C                      ldab            12,x
    /  21FD 37                        pshb                            ;se envía letra (fila)
    /  21FE E60B                      ldab            11,x
    /  2200 37                        pshb                            ;se envía num (columna)
    /  2201 1AEE0E                    ldy             14,x
    /  2204 183C                      pshy                            ;se envía inicio de array
    /  2206 E608                      ldab            8,x
    /  2208 37                        pshb                            ;se envía jugador atacado
    /  2209 BD2415                    jsr             play_wrt
    /  220C                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  220C                           IF CONT_M > 0
    /  220C 31                        ins
    /  220D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  220D                           IF CONT_M > 0
    /  220D 31                        ins
    /  220E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  220E                           IF CONT_M > 0
    /  220E 31                        ins
    /  220F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  220F                           IF CONT_M > 0
    /  220F 31                        ins
    /  2210                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2210                           IF CONT_M > 0
    /  2210 31                        ins
    /  2211                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2211                           ENDIF
    /  2211                           ENDIF
    /  2211                           ENDIF
    /  2211                           ENDIF
    /  2211                           ENDIF
    /  2211                           ENDIF
  376  2211                           %RESTORE
    /  2211 1838                      puly
    /  2213 38                        pulx
    /  2214 33                        pulb
    /  2215 32                        pula
  377  2216 39                        rts
  378                 
  379  2217           gp_shi_u        EQU             *
  380  2217 E60C                      ldab            12,x
  381  2219 C10A                      cmpb            #MIN_F
  382  221B 276D                      beq             gp_shi_d        ;si está en el borde superior, se continúa
  383  221D E60C                      ldab            12,x
  384  221F 5A                        decb                            ;se va a la posición de arriba
  385  2220 37                        pshb                            ;se envía la letra (fila)
  386  2221 E60B                      ldab            11,x
  387  2223 37                        pshb                            ;se envía el num (columna)
  388  2224 1AEE0E                    ldy             14,x
  389  2227 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  390  2229 E608                      ldab            8,x
  391  222B 37                        pshb                            ;se envía el jugador atacado
  392  222C BD23BE                    jsr             play_src        ;se busca la posición de arriba
  393  222F                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  222F                           IF CONT_M > 0
    /  222F 31                        ins
    /  2230                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2230                           IF CONT_M > 0
    /  2230 31                        ins
    /  2231                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2231                           IF CONT_M > 0
    /  2231 31                        ins
    /  2232                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2232                           IF CONT_M > 0
    /  2232 31                        ins
    /  2233                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2233                           IF CONT_M > 0
    /  2233 31                        ins
    /  2234                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2234                           ENDIF
    /  2234                           ENDIF
    /  2234                           ENDIF
    /  2234                           ENDIF
    /  2234                           ENDIF
    /  2234                           ENDIF
  394  2234 2454                      bcc             gp_shi_d        ;si no había barco atacado arriba, se busca abajo
  395  2236                           %WRITEPOS       #SUNK_SHI       
    /  2236 C690                      ldab            #SUNK_SHI
    /  2238 37                        pshb                            ;se envía el byte a escribir
    /  2239 E60C                      ldab            12,x
    /  223B 37                        pshb                            ;se envía letra (fila)
    /  223C E60B                      ldab            11,x
    /  223E 37                        pshb                            ;se envía num (columna)
    /  223F 1AEE09                    ldy             9,x
    /  2242 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2244 E608                      ldab            8,x
    /  2246 37                        pshb                            ;se envía jugador atacado
    /  2247 BD238D                    jsr             writepos
    /  224A                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  224A                           IF CONT_M > 0
    /  224A 31                        ins
    /  224B                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  224B                           IF CONT_M > 0
    /  224B 31                        ins
    /  224C                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  224C                           IF CONT_M > 0
    /  224C 31                        ins
    /  224D                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  224D                           IF CONT_M > 0
    /  224D 31                        ins
    /  224E                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  224E                           IF CONT_M > 0
    /  224E 31                        ins
    /  224F                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  224F                           IF CONT_M > 0
    /  224F 31                        ins
    /  2250                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2250                           ENDIF
    /  2250                           ENDIF
    /  2250                           ENDIF
    /  2250                           ENDIF
    /  2250                           ENDIF
    /  2250                           ENDIF
    /  2250                           ENDIF
  396  2250 6A0C                      dec             12,x
  397  2252                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2252 C690                      ldab            #SUNK_SHI
    /  2254 37                        pshb                            ;se envía el byte a escribir
    /  2255 E60C                      ldab            12,x
    /  2257 37                        pshb                            ;se envía letra (fila)
    /  2258 E60B                      ldab            11,x
    /  225A 37                        pshb                            ;se envía num (columna)
    /  225B 1AEE09                    ldy             9,x
    /  225E 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2260 E608                      ldab            8,x
    /  2262 37                        pshb                            ;se envía jugador atacado
    /  2263 BD238D                    jsr             writepos
    /  2266                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2266                           IF CONT_M > 0
    /  2266 31                        ins
    /  2267                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2267                           IF CONT_M > 0
    /  2267 31                        ins
    /  2268                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2268                           IF CONT_M > 0
    /  2268 31                        ins
    /  2269                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2269                           IF CONT_M > 0
    /  2269 31                        ins
    /  226A                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  226A                           IF CONT_M > 0
    /  226A 31                        ins
    /  226B                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  226B                           IF CONT_M > 0
    /  226B 31                        ins
    /  226C                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  226C                           ENDIF
    /  226C                           ENDIF
    /  226C                           ENDIF
    /  226C                           ENDIF
    /  226C                           ENDIF
    /  226C                           ENDIF
    /  226C                           ENDIF
  398  226C 6C0C                      inc             12,x            ;se recupera el dato
  399  226E                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  226E E60C                      ldab            12,x
    /  2270 37                        pshb                            ;se envía letra (fila)
    /  2271 E60B                      ldab            11,x
    /  2273 37                        pshb                            ;se envía num (columna)
    /  2274 1AEE0E                    ldy             14,x
    /  2277 183C                      pshy                            ;se envía inicio de array
    /  2279 E608                      ldab            8,x
    /  227B 37                        pshb                            ;se envía jugador atacado
    /  227C BD2415                    jsr             play_wrt
    /  227F                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  227F                           IF CONT_M > 0
    /  227F 31                        ins
    /  2280                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2280                           IF CONT_M > 0
    /  2280 31                        ins
    /  2281                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2281                           IF CONT_M > 0
    /  2281 31                        ins
    /  2282                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2282                           IF CONT_M > 0
    /  2282 31                        ins
    /  2283                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2283                           IF CONT_M > 0
    /  2283 31                        ins
    /  2284                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2284                           ENDIF
    /  2284                           ENDIF
    /  2284                           ENDIF
    /  2284                           ENDIF
    /  2284                           ENDIF
    /  2284                           ENDIF
  400  2284                           %RESTORE
    /  2284 1838                      puly
    /  2286 38                        pulx
    /  2287 33                        pulb
    /  2288 32                        pula
  401  2289 39                        rts
  402                 
  403  228A           gp_shi_d        EQU             *
  404  228A E60C                      ldab            12,x
  405  228C C10F                      cmpb            #MAX_F
  406  228E 276D                      beq             gp_shi_h        ;si está en el borde inferior, se continúa
  407  2290 E60C                      ldab            12,x
  408  2292 5C                        incb                            ;se va a la posición de abajo
  409  2293 37                        pshb                            ;se envía la letra (fila)
  410  2294 E60B                      ldab            11,x
  411  2296 37                        pshb                            ;se envía el num (columna)
  412  2297 1AEE0E                    ldy             14,x
  413  229A 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  414  229C E608                      ldab            8,x
  415  229E 37                        pshb                            ;se envía el jugador atacado
  416  229F BD23BE                    jsr             play_src        ;se busca la posición de abajo
  417  22A2                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22A2                           IF CONT_M > 0
    /  22A2 31                        ins
    /  22A3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22A3                           IF CONT_M > 0
    /  22A3 31                        ins
    /  22A4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22A4                           IF CONT_M > 0
    /  22A4 31                        ins
    /  22A5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22A5                           IF CONT_M > 0
    /  22A5 31                        ins
    /  22A6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22A6                           IF CONT_M > 0
    /  22A6 31                        ins
    /  22A7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22A7                           ENDIF
    /  22A7                           ENDIF
    /  22A7                           ENDIF
    /  22A7                           ENDIF
    /  22A7                           ENDIF
    /  22A7                           ENDIF
  418  22A7 2454                      bcc             gp_shi_h        ;si no había barco atacado abajo, el carguero está tocado
  419  22A9                           %WRITEPOS       #SUNK_SHI       
    /  22A9 C690                      ldab            #SUNK_SHI
    /  22AB 37                        pshb                            ;se envía el byte a escribir
    /  22AC E60C                      ldab            12,x
    /  22AE 37                        pshb                            ;se envía letra (fila)
    /  22AF E60B                      ldab            11,x
    /  22B1 37                        pshb                            ;se envía num (columna)
    /  22B2 1AEE09                    ldy             9,x
    /  22B5 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22B7 E608                      ldab            8,x
    /  22B9 37                        pshb                            ;se envía jugador atacado
    /  22BA BD238D                    jsr             writepos
    /  22BD                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22BD                           IF CONT_M > 0
    /  22BD 31                        ins
    /  22BE                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22BE                           IF CONT_M > 0
    /  22BE 31                        ins
    /  22BF                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22BF                           IF CONT_M > 0
    /  22BF 31                        ins
    /  22C0                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22C0                           IF CONT_M > 0
    /  22C0 31                        ins
    /  22C1                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22C1                           IF CONT_M > 0
    /  22C1 31                        ins
    /  22C2                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22C2                           IF CONT_M > 0
    /  22C2 31                        ins
    /  22C3                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22C3                           ENDIF
    /  22C3                           ENDIF
    /  22C3                           ENDIF
    /  22C3                           ENDIF
    /  22C3                           ENDIF
    /  22C3                           ENDIF
    /  22C3                           ENDIF
  420  22C3 6C0C                      inc             12,x
  421  22C5                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  22C5 C690                      ldab            #SUNK_SHI
    /  22C7 37                        pshb                            ;se envía el byte a escribir
    /  22C8 E60C                      ldab            12,x
    /  22CA 37                        pshb                            ;se envía letra (fila)
    /  22CB E60B                      ldab            11,x
    /  22CD 37                        pshb                            ;se envía num (columna)
    /  22CE 1AEE09                    ldy             9,x
    /  22D1 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22D3 E608                      ldab            8,x
    /  22D5 37                        pshb                            ;se envía jugador atacado
    /  22D6 BD238D                    jsr             writepos
    /  22D9                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22D9                           IF CONT_M > 0
    /  22D9 31                        ins
    /  22DA                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22DA                           IF CONT_M > 0
    /  22DA 31                        ins
    /  22DB                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22DB                           IF CONT_M > 0
    /  22DB 31                        ins
    /  22DC                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22DC                           IF CONT_M > 0
    /  22DC 31                        ins
    /  22DD                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22DD                           IF CONT_M > 0
    /  22DD 31                        ins
    /  22DE                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22DE                           IF CONT_M > 0
    /  22DE 31                        ins
    /  22DF                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22DF                           ENDIF
    /  22DF                           ENDIF
    /  22DF                           ENDIF
    /  22DF                           ENDIF
    /  22DF                           ENDIF
    /  22DF                           ENDIF
    /  22DF                           ENDIF
  422  22DF 6A0C                      dec             12,x            ;se recupera el dato
  423  22E1                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22E1 E60C                      ldab            12,x
    /  22E3 37                        pshb                            ;se envía letra (fila)
    /  22E4 E60B                      ldab            11,x
    /  22E6 37                        pshb                            ;se envía num (columna)
    /  22E7 1AEE0E                    ldy             14,x
    /  22EA 183C                      pshy                            ;se envía inicio de array
    /  22EC E608                      ldab            8,x
    /  22EE 37                        pshb                            ;se envía jugador atacado
    /  22EF BD2415                    jsr             play_wrt
    /  22F2                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22F2                           IF CONT_M > 0
    /  22F2 31                        ins
    /  22F3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22F3                           IF CONT_M > 0
    /  22F3 31                        ins
    /  22F4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22F4                           IF CONT_M > 0
    /  22F4 31                        ins
    /  22F5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22F5                           IF CONT_M > 0
    /  22F5 31                        ins
    /  22F6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22F6                           IF CONT_M > 0
    /  22F6 31                        ins
    /  22F7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22F7                           ENDIF
    /  22F7                           ENDIF
    /  22F7                           ENDIF
    /  22F7                           ENDIF
    /  22F7                           ENDIF
    /  22F7                           ENDIF
  424  22F7                           %RESTORE
    /  22F7 1838                      puly
    /  22F9 38                        pulx
    /  22FA 33                        pulb
    /  22FB 32                        pula
  425  22FC 39                        rts
  426                 
  427  22FD           gp_shi_h        EQU             *
  428  22FD                           %WRITEPOS       #HIT            ;se marca al carguero como tocado
    /  22FD C6B0                      ldab            #HIT
    /  22FF 37                        pshb                            ;se envía el byte a escribir
    /  2300 E60C                      ldab            12,x
    /  2302 37                        pshb                            ;se envía letra (fila)
    /  2303 E60B                      ldab            11,x
    /  2305 37                        pshb                            ;se envía num (columna)
    /  2306 1AEE09                    ldy             9,x
    /  2309 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  230B E608                      ldab            8,x
    /  230D 37                        pshb                            ;se envía jugador atacado
    /  230E BD238D                    jsr             writepos
    /  2311                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2311                           IF CONT_M > 0
    /  2311 31                        ins
    /  2312                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2312                           IF CONT_M > 0
    /  2312 31                        ins
    /  2313                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2313                           IF CONT_M > 0
    /  2313 31                        ins
    /  2314                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2314                           IF CONT_M > 0
    /  2314 31                        ins
    /  2315                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2315                           IF CONT_M > 0
    /  2315 31                        ins
    /  2316                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2316                           IF CONT_M > 0
    /  2316 31                        ins
    /  2317                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2317                           ENDIF
    /  2317                           ENDIF
    /  2317                           ENDIF
    /  2317                           ENDIF
    /  2317                           ENDIF
    /  2317                           ENDIF
    /  2317                           ENDIF
  429  2317                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2317 E60C                      ldab            12,x
    /  2319 37                        pshb                            ;se envía letra (fila)
    /  231A E60B                      ldab            11,x
    /  231C 37                        pshb                            ;se envía num (columna)
    /  231D 1AEE0E                    ldy             14,x
    /  2320 183C                      pshy                            ;se envía inicio de array
    /  2322 E608                      ldab            8,x
    /  2324 37                        pshb                            ;se envía jugador atacado
    /  2325 BD2415                    jsr             play_wrt
    /  2328                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2328                           IF CONT_M > 0
    /  2328 31                        ins
    /  2329                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2329                           IF CONT_M > 0
    /  2329 31                        ins
    /  232A                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  232A                           IF CONT_M > 0
    /  232A 31                        ins
    /  232B                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  232B                           IF CONT_M > 0
    /  232B 31                        ins
    /  232C                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  232C                           IF CONT_M > 0
    /  232C 31                        ins
    /  232D                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  232D                           ENDIF
    /  232D                           ENDIF
    /  232D                           ENDIF
    /  232D                           ENDIF
    /  232D                           ENDIF
    /  232D                           ENDIF
  430  232D                           %RESTORE
    /  232D 1838                      puly
    /  232F 38                        pulx
    /  2330 33                        pulb
    /  2331 32                        pula
  431  2332 39                        rts
  432                 
  433                 *====================================================================================
  434                 * Subrutina "MIRROR"
  435                 *
  436                 * Descripción:  Esta subrutina copia el contenido de las posiciones de un array fuente
  437                 *               a un espacio de memoria destino.
  438                 * Parámetros de entrada:
  439                 *               - Dirección de comienzo de array FUENTE
  440                 *               - Número de arreglo contenido en otro arreglo (número de jugador)(0 en adelante)
  441                 *               - Dirección de DESTINO de la copia 
  442                 *               - Número de posiciones a copiar (un byte, hasta 255 posiciones.)
  443                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  444                 *
  445                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  446                 *       Se destruirá el dato de la dirección del array de origen.
  447                 *               
  448                 * Parámetros de salida: NINGUNO
  449                 *       
  450                 *
  451                 * Consideraciones:
  452                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  453                 *
  454                 *====================================================================================
  455                 
  456  2333           mirror          EQU             *       
  457                         
  458  2333                           %BACKUP
    /  2333 36                        psha
    /  2334 37                        pshb
    /  2335 3C                        pshx
    /  2336 183C                      pshy
  459  2338 30                        tsx                             ;creo frame pointer
  460  2339 A60B                      ldaa            11,x            ;cargo número de jugador
  461  233B E608                      ldab            8,x             ;cargo longitud de la copia (del array a copiar)
  462  233D 3D                        mul                             ;obtengo offset de jugador
  463  233E E30C                      addd            12,x            ;sumo offset de jugador
  464  2340 ED0C                      std             12,x            ;guardo la dirección con offset del array fuente
  465                 
  466  2342 A60C                      ldaa            12,x            ;cargo longitud de copia en contador
  467  2344 2710                      beq             mi_end          ;si es cero, vuelvo desde subrutina
  468  2346 1AEE09                    ldy             9,x             ;cargo índice a destino de la copia.
  469  2349 EE0C                      ldx             12,x            ;cargo índice a array origen de copia.
  470                 
  471  234B           mi_loop         EQU             *
  472                 
  473  234B E600                      ldab            0,x             ;cargo byte a copiar
  474  234D 18E700                    stab            0,y             ;copio byte en destino
  475  2350 08                        inx                             ;siguiente byte
  476  2351 1808                      iny                             ;siguiente byte
  477  2353 4A                        deca                            ;decremento contador
  478  2354 26F5                      bne             mi_loop
  479                 
  480  2356           mi_end          EQU             *
  481                 
  482  2356                           %RESTORE
    /  2356 1838                      puly
    /  2358 38                        pulx
    /  2359 33                        pulb
    /  235A 32                        pula
  483                         
  484  235B 39                        rts     
  485                                 
  486                                                 
  487                 *====================================================================================
  488                 * Subrutina "FETCHPOS"
  489                 *
  490                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  491                 *               determinada posición, y devuelve el byte que se encuentra
  492                 *               en esa posición por stack. Subrutina limitada a longitud
  493                 *               de elementos del array de un byte.
  494                 *
  495                 * Parámetros de entrada:
  496                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  497                 *               - COLUMNA del array (en HEX)
  498                 *               - Dirección de comienzo del arreglo (2 bytes)
  499                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  500                 *
  501                 *       Todos los parámetros se reciben por stack en el orden indicado.
  502                 *       Se destruirá el dato del índice al arreglo.
  503                 *               
  504                 * Parámetros de salida:
  505                 *               - Byte encontrado en esa posición (se devuelve por stack)
  506                 *
  507                 *
  508                 * Consideraciones:
  509                 *               - Antes de recuperar el byte en stack se debe normalizar el mismo
  510                 *                 en 4 posiciones (4 bytes)
  511                 *               - Requiere definición de constante "ARRAY_L"
  512                 *
  513                 *====================================================================================
  514                 
  515  235C           fetchpos        EQU             *
  516                 
  517  235C                           %BACKUP
    /  235C 36                        psha
    /  235D 37                        pshb
    /  235E 3C                        pshx
    /  235F 183C                      pshy
  518  2361 30                        tsx                             ;creo frame pointer
  519  2362 A608                      ldaa            8,x             ;cargo numero de jugador
  520  2364 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  521  2366 3D                        mul                             ;obtengo offset de jugador
  522  2367 E309                      addd            9,x             ;sumo offset de jugador a top of array
  523  2369 ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  524                 
  525  236B A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  526  236D C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  527  236F 10                        sba                             ;obtengo numero de fila
  528  2370 C606                      ldab            #COL            ;cargo longitud de fila
  529  2372 3D                        mul                             ;obtengo offset de fila
  530  2373 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  531  2375 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  532                 
  533  2377 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  534  2379 5A                        decb                            ;normalizo offset de columna
  535  237A 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  536  237B E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  537  237D ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  538                 
  539  237F 1AEE09                    ldy             9,x             ;cargo en IY la dirección del byte que se desea obtener
  540  2382 18A600                    ldaa            0,y             ;cargo el byte a devolver en AccA
  541  2385 A70C                      staa            12,x            ;guardo el byte a devolver en stack
  542  2387                           %RESTORE
    /  2387 1838                      puly
    /  2389 38                        pulx
    /  238A 33                        pulb
    /  238B 32                        pula
  543                                 
  544  238C 39                        rts
  545                                 
  546                                 
  547                 
  548                 *====================================================================================
  549                 * Subrutina "WRITEPOS"
  550                 *
  551                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  552                 *               determinada posición, y escribe en la misma un byte de
  553                 *               datos que será recibido como parámetro de entrada por stack.
  554                 *
  555                 * Parámetros de entrada:
  556                 *               - BYTE a escribir en la posición indicada
  557                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  558                 *               - COLUMNA del array (en HEX)
  559                 *               - Dirección de comienzo del arreglo (2 bytes)
  560                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  561                 *
  562                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  563                 *       Se destruirá el dato del índice al arreglo.
  564                 *               
  565                 * Parámetros de salida: NINGUNO
  566                 *       
  567                 *
  568                 * Consideraciones:
  569                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  570                 *               - Requiere definición de constante "ARRAY_L"
  571                 *
  572                 *====================================================================================
  573                 
  574  238D           writepos        EQU             *
  575                 
  576  238D                           %BACKUP
    /  238D 36                        psha
    /  238E 37                        pshb
    /  238F 3C                        pshx
    /  2390 183C                      pshy
  577  2392 30                        tsx                             ;creo frame pointer
  578  2393 A608                      ldaa            8,x             ;cargo numero de jugador
  579  2395 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  580  2397 3D                        mul                             ;obtengo offset de jugador
  581  2398 E309                      addd            9,x             ;sumo offset de jugador a top of array
  582  239A ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  583                 
  584  239C A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  585  239E C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  586  23A0 10                        sba                             ;obtengo numero de fila
  587  23A1 C606                      ldab            #COL            ;cargo longitud de fila
  588  23A3 3D                        mul                             ;obtengo offset de fila
  589  23A4 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  590  23A6 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  591                 
  592  23A8 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  593  23AA 5A                        decb                            ;normalizo offset de columna
  594  23AB 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  595  23AC E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  596  23AE ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  597                 
  598  23B0 1AEE09                    ldy             9,x             ;cargo en IY la dirección donde se desea escribir
  599  23B3 A60D                      ldaa            13,x            ;cargo en AccA el byte que se quiere escribir en el arreglo
  600  23B5 18A700                    staa            0,y             ;escribo el byte sobre el arreglo
  601  23B8                           %RESTORE
    /  23B8 1838                      puly
    /  23BA 38                        pulx
    /  23BB 33                        pulb
    /  23BC 32                        pula
  602                                 
  603  23BD 39                        rts
  604                 *====================================================================================
  605                 * Subrutina "PLAY_SRC"
  606                 *
  607                 * Descripción:  Esta subrutina busca dos bytes consecutivos (posicion jugada) dentro de un arreglo.
  608                 *               El valor $00 podrá estar en el array solo como terminador
  609                 * Parámetros de entrada:
  610                 *               - Byte1 a buscar (en este caso, n° fila)
  611                 *               - Byte2 a buscar (en este caso, n° columna)
  612                 *               - Dirección de inicio del array
  613                 *               - Número de jugador (0 o mayor)
  614                 *
  615                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  616                 *               
  617                 * Parámetros de salida:
  618                 *               - Carry en 1, si se encontró la posición.
  619                 *       
  620                 *
  621                 * Consideraciones:
  622                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones antes de
  623                 *                 recuperar el parámetro de salida.
  624                 *
  625                 *====================================================================================
  626                 
  627  23BE           play_src        EQU             *               
  628                                         
  629  23BE                           %BACKUP
    /  23BE 36                        psha
    /  23BF 37                        pshb
    /  23C0 3C                        pshx
    /  23C1 183C                      pshy
  630  23C3 30                        tsx                             ;creo frame pointer
  631  23C4 A608                      ldaa            8,x             ;cargo número de array (jugador)
  632  23C6 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  633  23C8 3D                        mul                             ;obtengo offset de jugador
  634  23C9 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  635  23CB 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  636                 
  637  23CD           ps_loop         EQU             *
  638                 
  639  23CD 18A600                    ldaa            0,y             ;cargo byte1 a comparar
  640  23D0 2718                      beq             ps_ntfnd        ;si encontré el terminador, el valor requerido no está en el array
  641                 
  642  23D2 A10C                      cmpa            12,x            ;comparo con el byte1 a buscar
  643  23D4 2706                      beq             ps_next         ;si coinciden, busco el byte 2
  644  23D6 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  645  23D8 1808                      iny
  646  23DA 20F1                      bra             ps_loop         ;vuelvo a comparar
  647                 
  648  23DC           ps_next         EQU             *
  649                 
  650  23DC 18E601                    ldab            1,y             ;cargo byte a continuación del anterior
  651  23DF 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  652  23E1 1808                      iny
  653  23E3 E10B                      cmpb            11,x            ;comparo con byte2
  654  23E5 26E6                      bne             ps_loop         ;si no son iguales, sigo buscando
  655  23E7 0D                        sec                             ;set del carry para informar que se encontró el valor
  656  23E8 2001                      bra             ps_end
  657                                         
  658  23EA           ps_ntfnd        EQU             *
  659                 
  660  23EA 0C                        clc                             ;carry en 0 para informar que no se encontró el valor
  661                 
  662  23EB           ps_end          EQU             *
  663                                 
  664  23EB                           %RESTORE
    /  23EB 1838                      puly
    /  23ED 38                        pulx
    /  23EE 33                        pulb
    /  23EF 32                        pula
  665                 
  666  23F0 39                        rts
  667                 
  668                 
  669                 
  670                                         
  671                 
  672                                         
  673                 
  674                 *====================================================================================
  675                 * Subrutina "PLAY_CNT"
  676                 *
  677                 * Descripción:  Esta subrutina cuenta la cantidad de datos de dos bytes que se encuentran en una
  678                 *               determinada zona de memoria configurada como array. Se supone que $00 no es un dato presente en dicho array, 
  679                 *               usándose solamente como terminador del mismo.
  680                 *
  681                 * Parámetros de entrada:
  682                 *               - Dirección de inicio del array
  683                 *               - Número de jugador (0 o mayor)
  684                 *
  685                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  686                 *               
  687                 * Parámetros de salida:
  688                 *               - Cantidad de datos de dos bytes encontrados, por stack (máximo 255 datos).
  689                 *       
  690                 *
  691                 * Consideraciones:
  692                 *               - Luego de invocada, se debe normalizar el stack en 2 posiciones antes de
  693                 *                 recuperar el parámetro de salida.
  694                 *
  695                 *====================================================================================
  696                 
  697  23F1           play_cnt        EQU             *
  698                 
  699  23F1                           %BACKUP
    /  23F1 36                        psha
    /  23F2 37                        pshb
    /  23F3 3C                        pshx
    /  23F4 183C                      pshy
  700  23F6 30                        tsx                             ;creo frame pointer
  701  23F7 A608                      ldaa            8,x             ;cargo número de array (jugador)
  702  23F9 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  703  23FB 3D                        mul                             ;obtengo offset de jugador
  704  23FC E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  705  23FE 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  706  2400 4F                        clra                            ;inicializo contador
  707                                         
  708  2401           pc_loop         EQU             *               
  709                                         
  710  2401 18E600                    ldab            0,y             ;cargo byte a comparar
  711  2404 2707                      beq             pc_end          ;si es terminador, terminé de buscar
  712  2406 1808                      iny                             ;si no es terminador, me posiciono sobre siguiente dato de 
  713  2408 1808                      iny                             ;2 bytes
  714  240A 4C                        inca                            ;incremento contador
  715  240B 20F4                      bra             pc_loop         ;vuelvo a comparar
  716                                         
  717  240D           pc_end          EQU             *       
  718                                         
  719  240D A70A                      staa            10,x            ;devuelvo valor por stack
  720  240F                           %RESTORE
    /  240F 1838                      puly
    /  2411 38                        pulx
    /  2412 33                        pulb
    /  2413 32                        pula
  721                                 
  722  2414 39                        rts
  723                 
  724                 
  725                 *====================================================================================
  726                 * Subrutina "PLAY_WRT"
  727                 *
  728                 * Descripción:  Esta subrutina escribe dos bytes distintos (en este caso, la posición 
  729                 *               jugada, compuesta de una letra y un número) en la primera posición "libre"
  730                 *               de un array y en la siguiente. La subrutina escribirá los datos desde la primera posición con ceros
  731                 *               que encuentre en el array, por lo que el mismo NO podrá contener el dato "$00" en ninguno
  732                 *               de sus bytes, caso contrario la subrutina lo interpretará como vacío y sobreescribirá información. Se
  733                 *               supone que el array tendrá por lo menos, dos posiciones libres.
  734                 *
  735                 * Parámetros de entrada:
  736                 *               - Primer byte a escribir (en este caso, fila jugada)
  737                 *               - Byte a escribir a continuación del primero (en este caso, columna jugada)
  738                 *               - Dirección de inicio del array en el que se va a escribir
  739                 *               - Número de jugador (0 o mayor)
  740                 *
  741                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  742                 *               
  743                 * Parámetros de salida: NINGUNO
  744                 *       
  745                 *
  746                 * Consideraciones:
  747                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones
  748                 *
  749                 *====================================================================================
  750                 
  751  2415           play_wrt        EQU             *
  752                 
  753  2415                           %BACKUP
    /  2415 36                        psha
    /  2416 37                        pshb
    /  2417 3C                        pshx
    /  2418 183C                      pshy
  754  241A 30                        tsx                             ;creo frame pointer
  755  241B A608                      ldaa            8,x             ;cargo número de array (jugador)
  756  241D C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  757  241F 3D                        mul                             ;obtengo offset de jugador
  758  2420 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  759  2422 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  760                 
  761                 
  762  2424           pw_loop         EQU             *
  763                 
  764  2424 18A600                    ldaa            0,y             ;cargo byte del array
  765  2427 2704                      beq             pw_end          ;si es cero, entonces escribo los datos
  766  2429 1808                      iny                             ;si no es cero, me posiciono sobre la siguiente posición
  767  242B 20F7                      bra             pw_loop         ;vuelvo a buscar ceros
  768                 
  769  242D           pw_end          EQU             *
  770                 
  771  242D A60C                      ldaa            12,x            ;cargo primer byte a escribir
  772  242F 18A700                    staa            0,y             ;guardo primer byte en memoria
  773  2432 1808                      iny                             ;me posiciono en el siguiente byte
  774  2434 A60B                      ldaa            11,x            ;cargo segundo byte a escribir
  775  2436 18A700                    staa            0,y             ;guardo segundo byte en memoria
  776  2439                           %RESTORE
    /  2439 1838                      puly
    /  243B 38                        pulx
    /  243C 33                        pulb
    /  243D 32                        pula
  777                 
  778  243E 39                        rts
  779                 
  780                 ***************************************************************************************
  781                 *Subrutina "CLRZONE"
  782                 *Función: "borra" (guarda ceros) una determinada zona de memoria.
  783                 *         
  784                 *
  785                 * Parámetros de entrada: -Dirección de comienzo de sección a borrar (por stack)
  786                 *                        -Longitud de zona de memoria (por stack)
  787                 *                       
  788                 *
  789                 * Parámetros de salida: Ninguno
  790                 *
  791                 * consideraciones: 
  792                 *                  - Incluir macros "%BACKUP" y "%RESTORE".
  793                 *                                       
  794                 *************************************************************************************** 
  795  243F           clrzone         EQU     *
  796                 
  797  243F                           %BACKUP                         ;backup de registros en stack
    /  243F 36                        psha
    /  2440 37                        pshb
    /  2441 3C                        pshx
    /  2442 183C                      pshy
  798                 
  799  2444 30                        tsx
  800  2445 A608                      ldaa    8,x                     ;cargo contador con longitud de zona a borrar
  801  2447 EE09                      ldx     9,x                     ;cargo puntero zona de memoria a borrar
  802  2449 D600                      ldab    $00                     ;cargo el cero
  803  244B           clr_loop        EQU     *
  804  244B E700                      stab    0,x                     ;guardo caracter en posicion del array
  805  244D 08                        inx                             ;siguiente posición     
  806  244E 4A                        deca                            ;decremento contador
  807  244F 26FA                      bne     clr_loop                ;si no es cero, escribo en la posición siguiente.
  808                 
  809  2451                           %RESTORE                        :restauro backup en registros
    /  2451 1838                      puly
    /  2453 38                        pulx
    /  2454 33                        pulb
    /  2455 32                        pula
  810                 
  811  2456 39                        rts
  812                 
  813                 *---------------------------------------
  814                 * WhoPlays: subrutina para ver que 
  815                 *           jugador juega
  816                 *---------------------------------------
  817                 
  818  2457           whoplays        EQU             *
  819                 
  820  2457 BD251C    wait_ply        jsr             read_kb
  821  245A 4D                        tsta
  822  245B 2BFA                      bmi             wait_ply
  823  245D 8103                      cmpa            #B_P1
  824  245F 2708                      beq             play_p1
  825  2461 8107                      cmpa            #B_P2
  826  2463 26F2                      bne             wait_ply
  827  2465 8600                      ldaa            #P1
  828  2467 2002                      bra             ply_end
  829                 
  830  2469 8601      play_p1         ldaa            #P2
  831  246B 39        ply_end         rts             
  832                 
  833                 *---------------------------------------
  834                 * Input: subrutina que devuelve
  835                 *        entrada para la batalla naval
  836                 * AccA: Fila de la posicion jugada
  837                 * AccB: Columna de la posicion jugada
  838                 *---------------------------------------
  839                 
  840  246C           input           EQU             *
  841                 
  842                 * back up de registros
  843  246C 3C                        pshx
  844  246D 183C                      pshy
  845                 
  846                 * creo variables locales
  847  246F 36                        psha
  848  2470 36                        psha
  849  2471 36                        psha
  850                 
  851                 * inicializo framepointer
  852  2472 1830                      tsy
  853                 
  854                 * prendo el led
  855  2474                           %LED_INV
    /  2474 B61000                    ldaa            PORTA
    /  2477 8840                      eora            #SHF_LED
    /  2479 B71000                    staa            PORTA
  856                 
  857                 * inicializo el contador
  858  247C 8603      inp_rest        ldaa            #INPUTS
  859  247E 18A700                    staa            CONT,Y
  860                                 
  861                 * limpio el display
  862  2481 CE41F9                    ldx             #string
  863  2484 8604                      ldaa            #4
  864  2486 C620                      ldab            #ESP
  865  2488 BD25E6                    jsr             clrarray
  866                 
  867  248B BD25D5                    jsr             clr_dis
  868                 
  869  248E 86FF                      ldaa            #$FF
  870  2490 B741F8                    staa            buffer
  871                 
  872                 * lectura de teclado
  873  2493 BD251C    wait_kb         jsr             read_kb
  874  2496 4D                        tsta
  875  2497 2BFA                      bmi             wait_kb
  876  2499 B141F8                    cmpa            buffer
  877  249C 27F5                      beq             wait_kb
  878  249E B741F8                    staa            buffer
  879                                 
  880  24A1 810F                      cmpa            #B_reset
  881  24A3 27D7                      beq             inp_rest
  882  24A5 8103                      cmpa            #B_P1
  883  24A7 27D3                      beq             inp_rest
  884  24A9 8107                      cmpa            #B_P2
  885  24AB 27CF                      beq             inp_rest
  886                 
  887  24AD 186A00                    dec             CONT,Y
  888  24B0 2727                      beq             chk_fire
  889  24B2 36                        psha
  890  24B3 CE41FE                    ldx             #kb_value
  891  24B6 16                        tab
  892  24B7 3A                        abx
  893  24B8 A600                      ldaa            0,X             
  894  24BA 183C                      pshy
  895  24BC 18E600                    ldab            CONT,Y
  896  24BF 183A                      aby
  897  24C1 18A700                    staa            0,Y
  898  24C4 1838                      puly
  899                 
  900  24C6 33                        pulb
  901  24C7 BD25C5                    jsr             to_ascii
  902  24CA 17                        tba
  903                                 
  904  24CB CE41F9                    ldx             #string
  905  24CE BD25B5                    jsr             sh_value
  906                 
  907  24D1 CE41F9                    ldx             #string
  908  24D4 BD2508                    jsr             show
  909                 
  910  24D7 20BA                      bra             wait_kb
  911                 
  912  24D9 810B      chk_fire        cmpa            #B_fire
  913  24DB 269F                      bne             inp_rest
  914  24DD 18A602                    ldaa            FILA_L,Y
  915  24E0 810A                      cmpa            #MIN_FIL
  916  24E2 2598                      blo             inp_rest
  917  24E4 810F                      cmpa            #MAX_FIL
  918  24E6 2294                      bhi             inp_rest
  919  24E8 18A601                    ldaa            COL_L,Y
  920  24EB 8101                      cmpa            #MIN_COL
  921  24ED 258D                      blo             inp_rest
  922  24EF 8106                      cmpa            #MAX_COL
  923  24F1 2289                      bhi             inp_rest
  924                 
  925                 * apago el led
  926  24F3                           %LED_INV
    /  24F3 B61000                    ldaa            PORTA
    /  24F6 8840                      eora            #SHF_LED
    /  24F8 B71000                    staa            PORTA
  927                 
  928                 * libero variables locales
  929  24FB 32                        pula
  930  24FC 32                        pula
  931  24FD 32                        pula
  932                 
  933  24FE 18A602    return          ldaa            FILA_L,Y
  934  2501 18E601                    ldab            COL_L,Y         
  935                 
  936                 * restore de registros
  937  2504 1838                      puly
  938  2506 38                        pulx
  939                 
  940  2507 39                        rts
  941                 
  942                 *------------------------------------
  943                 * Show: Por IX direccion de string de
  944                 *       4 caracteres para imprimir
  945                 *------------------------------------
  946                 
  947  2508           show            EQU             *
  948                 
  949                 * back up de registros
  950  2508 3C                        pshx
  951  2509 37                        pshb
  952  250A 36                        psha
  953                 
  954                 * inicializo contador de posiciones
  955  250B C604                      ldab            #LENGTH
  956                                 
  957                 * loop para enviar a cada posicion
  958  250D 5A        sh_loop         decb
  959  250E 2B08                      bmi             sh_end          ; si no pase por todas las posiciones
  960  2510 A600                      ldaa            0,X             ; tomo del string el caracter
  961  2512 BD25CE                    jsr             outchar         ; y lo imprimo en la posicion actual
  962  2515 08                        inx
  963  2516 20F5                      bra             sh_loop
  964                 
  965                 * restore de registros                          
  966  2518 32        sh_end          pula
  967  2519 33                        pulb
  968  251A 38                        pulx
  969  251B 39                        rts
  970                 
  971                 *----------------------------------------------
  972                 * read_kb: AccA: tecla presionada
  973                 *          o -1
  974                 *----------------------------------------------
  975                 
  976  251C           read_kb         EQU             *
  977                 
  978                 * back up de registros
  979  251C 3C                        pshx
  980  251D 37                        pshb
  981                 
  982                 * creo espacio para variables locales
  983  251E                           %MALLOC         1               ; variable mascara de filas
    /  251E                           IF 1 > 0
    /  251E 30                        tsx
    /  251F 8F                        xgdx
    /  2520 830001                    subd    #1
    /  2523 8F                        xgdx
    /  2524 35                        txs
    /  2525                           ENDIF
  984  2525                           %MALLOC         1               ; variable mascara de columnas
    /  2525                           IF 1 > 0
    /  2525 30                        tsx
    /  2526 8F                        xgdx
    /  2527 830001                    subd    #1
    /  252A 8F                        xgdx
    /  252B 35                        txs
    /  252C                           ENDIF
  985  252C                           %MALLOC         1               ; variable contador de columnas
    /  252C                           IF 1 > 0
    /  252C 30                        tsx
    /  252D 8F                        xgdx
    /  252E 830001                    subd    #1
    /  2531 8F                        xgdx
    /  2532 35                        txs
    /  2533                           ENDIF
  986  2533                           %MALLOC         1               ; variable contador de tecla
    /  2533                           IF 1 > 0
    /  2533 30                        tsx
    /  2534 8F                        xgdx
    /  2535 830001                    subd    #1
    /  2538 8F                        xgdx
    /  2539 35                        txs
    /  253A                           ENDIF
  987                 
  988                 * inicializacion de variables
  989  253A 30                        tsx                             ; framepointer para acceder a locales
  990  253B C604                      ldab            #LENGTH         ; contador de fila
  991  253D 860E                      ldaa            #FIL0           ; mascara para la fila cero
  992  253F A703                      staa            MASK_FIL,X      
  993  2541 8610                      ldaa            #COL0           ; mascara para la columna cero
  994  2543 A702                      staa            MASK_COL,X
  995  2545 4F                        clra                            ; contador de columna
  996  2546 A701                      staa            COL_CONT,X
  997  2548 A700                      staa            KB_PRESS,X      ; variable con numero de tecla
  998                 
  999                 * loop para barrer y mirar teclado matricial
 1000  254A 86FF      kb_loop         ldaa            #NONE
 1001  254C 5A                        decb                            
 1002  254D 2B2C                      bmi             kb_end          ; me fijo si recorrio todas las filas
 1003  254F A603                      ldaa            MASK_FIL,X      ; enmascaro la siguiente fila
 1004  2551 B71003                    staa            ROWS
 1005  2554 0D                        sec                             ; carry para rotacion de byte
 1006  2555 49                        rola                            
 1007  2556 A703                      staa            MASK_FIL,X      ; cambio variable mascara para la proxima fila
 1008                 
 1009  2558 8604                      ldaa            #LENGTH
 1010  255A A701                      staa            COL_CONT,X
 1011  255C 8610                      ldaa            #COL0           ; inicializo variable para barrer
 1012  255E A702                      staa            MASK_COL,X      ; la columna
 1013                 
 1014  2560 6A01      kb_col          dec             COL_CONT,X      ; me fijo si barrio todas las columnas
 1015  2562 2BE6                      bmi             kb_loop
 1016  2564 B61005                    ldaa            COLS            ; leo el puerto de columnas
 1017  2567 A402                      anda            MASK_COL,X      ; enmascaro columna
 1018  2569 2707                      beq             kb_hit          ; si es nulo apretaron un boton
 1019  256B 48                        lsla                            ; cambio mascara para proxima columna
 1020  256C A702                      staa            MASK_COL,X
 1021  256E 6C00                      inc             KB_PRESS,X      ; incremento numero de tecla
 1022  2570 20EE                      bra             kb_col
 1023                 
 1024  2572 A600      kb_hit          ldaa            KB_PRESS,X      ; apretaron una tecla, lo comparo
 1025  2574 B141F7                    cmpa            kb_buff         ; con la que fue apretada antes
 1026  2577 2602                      bne             kb_end          ; aviso por led
 1027                 
 1028  2579 86FF      kb_none         ldaa            #NONE           ; en caso de que no apreten nada
 1029                 
 1030  257B B741F7    kb_end          staa            kb_buff         ; actualizo variable
 1031                                         
 1032                 * elimino variables locales
 1033  257E                           %RELMEM         1
    /  257E                           IF 1 > 0
    /  257E 30                        tsx
    /  257F 8F                        xgdx
    /  2580 C30001                    addd    #1
    /  2583 8F                        xgdx
    /  2584 35                        txs
    /  2585                           ENDIF           
 1034  2585                           %RELMEM         1
    /  2585                           IF 1 > 0
    /  2585 30                        tsx
    /  2586 8F                        xgdx
    /  2587 C30001                    addd    #1
    /  258A 8F                        xgdx
    /  258B 35                        txs
    /  258C                           ENDIF           
 1035  258C                           %RELMEM         1
    /  258C                           IF 1 > 0
    /  258C 30                        tsx
    /  258D 8F                        xgdx
    /  258E C30001                    addd    #1
    /  2591 8F                        xgdx
    /  2592 35                        txs
    /  2593                           ENDIF           
 1036  2593                           %RELMEM         1
    /  2593                           IF 1 > 0
    /  2593 30                        tsx
    /  2594 8F                        xgdx
    /  2595 C30001                    addd    #1
    /  2598 8F                        xgdx
    /  2599 35                        txs
    /  259A                           ENDIF           
 1037                 
 1038                 * restore de registros
 1039  259A 33                        pulb
 1040  259B 38                        pulx
 1041                                 
 1042  259C 39                        rts
 1043                 
 1044                 *----------------------------------------------
 1045                 * init_kb: subrutina para inicializar teclado
 1046                 *----------------------------------------------
 1047                 
 1048  259D           init_kb         EQU             *
 1049                 
 1050                 * back up de registros
 1051  259D 36                        psha
 1052                 
 1053                 * inicializacion de teclado             
 1054  259E 86FF                      ldaa            #NONE
 1055  25A0 B741F7                    staa            kb_buff
 1056                 
 1057                 * restore de registros
 1058  25A3 32                        pula
 1059  25A4 39                        rts
 1060                 
 1061                 *--------------------------------
 1062                 * Inicializa display (y teclado)
 1063                 *--------------------------------
 1064                 
 1065  25A5           initdis         EQU             *
 1066                         
 1067  25A5 36                        psha
 1068                 
 1069  25A6 860F                      ldaa            #$0F       ;set for input/output
 1070  25A8 B71007                    staa            DDRC       ;C output
 1071  25AB B61002                    ldaa            PIOC       ;get current value
 1072  25AE 84FE                      anda            #$FE       ;reset bit 0 to 0
 1073  25B0 B71002                    staa            PIOC       ;send it out
 1074                         
 1075  25B3 32                        pula
 1076  25B4 39                        rts
 1077                 
 1078                 *--------------------------------------------------------------
 1079                 * sh_value: toma un string, desplaza los caracteres a izquierda
 1080                 *           y agrega un nuevo caracter
 1081                 *           IX: direccion del string
 1082                 *           AccA: nuevo valor
 1083                 *--------------------------------------------------------------
 1084                 
 1085  25B5           sh_value        EQU             *
 1086                 
 1087                 * back up de registros
 1088  25B5 3C                        pshx
 1089  25B6 37                        pshb
 1090                 
 1091                 * loop para desplazar caracteres
 1092  25B7 E601      v_loop          ldab            1,X             ;tomo elemento siguiente en string
 1093  25B9 2705                      beq             v_end
 1094  25BB E700                      stab            0,X             ;y lo guardo en posicion actual
 1095  25BD 08                        inx
 1096  25BE 20F7                      bra             v_loop          
 1097                 
 1098  25C0 A700      v_end           staa            0,X             ;ingresa nuevo caracter en cadena desplazada
 1099                 
 1100                 * restore de registros
 1101  25C2 33                        pulb
 1102  25C3 38                        pulx
 1103  25C4 39                        rts
 1104                 
 1105                 *----------------------------------------------
 1106                 * toAscii: toma numero de boton del teclado
 1107                 *          y devuelve su correspondiente en
 1108                 *          ascii
 1109                 *          toma  AccB: valor del boton
 1110                 *          devuelve AccB: ascii
 1111                 *----------------------------------------------
 1112                 
 1113  25C5           to_ascii        EQU             *
 1114                 
 1115                 * back up de registros
 1116  25C5 3C                        pshx
 1117                 
 1118                 * inicializacion de variables
 1119  25C6 CE420D                    ldx             #kb_ascii       ; apunto a string con caracteres asignados por tecla
 1120  25C9 3A                        abx                             ; me muevo en string con indice y recupero segun tecla presionada
 1121  25CA E600                      ldab            0,X             
 1122                 
 1123                 * restore de registros
 1124  25CC 38                        pulx
 1125  25CD 39                        rts
 1126                 
 1127                 *--------------------------------
 1128                 *Outchar: ACCA: Carácter a enviar
 1129                 *           ACCB: Posición (0-3)
 1130                 *--------------------------------
 1131  25CE           outchar         EQU             *
 1132                         
 1133  25CE F71005                    stab            PORTCL          ;set the position 
 1134  25D1 B71004                    staa            PORTB           ;set the character
 1135                         
 1136  25D4 39                        rts
 1137                 
 1138                 *-------------------------
 1139                 * clr_dis: Limpia display
 1140                 *-------------------------
 1141                 
 1142  25D5           clr_dis         EQU             *
 1143                 
 1144                 * hago back up de registros
 1145  25D5 37                        pshb
 1146  25D6 36                        psha
 1147                 
 1148                 * inicializo el contador de posiciones
 1149  25D7 C604                      ldab            #LENGTH
 1150                 
 1151                 * loop para limpiar cada posicion
 1152  25D9 5A        clrloop         decb
 1153  25DA 2B07                      bmi             clr_end         ; si no pase por todas las posiciones
 1154  25DC 8620                      ldaa            #ESP            ; cargo en esta posicion espacio blanco
 1155  25DE BD25CE                    jsr             outchar         ; y lo envio
 1156  25E1 20F6                      bra             clrloop         
 1157                 
 1158                 * restore de registros
 1159  25E3 32        clr_end         pula
 1160  25E4 33                        pulb
 1161  25E5 39                        rts
 1162                 
 1163                 *-------------------------------------------------------
 1164                 * clrarray: subrutina para limpiar un array dado
 1165                 * parametros: IX direccion del array
 1166                 *             AccA cantidad de elementos del array
 1167                 *             AccB caracter a poner
 1168                 *-------------------------------------------------------
 1169                 
 1170  25E6           clrarray        EQU             *
 1171                                 
 1172  25E6 4A        cra_loop        deca                            ;contador con cantidad de elementos a limpiar
 1173  25E7 2705                      beq             cra_end
 1174  25E9 E700                      stab            0,X             ;reemplazar elemento por caracter a poner
 1175  25EB 08                        inx
 1176  25EC 20F8                      bra             cra_loop
 1177                                 
 1178  25EE E700      cra_end         stab            0,X
 1179  25F0 39                        rts
 1180                 
 1181                 *=============================================
 1182                 *Subrutina winner: Recibe por stack un 1 si
 1183                 *gano el player 1 y un 0 si gano el player 2.
 1184                 *=============================================
 1185                 
 1186                                 
 1187  25F1           winner          equ     *
 1188  25F1                           %BACKUP
    /  25F1 36                        psha
    /  25F2 37                        pshb
    /  25F3 3C                        pshx
    /  25F4 183C                      pshy
 1189  25F6 30                        tsx
 1190  25F7 A608                      ldaa    8,x     ;recupero parametro enviado por stack
 1191  25F9 2708                      beq     win2
 1192                 
 1193  25FB           win1            equ     *
 1194  25FB CE4242                    ldx     #string1
 1195  25FE BD2508                    jsr     show
 1196  2601 2006                      bra     end
 1197                 
 1198  2603           win2            equ     *
 1199  2603 CE4247                    ldx     #string2
 1200  2606 BD2508                    jsr     show
 1201                         
 1202  2609           end             equ     *
 1203  2609                           %RESTORE
    /  2609 1838                      puly
    /  260B 38                        pulx
    /  260C 33                        pulb
    /  260D 32                        pula
 1204  260E 39                        rts
 1205                 
 1206                 *************
 1207                 * VARIABLES *
 1208                 *************
 1209                 ***STACK***
 1210  4000                           ORG             $4000
 1211  4000           stack           RMB             500
 1212  41F3           STACKP          EQU             *-1
 1213                 
 1214                 ***MAIN VARIABLES***
 1215  41F4           player          RMB             1               ;variable de jugador
 1216  41F5           letra_p         RMB             1
 1217  41F6           num_p           RMB             1
 1218                 
 1219                 ***KEYBOARD VARIABLES***
 1220  41F7           kb_buff         RMB             1
 1221  41F8           buffer          RMB             1
 1222                 
 1223  41F9 20202020  string          FCC             '    '
 1224  41FD 00                        FCB             0
 1225                 
 1226  41FE 0A0B0C00  kb_value        FCB             10,11,12,0,13,14,15,0,1,2,3,0,4,5,6
       4202 0D0E0F00
       4206 01020300
       420A 040506
 1227                 
 1228  420D 41424320  kb_ascii        FCC             'ABC DEF 123 456'
       4211 44454620
       4215 31323320
       4219 343536
 1229                 
 1230                 ***ARREGLO DE BARCOS TOCADOS***
 1231  0003           SUB             EQU             3
 1232  0003           CAR             EQU             3
 1233  0002           EL_SIZE         EQU             2
 1234  0009           CANTIDAD        EQU             SUB*1+CAR*2
 1235  0013           HITSIZE         EQU             EL_SIZE*CANTIDAD+1
 1236  421C           hitlist         RMB             HITSIZE*2
 1237                 
 1238                 ***END VARIABLES***
 1239  4242 57494E31  string1         fcc     'WIN1'
 1240  4246 00                        fcb     00
 1241                 
 1242  4247 57494E32  string2         fcc     'WIN2'
 1243  424B 00                        fcb     00
 1244                 
 1245                 ***MATRICES DE TABLERO DE CADA JUGADOR***
 1246  5000                           ORG             $5000
 1247  5000 83830383  p_board         FCB             SHI_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP,SUB_NP
       5004 0343
 1248  5006 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP
       500A 0303
 1249  500C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5010 0303
 1250  5012 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP
       5016 8383
 1251  5018 43030303                  FCB             SUB_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       501C 0303
 1252  501E 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5022 0303
 1253                 
 1254  5024 03830383                  FCB             WAT_NP,SHI_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5028 8303
 1255  502A 03830303                  FCB             WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       502E 0303
 1256  5030 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5034 8303
 1257  5036 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       503A 0303
 1258  503C 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5040 0303
 1259  5042 03430343                  FCB             WAT_NP,SUB_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP
       5046 0303
 1260                 
 1261                 ***MATRIZ DE DISPLAY***
 1262  5F00                           ORG             $5F00
 1263  5F00 03030303  display         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F04 0303
 1264  5F06 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F0A 0303
 1265  5F0C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F10 0303
 1266  5F12 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F16 0303
 1267  5F18 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F1C 0303
 1268  5F1E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F22 0303
 1269                 
 1270                                 
 1271  5F24                           END

    Errors:  None         ###########
    Bytes:   1704         # main_bn #
    CRC:     7EF2         ###########

