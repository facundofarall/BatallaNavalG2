################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              27/Nov/17  00:19:34    #
#                                                                              #
#       Source   =   main_bn.msa                                               #
#       List     =   main_bn.lst                                               #
#       Object   =   main_bn.r07                                               #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                           p68h11
    2                 $macros.msa
    3                 **********************************
    4                 * definicion de macro utilizados *
    5                 **********************************
    6                 * invocar a la subrutina writepos
    7  0000                   MACRO   %WRITEPOS
    8                                 ldab            \0
    9                                 pshb                            ;se envía el byte a escribir
   10                                 ldab            12,x
   11                                 pshb                            ;se envía letra (fila)
   12                                 ldab            11,x
   13                                 pshb                            ;se envía num (columna)
   14                                 ldy             9,x
   15                                 pshy                            ;se envía dirección de inicio de matriz
   16                                 ldab            8,x
   17                                 pshb                            ;se envía jugador atacado
   18                                 jsr             writepos
   19                                 %CLRST          6
   20  0000                   ENDMAC
   21                 
   22                 * invocar a la subrutina writepos
   23  0000                   MACRO   %PLAY_WRT
   24                                 ldab            12,x
   25                                 pshb                            ;se envía letra (fila)
   26                                 ldab            11,x
   27                                 pshb                            ;se envía num (columna)
   28                                 ldy             14,x
   29                                 pshy                            ;se envía inicio de array
   30                                 ldab            8,x
   31                                 pshb                            ;se envía jugador atacado
   32                                 jsr             play_wrt
   33                                 %CLRST          5
   34  0000                   ENDMAC
   35                 
   36                 * realizar back up de AccA, AccB, IX e IY
   37  0000                   MACRO   %BACKUP
   38                                 psha
   39                                 pshb
   40                                 pshx
   41                                 pshy
   42  0000                   ENDMAC
   43                 
   44                 * realizar restore de AccA, AccB, IX e IY
   45  0000                   MACRO   %RESTORE
   46                                 puly
   47                                 pulx
   48                                 pulb
   49                                 pula
   50  0000                   ENDMAC
   51                 
   52                 * limpiar el stack de datos enviados
   53  0000                   MACRO   %CLRST
   54                 CONT_M          SET     \0
   55                                 IF CONT_M > 0
   56                                 ins
   57                                 %CLRST  CONT_M-1
   58                                 ENDIF
   59  0000                   ENDMAC
   60                 * activar un led en funcion de una variable
   61  0000                   MACRO   %LED_INV
   62                                 ldaa            PORTA
   63                                 eora            #SHF_LED
   64                                 staa            PORTA
   65  0000                   ENDMAC
   66                 
   67                 * declarar o reservar variables locales en subrutinas
   68  0000                   MACRO   %MALLOC
   69                                 IF \0 > 0
   70                                 tsx
   71                                 xgdx
   72                                 subd    #\0
   73                                 xgdx
   74                                 txs
   75                                 ENDIF
   76  0000                   ENDMAC
   77                 
   78                 * liberar espacio de variables en subrutinas
   79  0000                   MACRO   %RELMEM
   80                                 IF \0 > 0
   81                                 tsx
   82                                 xgdx
   83                                 addd    #\0
   84                                 xgdx
   85                                 txs
   86                                 ENDIF           
   87  0000                   ENDMAC
   88                 
   89                 *************
   90                 * CONSTANTS *
   91                 *************
   92  0000           P1              EQU             0
   93  0001           P2              EQU             1
   94  0002           PN              EQU             2               ;cantidad de jugadores
   95                 
   96  0006           MAX_C           EQU             6
   97  0001           MIN_C           EQU             1
   98  000F           MAX_F           EQU             15
   99  000A           MIN_F           EQU             10              
  100                 
  101  0003           WAT_NP          EQU             00000011b
  102  0043           SUB_NP          EQU             01000011b
  103  0083           SHI_NP          EQU             10000011b
  104  0008           WATER           EQU             00001000b       ;verde
  105  0050           SUNK_SUB        EQU             01010000b       ;bordeaux para submarinos
  106  00B0           HIT             EQU             10110000b       ;naranja
  107  0090           SUNK_SHI        EQU             10010000b       ;bordeaux para cargueros
  108                 
  109  0006           FILA            EQU             6
  110  0006           COL             EQU             6
  111  0024           ARRAY_L         EQU             FILA*COL
  112  000A           NORM            EQU             10
  113                 
  114  000A           MIN_FIL         EQU             10
  115  000F           MAX_FIL         EQU             15
  116  0001           MIN_COL         EQU             1
  117  0006           MAX_COL         EQU             6       
  118                 
  119  0000           CONT            EQU             0
  120  0002           FILA_L          EQU             2
  121  0001           COL_L           EQU             1
  122                 
  123  0003           INPUTS          EQU             3
  124                 
  125  FFFF           NONE            EQU             -1
  126  0003           MASK_FIL        EQU             3
  127  0002           MASK_COL        EQU             2
  128  0001           COL_CONT        EQU             1
  129  0000           KB_PRESS        EQU             0
  130                 
  131                 ******* Ports ***************************
  132                 
  133  1007           DDRC            EQU             $1007           ;data direction register for C
  134  1002           PIOC            EQU             $1002           ;for strobe B assertion change
  135  1005           PORTCL          EQU             $1005           ;port C latched
  136  1004           PORTB           EQU             $1004           ;port B
  137  1003           PORTC           EQU             $1003           ;rows
  138  1000           PORTA           EQU             $1000
  139                 
  140  0040           SHF_LED         EQU             $40
  141                 
  142                 ******* Cols and Row Ports **************
  143                 
  144  1003           ROWS            EQU             PORTC           ;outputs
  145  1005           COLS            EQU             PORTCL          ;inputs
  146                 
  147                 ***** Col Mask **************************
  148  0010           COL0            EQU             00010000b
  149                          
  150                 ***** Row Masks *************************
  151                 
  152  000E           FIL0            EQU             00001110b       ;mascaras para manejo de filas
  153  000D           FIL1            EQU             00001101b
  154  000B           FIL2            EQU             00001011b
  155  0007           FIL3            EQU             00000111b
  156                 
  157  0004           LENGTH          EQU             4               ; largo del display
  158                 
  159                 ****** Keyboard Mask ********************
  160  0008           Button_1        EQU             8
  161  0009           Button_2        EQU             9
  162  000A           Button_3        EQU             10
  163  000C           Button_4        EQU             12
  164  000D           Button_5        EQU             13
  165  000E           Button_6        EQU             14              
  166  0000           Button_A        EQU             0       
  167  0001           Button_B        EQU             1
  168  0002           Button_C        EQU             2
  169  0004           Button_D        EQU             4
  170  0005           Button_E        EQU             5
  171  0006           Button_F        EQU             6
  172  000B           B_fire          EQU             11
  173  0003           B_P1            EQU             3
  174  0007           B_P2            EQU             7
  175  000F           B_reset         EQU             15
  176                 
  177  0000           EOT             EQU             0
  178  0020           ESP             EQU             $20     
  179                 
  180                 *========================================================
  181                 * El siguiente es un programa de un juego de batalla
  182                 * naval para dos jugadores en el emulador Wookie FX.
  183                 *========================================================
  184                 
  185                 ****************
  186                 * MAIN PROGRAM *
  187                 ****************
  188                 
  189  2000                           ORG             $2000
  190  2000           init            EQU             *
  191  2000 8E41F3                    lds             #STACKP
  192  2003 BD2583                    jsr             initdis         ;inicialización de display 7 seg
  193  2006 BD257B                    jsr             init_kb         ;inicialización de teclado
  194  2009 CE421C                    ldx             #hitlist
  195  200C 3C                        pshx                            ;se envía inicio de arreglo de barcos a poner en 0
  196  200D 8626                      ldaa            #(HITSIZE*2)
  197  200F 36                        psha                            ;se envía el tamaño del arreglo a limpiar
  198  2010 BD2425                    jsr             clrzone
  199  2013 8601                      ldaa            #P2             ;se inicia atacando al jugador 2
  200  2015 B741F4                    staa            player          ;se inicia con el jugador 1 (atacando al 2)
  201                 
  202  2018           main            EQU             *
  203  2018 BD243D                    jsr             whoplays        ;se recibirá en AccA el jugador a atacar a continuación
  204  201B B741F4                    staa            player          ;se habilita la siguiente jugada
  205                 
  206  201E CE5000                    ldx             #p_board
  207  2021 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  208  2022 B641F4                    ldaa            player
  209  2025 36                        psha                            ;se envía el jugador atacado
  210  2026 CE5F00                    ldx             #display
  211  2029 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  212  202A 8624                      ldaa            #ARRAY_L
  213  202C 36                        psha                            ;se envía el tamaño de la matriz tablero
  214  202D BD2319                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  215                 
  216  2030 BD2452                    jsr             input           ;se llama a la subrutina de interfaz de usuario
  217  2033 B741F5                    staa            letra_p         ;se recibe en AccA la letra jugada (fila) y en AccB el número (columna)
  218  2036 F741F6                    stab            num_p           ;se guarda la jugada
  219                 
  220  2039 CE421C                    ldx             #hitlist
  221  203C 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  222  203D B641F5                    ldaa            letra_p
  223  2040 36                        psha                            ;se envía la letra jugada
  224  2041 F641F6                    ldab            num_p
  225  2044 37                        pshb                            ;se envía el número jugado
  226  2045 B641F4                    ldaa            player
  227  2048 36                        psha                            ;se envía el jugador a atacar
  228  2049 BD23A4                    jsr             play_src        ;se recibirá el carry en 1 si la posición corresponde a un barco ya atacado
  229  204C 25CA                      bcs             main            ;si la posición ya fue jugada, se pierde el turno y pasa al siguiente
  230  204E                           %CLRST          5               ;se limpia el stack
    /  0005           CONT_M          SET     5
    /  204E                           IF CONT_M > 0
    /  204E 31                        ins
    /  204F                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  204F                           IF CONT_M > 0
    /  204F 31                        ins
    /  2050                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2050                           IF CONT_M > 0
    /  2050 31                        ins
    /  2051                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2051                           IF CONT_M > 0
    /  2051 31                        ins
    /  2052                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2052                           IF CONT_M > 0
    /  2052 31                        ins
    /  2053                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2053                           ENDIF
    /  2053                           ENDIF
    /  2053                           ENDIF
    /  2053                           ENDIF
    /  2053                           ENDIF
    /  2053                           ENDIF
  231                                 
  232  2053 B641F5                    ldaa            letra_p
  233  2056 36                        psha                            ;se envía le letra jugada
  234  2057 F641F6                    ldab            num_p
  235  205A 37                        pshb                            ;se envía el número jugado
  236  205B CE5000                    ldx             #p_board
  237  205E 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  238  205F F641F4                    ldab            player
  239  2062 37                        pshb                            ;se envía el jugador a atacar
  240  2063 BD2342                    jsr             fetchpos
  241  2066                           %CLRST          4               ;se limpia el stack
    /  0004           CONT_M          SET     4
    /  2066                           IF CONT_M > 0
    /  2066 31                        ins
    /  2067                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2067                           IF CONT_M > 0
    /  2067 31                        ins
    /  2068                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2068                           IF CONT_M > 0
    /  2068 31                        ins
    /  2069                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2069                           IF CONT_M > 0
    /  2069 31                        ins
    /  206A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  206A                           ENDIF
    /  206A                           ENDIF
    /  206A                           ENDIF
    /  206A                           ENDIF
    /  206A                           ENDIF
  242  206A 32                        pula                            ;se toma del stack el dato del byte jugado
  243                 
  244  206B CE421C                    ldx             #hitlist
  245  206E 3C                        pshx                            ;se envía inicio del arreglo de barcos atacados
  246  206F 36                        psha                            ;se envía el byte a jugado
  247  2070 B641F5                    ldaa            letra_p
  248  2073 36                        psha                            ;se envía le letra jugada
  249  2074 F641F6                    ldab            num_p
  250  2077 37                        pshb                            ;se envía el número jugado
  251  2078 CE5000                    ldx             #p_board
  252  207B 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  253  207C F641F4                    ldab            player
  254  207F 37                        pshb                            ;se envía el jugador a atacar
  255  2080 BD20B1                    jsr             gameplay
  256  2083                           %CLRST          8               ;se limpia el stack
    /  0008           CONT_M          SET     8
    /  2083                           IF CONT_M > 0
    /  2083 31                        ins
    /  2084                           %CLRST  CONT_M-1
    /  0007           CONT_M          SET     CONT_M-1
    /  2084                           IF CONT_M > 0
    /  2084 31                        ins
    /  2085                           %CLRST  CONT_M-1
    /  0006           CONT_M          SET     CONT_M-1
    /  2085                           IF CONT_M > 0
    /  2085 31                        ins
    /  2086                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2086                           IF CONT_M > 0
    /  2086 31                        ins
    /  2087                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2087                           IF CONT_M > 0
    /  2087 31                        ins
    /  2088                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2088                           IF CONT_M > 0
    /  2088 31                        ins
    /  2089                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2089                           IF CONT_M > 0
    /  2089 31                        ins
    /  208A                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  208A                           IF CONT_M > 0
    /  208A 31                        ins
    /  208B                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
    /  208B                           ENDIF
  257                 
  258  208B CE5000                    ldx             #p_board
  259  208E 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  260  208F B641F4                    ldaa            player
  261  2092 36                        psha                            ;se envía el jugador atacado
  262  2093 CE5F00                    ldx             #display
  263  2096 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  264  2097 8624                      ldaa            #ARRAY_L
  265  2099 36                        psha                            ;se envía el tamaño de la matriz tablero
  266  209A BD2319                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  267                                 
  268  209D CE421C                    ldx             #hitlist
  269  20A0 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  270  20A1 B641F4                    ldaa            player
  271  20A4 36                        psha                            ;se envía el jugador a atacar
  272  20A5 BD23D7                    jsr             play_cnt        
  273  20A8 2503                      bcs             end_game        ;si se recibe el Carry en 1, el jugador de turno ganó
  274                 
  275  20AA 7E2018                    jmp             main
  276                 
  277  20AD           end_game        EQU             *
  278                 *               ldaa            player
  279                 *               psha
  280                 *               jsr             winner
  281  20AD 20FE                      bra             end_game
  282                 
  283  20AF           end_loop        EQU             *
  284  20AF 20FE                      bra             end_loop
  285                 
  286                 **************
  287                 * SUBRUTINES *
  288                 **************
  289                 *=======================================================================
  290                 * subrutina gameplay
  291                 * Función: Determina si la posición jugada en el juego de batalla naval
  292                 *          para Wookie FX fue "agua", "submarion" o "carguero", y toma 
  293                 *          la decisión de qué hacer al respecto.
  294                 * Recibe: - Dirección arreglo auxiliar de barcos
  295                 *         - Byte a jugar.
  296                 *         - FILA del array (En HEX, de $0A (fil.0) en adelante)
  297                 *         - COLUMNA del array (en HEX)
  298                 *         - Dirección de comienzo del arreglo (2 bytes)
  299                 *         - Número de arreglo (de 0 en adelante) (número de jugador)
  300                 *       TODO POR STACK.
  301                 * Devuelve: parámetro jugado en posición correspondiente.
  302                 * Requiere: 
  303                 *=======================================================================
  304  20B1           gameplay        EQU             *
  305  20B1                           %BACKUP
    /  20B1 36                        psha
    /  20B2 37                        pshb
    /  20B3 3C                        pshx
    /  20B4 183C                      pshy
  306                                 
  307  20B6 30                        tsx                             ;se usa el IX como frame pointer
  308  20B7 A60D                      ldaa            13,x            ;se carga en AccA el byte a analizar
  309  20B9 84C0                      anda            #11000000b      ;se enmascan los bits 0 a 5, para analizar los más significativos
  310                 
  311  20BB           gp_water        EQU             *
  312  20BB 2620                      bne             gp_sub          ;se estudia si era agua
  313  20BD                           %WRITEPOS       #WATER          ;se cambia el color en el tablero
    /  20BD C608                      ldab            #WATER
    /  20BF 37                        pshb                            ;se envía el byte a escribir
    /  20C0 E60C                      ldab            12,x
    /  20C2 37                        pshb                            ;se envía letra (fila)
    /  20C3 E60B                      ldab            11,x
    /  20C5 37                        pshb                            ;se envía num (columna)
    /  20C6 1AEE09                    ldy             9,x
    /  20C9 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20CB E608                      ldab            8,x
    /  20CD 37                        pshb                            ;se envía jugador atacado
    /  20CE BD2373                    jsr             writepos
    /  20D1                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20D1                           IF CONT_M > 0
    /  20D1 31                        ins
    /  20D2                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20D2                           IF CONT_M > 0
    /  20D2 31                        ins
    /  20D3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20D3                           IF CONT_M > 0
    /  20D3 31                        ins
    /  20D4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20D4                           IF CONT_M > 0
    /  20D4 31                        ins
    /  20D5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20D5                           IF CONT_M > 0
    /  20D5 31                        ins
    /  20D6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20D6                           IF CONT_M > 0
    /  20D6 31                        ins
    /  20D7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20D7                           ENDIF
    /  20D7                           ENDIF
    /  20D7                           ENDIF
    /  20D7                           ENDIF
    /  20D7                           ENDIF
    /  20D7                           ENDIF
    /  20D7                           ENDIF
  314  20D7                           %RESTORE
    /  20D7 1838                      puly
    /  20D9 38                        pulx
    /  20DA 33                        pulb
    /  20DB 32                        pula
  315  20DC 39                        rts
  316                 
  317  20DD           gp_sub          EQU             *
  318  20DD 8140                      cmpa            #01000000b      ;se estudia si era un submarino
  319  20DF 2636                      bne             gp_shi_r
  320  20E1                           %WRITEPOS       #SUNK_SUB       ;se cambia el color en el tablero
    /  20E1 C650                      ldab            #SUNK_SUB
    /  20E3 37                        pshb                            ;se envía el byte a escribir
    /  20E4 E60C                      ldab            12,x
    /  20E6 37                        pshb                            ;se envía letra (fila)
    /  20E7 E60B                      ldab            11,x
    /  20E9 37                        pshb                            ;se envía num (columna)
    /  20EA 1AEE09                    ldy             9,x
    /  20ED 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20EF E608                      ldab            8,x
    /  20F1 37                        pshb                            ;se envía jugador atacado
    /  20F2 BD2373                    jsr             writepos
    /  20F5                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20F5                           IF CONT_M > 0
    /  20F5 31                        ins
    /  20F6                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20F6                           IF CONT_M > 0
    /  20F6 31                        ins
    /  20F7                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20F7                           IF CONT_M > 0
    /  20F7 31                        ins
    /  20F8                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20F8                           IF CONT_M > 0
    /  20F8 31                        ins
    /  20F9                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20F9                           IF CONT_M > 0
    /  20F9 31                        ins
    /  20FA                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20FA                           IF CONT_M > 0
    /  20FA 31                        ins
    /  20FB                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20FB                           ENDIF
    /  20FB                           ENDIF
    /  20FB                           ENDIF
    /  20FB                           ENDIF
    /  20FB                           ENDIF
    /  20FB                           ENDIF
    /  20FB                           ENDIF
  321  20FB                           %PLAY_WRT                       ;se agraga la posición al array de barcos atacados
    /  20FB E60C                      ldab            12,x
    /  20FD 37                        pshb                            ;se envía letra (fila)
    /  20FE E60B                      ldab            11,x
    /  2100 37                        pshb                            ;se envía num (columna)
    /  2101 1AEE0E                    ldy             14,x
    /  2104 183C                      pshy                            ;se envía inicio de array
    /  2106 E608                      ldab            8,x
    /  2108 37                        pshb                            ;se envía jugador atacado
    /  2109 BD23FB                    jsr             play_wrt
    /  210C                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  210C                           IF CONT_M > 0
    /  210C 31                        ins
    /  210D                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  210D                           IF CONT_M > 0
    /  210D 31                        ins
    /  210E                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  210E                           IF CONT_M > 0
    /  210E 31                        ins
    /  210F                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  210F                           IF CONT_M > 0
    /  210F 31                        ins
    /  2110                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2110                           IF CONT_M > 0
    /  2110 31                        ins
    /  2111                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2111                           ENDIF
    /  2111                           ENDIF
    /  2111                           ENDIF
    /  2111                           ENDIF
    /  2111                           ENDIF
    /  2111                           ENDIF
  322  2111                           %RESTORE
    /  2111 1838                      puly
    /  2113 38                        pulx
    /  2114 33                        pulb
    /  2115 32                        pula
  323  2116 39                        rts
  324                 
  325  2117           gp_shi_r        EQU             *               ;si no era ninguno de los anteriores, es un carguero
  326  2117 E60B                      ldab            11,x
  327  2119 C106                      cmpb            #MAX_C
  328  211B 276D                      beq             gp_shi_l        ;si está en el borde derecho, se continúa
  329  211D E60C                      ldab            12,x
  330  211F 37                        pshb                            ;se envía la letra (fila)
  331  2120 E60B                      ldab            11,x
  332  2122 5C                        incb                            ;se avanza a la derecha
  333  2123 37                        pshb                            ;se envía el num (columna)
  334  2124 1AEE0E                    ldy             14,x
  335  2127 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  336  2129 E608                      ldab            8,x
  337  212B 37                        pshb                            ;se envía el jugador atacado
  338  212C BD23A4                    jsr             play_src        ;se busca la posición de la derecha
  339  212F                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  212F                           IF CONT_M > 0
    /  212F 31                        ins
    /  2130                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2130                           IF CONT_M > 0
    /  2130 31                        ins
    /  2131                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2131                           IF CONT_M > 0
    /  2131 31                        ins
    /  2132                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2132                           IF CONT_M > 0
    /  2132 31                        ins
    /  2133                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2133                           IF CONT_M > 0
    /  2133 31                        ins
    /  2134                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2134                           ENDIF
    /  2134                           ENDIF
    /  2134                           ENDIF
    /  2134                           ENDIF
    /  2134                           ENDIF
    /  2134                           ENDIF
  340  2134 2454                      bcc             gp_shi_l        ;si no había barco atacado en la derecha, se busca la izquierda
  341  2136                           %WRITEPOS       #SUNK_SHI       
    /  2136 C690                      ldab            #SUNK_SHI
    /  2138 37                        pshb                            ;se envía el byte a escribir
    /  2139 E60C                      ldab            12,x
    /  213B 37                        pshb                            ;se envía letra (fila)
    /  213C E60B                      ldab            11,x
    /  213E 37                        pshb                            ;se envía num (columna)
    /  213F 1AEE09                    ldy             9,x
    /  2142 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2144 E608                      ldab            8,x
    /  2146 37                        pshb                            ;se envía jugador atacado
    /  2147 BD2373                    jsr             writepos
    /  214A                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  214A                           IF CONT_M > 0
    /  214A 31                        ins
    /  214B                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  214B                           IF CONT_M > 0
    /  214B 31                        ins
    /  214C                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  214C                           IF CONT_M > 0
    /  214C 31                        ins
    /  214D                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  214D                           IF CONT_M > 0
    /  214D 31                        ins
    /  214E                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  214E                           IF CONT_M > 0
    /  214E 31                        ins
    /  214F                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  214F                           IF CONT_M > 0
    /  214F 31                        ins
    /  2150                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2150                           ENDIF
    /  2150                           ENDIF
    /  2150                           ENDIF
    /  2150                           ENDIF
    /  2150                           ENDIF
    /  2150                           ENDIF
    /  2150                           ENDIF
  342  2150 6C0B                      inc             11,x
  343  2152                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2152 C690                      ldab            #SUNK_SHI
    /  2154 37                        pshb                            ;se envía el byte a escribir
    /  2155 E60C                      ldab            12,x
    /  2157 37                        pshb                            ;se envía letra (fila)
    /  2158 E60B                      ldab            11,x
    /  215A 37                        pshb                            ;se envía num (columna)
    /  215B 1AEE09                    ldy             9,x
    /  215E 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2160 E608                      ldab            8,x
    /  2162 37                        pshb                            ;se envía jugador atacado
    /  2163 BD2373                    jsr             writepos
    /  2166                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2166                           IF CONT_M > 0
    /  2166 31                        ins
    /  2167                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2167                           IF CONT_M > 0
    /  2167 31                        ins
    /  2168                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2168                           IF CONT_M > 0
    /  2168 31                        ins
    /  2169                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2169                           IF CONT_M > 0
    /  2169 31                        ins
    /  216A                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  216A                           IF CONT_M > 0
    /  216A 31                        ins
    /  216B                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  216B                           IF CONT_M > 0
    /  216B 31                        ins
    /  216C                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  216C                           ENDIF
    /  216C                           ENDIF
    /  216C                           ENDIF
    /  216C                           ENDIF
    /  216C                           ENDIF
    /  216C                           ENDIF
    /  216C                           ENDIF
  344  216C 6A0B                      dec             11,x            ;se recupera el dato
  345  216E                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  216E E60C                      ldab            12,x
    /  2170 37                        pshb                            ;se envía letra (fila)
    /  2171 E60B                      ldab            11,x
    /  2173 37                        pshb                            ;se envía num (columna)
    /  2174 1AEE0E                    ldy             14,x
    /  2177 183C                      pshy                            ;se envía inicio de array
    /  2179 E608                      ldab            8,x
    /  217B 37                        pshb                            ;se envía jugador atacado
    /  217C BD23FB                    jsr             play_wrt
    /  217F                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  217F                           IF CONT_M > 0
    /  217F 31                        ins
    /  2180                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2180                           IF CONT_M > 0
    /  2180 31                        ins
    /  2181                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2181                           IF CONT_M > 0
    /  2181 31                        ins
    /  2182                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2182                           IF CONT_M > 0
    /  2182 31                        ins
    /  2183                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2183                           IF CONT_M > 0
    /  2183 31                        ins
    /  2184                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2184                           ENDIF
    /  2184                           ENDIF
    /  2184                           ENDIF
    /  2184                           ENDIF
    /  2184                           ENDIF
    /  2184                           ENDIF
  346  2184                           %RESTORE
    /  2184 1838                      puly
    /  2186 38                        pulx
    /  2187 33                        pulb
    /  2188 32                        pula
  347  2189 39                        rts
  348                 
  349  218A           gp_shi_l        EQU             *
  350  218A E60B                      ldab            11,x
  351  218C C101                      cmpb            #MIN_C
  352  218E 276D                      beq             gp_shi_u        ;si está en el borde izquierdo, se continúa
  353  2190 E60C                      ldab            12,x
  354  2192 37                        pshb                            ;se envía la letra (fila)
  355  2193 E60B                      ldab            11,x
  356  2195 5A                        decb                            ;se retrocede a la izquierda
  357  2196 37                        pshb                            ;se envía el número (columna)
  358  2197 1AEE0E                    ldy             14,x
  359  219A 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  360  219C E608                      ldab            8,x
  361  219E 37                        pshb                            ;se envía el jugador atacado
  362  219F BD23A4                    jsr             play_src        ;se busca la posición de la izquierda
  363  21A2                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21A2                           IF CONT_M > 0
    /  21A2 31                        ins
    /  21A3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21A3                           IF CONT_M > 0
    /  21A3 31                        ins
    /  21A4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21A4                           IF CONT_M > 0
    /  21A4 31                        ins
    /  21A5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21A5                           IF CONT_M > 0
    /  21A5 31                        ins
    /  21A6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21A6                           IF CONT_M > 0
    /  21A6 31                        ins
    /  21A7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21A7                           ENDIF
    /  21A7                           ENDIF
    /  21A7                           ENDIF
    /  21A7                           ENDIF
    /  21A7                           ENDIF
    /  21A7                           ENDIF
  364  21A7 2454                      bcc             gp_shi_u        ;si no había barco atacado a la izquierda, se busca arriba
  365  21A9                           %WRITEPOS       #SUNK_SHI       
    /  21A9 C690                      ldab            #SUNK_SHI
    /  21AB 37                        pshb                            ;se envía el byte a escribir
    /  21AC E60C                      ldab            12,x
    /  21AE 37                        pshb                            ;se envía letra (fila)
    /  21AF E60B                      ldab            11,x
    /  21B1 37                        pshb                            ;se envía num (columna)
    /  21B2 1AEE09                    ldy             9,x
    /  21B5 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21B7 E608                      ldab            8,x
    /  21B9 37                        pshb                            ;se envía jugador atacado
    /  21BA BD2373                    jsr             writepos
    /  21BD                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21BD                           IF CONT_M > 0
    /  21BD 31                        ins
    /  21BE                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21BE                           IF CONT_M > 0
    /  21BE 31                        ins
    /  21BF                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21BF                           IF CONT_M > 0
    /  21BF 31                        ins
    /  21C0                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21C0                           IF CONT_M > 0
    /  21C0 31                        ins
    /  21C1                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21C1                           IF CONT_M > 0
    /  21C1 31                        ins
    /  21C2                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21C2                           IF CONT_M > 0
    /  21C2 31                        ins
    /  21C3                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21C3                           ENDIF
    /  21C3                           ENDIF
    /  21C3                           ENDIF
    /  21C3                           ENDIF
    /  21C3                           ENDIF
    /  21C3                           ENDIF
    /  21C3                           ENDIF
  366  21C3 6A0B                      dec             11,x
  367  21C5                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  21C5 C690                      ldab            #SUNK_SHI
    /  21C7 37                        pshb                            ;se envía el byte a escribir
    /  21C8 E60C                      ldab            12,x
    /  21CA 37                        pshb                            ;se envía letra (fila)
    /  21CB E60B                      ldab            11,x
    /  21CD 37                        pshb                            ;se envía num (columna)
    /  21CE 1AEE09                    ldy             9,x
    /  21D1 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21D3 E608                      ldab            8,x
    /  21D5 37                        pshb                            ;se envía jugador atacado
    /  21D6 BD2373                    jsr             writepos
    /  21D9                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21D9                           IF CONT_M > 0
    /  21D9 31                        ins
    /  21DA                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21DA                           IF CONT_M > 0
    /  21DA 31                        ins
    /  21DB                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21DB                           IF CONT_M > 0
    /  21DB 31                        ins
    /  21DC                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21DC                           IF CONT_M > 0
    /  21DC 31                        ins
    /  21DD                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21DD                           IF CONT_M > 0
    /  21DD 31                        ins
    /  21DE                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21DE                           IF CONT_M > 0
    /  21DE 31                        ins
    /  21DF                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21DF                           ENDIF
    /  21DF                           ENDIF
    /  21DF                           ENDIF
    /  21DF                           ENDIF
    /  21DF                           ENDIF
    /  21DF                           ENDIF
    /  21DF                           ENDIF
  368  21DF 6C0B                      inc             11,x            ;se recupera el dato
  369  21E1                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  21E1 E60C                      ldab            12,x
    /  21E3 37                        pshb                            ;se envía letra (fila)
    /  21E4 E60B                      ldab            11,x
    /  21E6 37                        pshb                            ;se envía num (columna)
    /  21E7 1AEE0E                    ldy             14,x
    /  21EA 183C                      pshy                            ;se envía inicio de array
    /  21EC E608                      ldab            8,x
    /  21EE 37                        pshb                            ;se envía jugador atacado
    /  21EF BD23FB                    jsr             play_wrt
    /  21F2                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21F2                           IF CONT_M > 0
    /  21F2 31                        ins
    /  21F3                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21F3                           IF CONT_M > 0
    /  21F3 31                        ins
    /  21F4                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21F4                           IF CONT_M > 0
    /  21F4 31                        ins
    /  21F5                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21F5                           IF CONT_M > 0
    /  21F5 31                        ins
    /  21F6                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21F6                           IF CONT_M > 0
    /  21F6 31                        ins
    /  21F7                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21F7                           ENDIF
    /  21F7                           ENDIF
    /  21F7                           ENDIF
    /  21F7                           ENDIF
    /  21F7                           ENDIF
    /  21F7                           ENDIF
  370  21F7                           %RESTORE
    /  21F7 1838                      puly
    /  21F9 38                        pulx
    /  21FA 33                        pulb
    /  21FB 32                        pula
  371  21FC 39                        rts
  372                 
  373  21FD           gp_shi_u        EQU             *
  374  21FD E60C                      ldab            12,x
  375  21FF C10A                      cmpb            #MIN_F
  376  2201 276D                      beq             gp_shi_d        ;si está en el borde superior, se continúa
  377  2203 E60C                      ldab            12,x
  378  2205 5A                        decb                            ;se va a la posición de arriba
  379  2206 37                        pshb                            ;se envía la letra (fila)
  380  2207 E60B                      ldab            11,x
  381  2209 37                        pshb                            ;se envía el num (columna)
  382  220A 1AEE0E                    ldy             14,x
  383  220D 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  384  220F E608                      ldab            8,x
  385  2211 37                        pshb                            ;se envía el jugador atacado
  386  2212 BD23A4                    jsr             play_src        ;se busca la posición de arriba
  387  2215                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2215                           IF CONT_M > 0
    /  2215 31                        ins
    /  2216                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2216                           IF CONT_M > 0
    /  2216 31                        ins
    /  2217                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2217                           IF CONT_M > 0
    /  2217 31                        ins
    /  2218                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2218                           IF CONT_M > 0
    /  2218 31                        ins
    /  2219                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2219                           IF CONT_M > 0
    /  2219 31                        ins
    /  221A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  221A                           ENDIF
    /  221A                           ENDIF
    /  221A                           ENDIF
    /  221A                           ENDIF
    /  221A                           ENDIF
    /  221A                           ENDIF
  388  221A 2454                      bcc             gp_shi_d        ;si no había barco atacado arriba, se busca abajo
  389  221C                           %WRITEPOS       #SUNK_SHI       
    /  221C C690                      ldab            #SUNK_SHI
    /  221E 37                        pshb                            ;se envía el byte a escribir
    /  221F E60C                      ldab            12,x
    /  2221 37                        pshb                            ;se envía letra (fila)
    /  2222 E60B                      ldab            11,x
    /  2224 37                        pshb                            ;se envía num (columna)
    /  2225 1AEE09                    ldy             9,x
    /  2228 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  222A E608                      ldab            8,x
    /  222C 37                        pshb                            ;se envía jugador atacado
    /  222D BD2373                    jsr             writepos
    /  2230                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2230                           IF CONT_M > 0
    /  2230 31                        ins
    /  2231                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2231                           IF CONT_M > 0
    /  2231 31                        ins
    /  2232                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2232                           IF CONT_M > 0
    /  2232 31                        ins
    /  2233                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2233                           IF CONT_M > 0
    /  2233 31                        ins
    /  2234                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2234                           IF CONT_M > 0
    /  2234 31                        ins
    /  2235                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2235                           IF CONT_M > 0
    /  2235 31                        ins
    /  2236                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2236                           ENDIF
    /  2236                           ENDIF
    /  2236                           ENDIF
    /  2236                           ENDIF
    /  2236                           ENDIF
    /  2236                           ENDIF
    /  2236                           ENDIF
  390  2236 6A0C                      dec             12,x
  391  2238                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2238 C690                      ldab            #SUNK_SHI
    /  223A 37                        pshb                            ;se envía el byte a escribir
    /  223B E60C                      ldab            12,x
    /  223D 37                        pshb                            ;se envía letra (fila)
    /  223E E60B                      ldab            11,x
    /  2240 37                        pshb                            ;se envía num (columna)
    /  2241 1AEE09                    ldy             9,x
    /  2244 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2246 E608                      ldab            8,x
    /  2248 37                        pshb                            ;se envía jugador atacado
    /  2249 BD2373                    jsr             writepos
    /  224C                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  224C                           IF CONT_M > 0
    /  224C 31                        ins
    /  224D                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  224D                           IF CONT_M > 0
    /  224D 31                        ins
    /  224E                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  224E                           IF CONT_M > 0
    /  224E 31                        ins
    /  224F                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  224F                           IF CONT_M > 0
    /  224F 31                        ins
    /  2250                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2250                           IF CONT_M > 0
    /  2250 31                        ins
    /  2251                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2251                           IF CONT_M > 0
    /  2251 31                        ins
    /  2252                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2252                           ENDIF
    /  2252                           ENDIF
    /  2252                           ENDIF
    /  2252                           ENDIF
    /  2252                           ENDIF
    /  2252                           ENDIF
    /  2252                           ENDIF
  392  2252 6C0C                      inc             12,x            ;se recupera el dato
  393  2254                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2254 E60C                      ldab            12,x
    /  2256 37                        pshb                            ;se envía letra (fila)
    /  2257 E60B                      ldab            11,x
    /  2259 37                        pshb                            ;se envía num (columna)
    /  225A 1AEE0E                    ldy             14,x
    /  225D 183C                      pshy                            ;se envía inicio de array
    /  225F E608                      ldab            8,x
    /  2261 37                        pshb                            ;se envía jugador atacado
    /  2262 BD23FB                    jsr             play_wrt
    /  2265                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2265                           IF CONT_M > 0
    /  2265 31                        ins
    /  2266                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2266                           IF CONT_M > 0
    /  2266 31                        ins
    /  2267                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2267                           IF CONT_M > 0
    /  2267 31                        ins
    /  2268                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2268                           IF CONT_M > 0
    /  2268 31                        ins
    /  2269                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2269                           IF CONT_M > 0
    /  2269 31                        ins
    /  226A                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  226A                           ENDIF
    /  226A                           ENDIF
    /  226A                           ENDIF
    /  226A                           ENDIF
    /  226A                           ENDIF
    /  226A                           ENDIF
  394  226A                           %RESTORE
    /  226A 1838                      puly
    /  226C 38                        pulx
    /  226D 33                        pulb
    /  226E 32                        pula
  395  226F 39                        rts
  396                 
  397  2270           gp_shi_d        EQU             *
  398  2270 E60C                      ldab            12,x
  399  2272 C10F                      cmpb            #MAX_F
  400  2274 276D                      beq             gp_shi_h        ;si está en el borde inferior, se continúa
  401  2276 E60C                      ldab            12,x
  402  2278 5C                        incb                            ;se va a la posición de abajo
  403  2279 37                        pshb                            ;se envía la letra (fila)
  404  227A E60B                      ldab            11,x
  405  227C 37                        pshb                            ;se envía el num (columna)
  406  227D 1AEE0E                    ldy             14,x
  407  2280 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  408  2282 E608                      ldab            8,x
  409  2284 37                        pshb                            ;se envía el jugador atacado
  410  2285 BD23A4                    jsr             play_src        ;se busca la posición de abajo
  411  2288                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2288                           IF CONT_M > 0
    /  2288 31                        ins
    /  2289                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2289                           IF CONT_M > 0
    /  2289 31                        ins
    /  228A                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  228A                           IF CONT_M > 0
    /  228A 31                        ins
    /  228B                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  228B                           IF CONT_M > 0
    /  228B 31                        ins
    /  228C                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  228C                           IF CONT_M > 0
    /  228C 31                        ins
    /  228D                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  228D                           ENDIF
    /  228D                           ENDIF
    /  228D                           ENDIF
    /  228D                           ENDIF
    /  228D                           ENDIF
    /  228D                           ENDIF
  412  228D 2454                      bcc             gp_shi_h        ;si no había barco atacado abajo, el carguero está tocado
  413  228F                           %WRITEPOS       #SUNK_SHI       
    /  228F C690                      ldab            #SUNK_SHI
    /  2291 37                        pshb                            ;se envía el byte a escribir
    /  2292 E60C                      ldab            12,x
    /  2294 37                        pshb                            ;se envía letra (fila)
    /  2295 E60B                      ldab            11,x
    /  2297 37                        pshb                            ;se envía num (columna)
    /  2298 1AEE09                    ldy             9,x
    /  229B 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  229D E608                      ldab            8,x
    /  229F 37                        pshb                            ;se envía jugador atacado
    /  22A0 BD2373                    jsr             writepos
    /  22A3                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22A3                           IF CONT_M > 0
    /  22A3 31                        ins
    /  22A4                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22A4                           IF CONT_M > 0
    /  22A4 31                        ins
    /  22A5                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22A5                           IF CONT_M > 0
    /  22A5 31                        ins
    /  22A6                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22A6                           IF CONT_M > 0
    /  22A6 31                        ins
    /  22A7                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22A7                           IF CONT_M > 0
    /  22A7 31                        ins
    /  22A8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22A8                           IF CONT_M > 0
    /  22A8 31                        ins
    /  22A9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22A9                           ENDIF
    /  22A9                           ENDIF
    /  22A9                           ENDIF
    /  22A9                           ENDIF
    /  22A9                           ENDIF
    /  22A9                           ENDIF
    /  22A9                           ENDIF
  414  22A9 6C0C                      inc             12,x
  415  22AB                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  22AB C690                      ldab            #SUNK_SHI
    /  22AD 37                        pshb                            ;se envía el byte a escribir
    /  22AE E60C                      ldab            12,x
    /  22B0 37                        pshb                            ;se envía letra (fila)
    /  22B1 E60B                      ldab            11,x
    /  22B3 37                        pshb                            ;se envía num (columna)
    /  22B4 1AEE09                    ldy             9,x
    /  22B7 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22B9 E608                      ldab            8,x
    /  22BB 37                        pshb                            ;se envía jugador atacado
    /  22BC BD2373                    jsr             writepos
    /  22BF                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22BF                           IF CONT_M > 0
    /  22BF 31                        ins
    /  22C0                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22C0                           IF CONT_M > 0
    /  22C0 31                        ins
    /  22C1                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22C1                           IF CONT_M > 0
    /  22C1 31                        ins
    /  22C2                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22C2                           IF CONT_M > 0
    /  22C2 31                        ins
    /  22C3                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22C3                           IF CONT_M > 0
    /  22C3 31                        ins
    /  22C4                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22C4                           IF CONT_M > 0
    /  22C4 31                        ins
    /  22C5                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22C5                           ENDIF
    /  22C5                           ENDIF
    /  22C5                           ENDIF
    /  22C5                           ENDIF
    /  22C5                           ENDIF
    /  22C5                           ENDIF
    /  22C5                           ENDIF
  416  22C5 6A0C                      dec             12,x            ;se recupera el dato
  417  22C7                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22C7 E60C                      ldab            12,x
    /  22C9 37                        pshb                            ;se envía letra (fila)
    /  22CA E60B                      ldab            11,x
    /  22CC 37                        pshb                            ;se envía num (columna)
    /  22CD 1AEE0E                    ldy             14,x
    /  22D0 183C                      pshy                            ;se envía inicio de array
    /  22D2 E608                      ldab            8,x
    /  22D4 37                        pshb                            ;se envía jugador atacado
    /  22D5 BD23FB                    jsr             play_wrt
    /  22D8                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22D8                           IF CONT_M > 0
    /  22D8 31                        ins
    /  22D9                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22D9                           IF CONT_M > 0
    /  22D9 31                        ins
    /  22DA                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22DA                           IF CONT_M > 0
    /  22DA 31                        ins
    /  22DB                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22DB                           IF CONT_M > 0
    /  22DB 31                        ins
    /  22DC                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22DC                           IF CONT_M > 0
    /  22DC 31                        ins
    /  22DD                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22DD                           ENDIF
    /  22DD                           ENDIF
    /  22DD                           ENDIF
    /  22DD                           ENDIF
    /  22DD                           ENDIF
    /  22DD                           ENDIF
  418  22DD                           %RESTORE
    /  22DD 1838                      puly
    /  22DF 38                        pulx
    /  22E0 33                        pulb
    /  22E1 32                        pula
  419  22E2 39                        rts
  420                 
  421  22E3           gp_shi_h        EQU             *
  422  22E3                           %WRITEPOS       #HIT            ;se marca al carguero como tocado
    /  22E3 C6B0                      ldab            #HIT
    /  22E5 37                        pshb                            ;se envía el byte a escribir
    /  22E6 E60C                      ldab            12,x
    /  22E8 37                        pshb                            ;se envía letra (fila)
    /  22E9 E60B                      ldab            11,x
    /  22EB 37                        pshb                            ;se envía num (columna)
    /  22EC 1AEE09                    ldy             9,x
    /  22EF 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22F1 E608                      ldab            8,x
    /  22F3 37                        pshb                            ;se envía jugador atacado
    /  22F4 BD2373                    jsr             writepos
    /  22F7                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22F7                           IF CONT_M > 0
    /  22F7 31                        ins
    /  22F8                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22F8                           IF CONT_M > 0
    /  22F8 31                        ins
    /  22F9                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22F9                           IF CONT_M > 0
    /  22F9 31                        ins
    /  22FA                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22FA                           IF CONT_M > 0
    /  22FA 31                        ins
    /  22FB                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22FB                           IF CONT_M > 0
    /  22FB 31                        ins
    /  22FC                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22FC                           IF CONT_M > 0
    /  22FC 31                        ins
    /  22FD                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22FD                           ENDIF
    /  22FD                           ENDIF
    /  22FD                           ENDIF
    /  22FD                           ENDIF
    /  22FD                           ENDIF
    /  22FD                           ENDIF
    /  22FD                           ENDIF
  423  22FD                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22FD E60C                      ldab            12,x
    /  22FF 37                        pshb                            ;se envía letra (fila)
    /  2300 E60B                      ldab            11,x
    /  2302 37                        pshb                            ;se envía num (columna)
    /  2303 1AEE0E                    ldy             14,x
    /  2306 183C                      pshy                            ;se envía inicio de array
    /  2308 E608                      ldab            8,x
    /  230A 37                        pshb                            ;se envía jugador atacado
    /  230B BD23FB                    jsr             play_wrt
    /  230E                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  230E                           IF CONT_M > 0
    /  230E 31                        ins
    /  230F                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  230F                           IF CONT_M > 0
    /  230F 31                        ins
    /  2310                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2310                           IF CONT_M > 0
    /  2310 31                        ins
    /  2311                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2311                           IF CONT_M > 0
    /  2311 31                        ins
    /  2312                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2312                           IF CONT_M > 0
    /  2312 31                        ins
    /  2313                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2313                           ENDIF
    /  2313                           ENDIF
    /  2313                           ENDIF
    /  2313                           ENDIF
    /  2313                           ENDIF
    /  2313                           ENDIF
  424  2313                           %RESTORE
    /  2313 1838                      puly
    /  2315 38                        pulx
    /  2316 33                        pulb
    /  2317 32                        pula
  425  2318 39                        rts
  426                 
  427                 *====================================================================================
  428                 * Subrutina "MIRROR"
  429                 *
  430                 * Descripción:  Esta subrutina copia el contenido de las posiciones de un array fuente
  431                 *               a un espacio de memoria destino.
  432                 * Parámetros de entrada:
  433                 *               - Dirección de comienzo de array FUENTE
  434                 *               - Número de arreglo contenido en otro arreglo (número de jugador)(0 en adelante)
  435                 *               - Dirección de DESTINO de la copia 
  436                 *               - Número de posiciones a copiar (un byte, hasta 255 posiciones.)
  437                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  438                 *
  439                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  440                 *       Se destruirá el dato de la dirección del array de origen.
  441                 *               
  442                 * Parámetros de salida: NINGUNO
  443                 *       
  444                 *
  445                 * Consideraciones:
  446                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  447                 *
  448                 *====================================================================================
  449                 
  450  2319           mirror          EQU             *       
  451                         
  452  2319                           %BACKUP
    /  2319 36                        psha
    /  231A 37                        pshb
    /  231B 3C                        pshx
    /  231C 183C                      pshy
  453  231E 30                        tsx                             ;creo frame pointer
  454  231F A60B                      ldaa            11,x            ;cargo número de jugador
  455  2321 E608                      ldab            8,x             ;cargo longitud de la copia (del array a copiar)
  456  2323 3D                        mul                             ;obtengo offset de jugador
  457  2324 E30C                      addd            12,x            ;sumo offset de jugador
  458  2326 ED0C                      std             12,x            ;guardo la dirección con offset del array fuente
  459                 
  460  2328 A60C                      ldaa            12,x            ;cargo longitud de copia en contador
  461  232A 2710                      beq             mi_end          ;si es cero, vuelvo desde subrutina
  462  232C 1AEE09                    ldy             9,x             ;cargo índice a destino de la copia.
  463  232F EE0C                      ldx             12,x            ;cargo índice a array origen de copia.
  464                 
  465  2331           mi_loop         EQU             *
  466                 
  467  2331 E600                      ldab            0,x             ;cargo byte a copiar
  468  2333 18E700                    stab            0,y             ;copio byte en destino
  469  2336 08                        inx                             ;siguiente byte
  470  2337 1808                      iny                             ;siguiente byte
  471  2339 4A                        deca                            ;decremento contador
  472  233A 26F5                      bne             mi_loop
  473                 
  474  233C           mi_end          EQU             *
  475                 
  476  233C                           %RESTORE
    /  233C 1838                      puly
    /  233E 38                        pulx
    /  233F 33                        pulb
    /  2340 32                        pula
  477                         
  478  2341 39                        rts     
  479                                 
  480                                                 
  481                 *====================================================================================
  482                 * Subrutina "FETCHPOS"
  483                 *
  484                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  485                 *               determinada posición, y devuelve el byte que se encuentra
  486                 *               en esa posición por stack. Subrutina limitada a longitud
  487                 *               de elementos del array de un byte.
  488                 *
  489                 * Parámetros de entrada:
  490                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  491                 *               - COLUMNA del array (en HEX)
  492                 *               - Dirección de comienzo del arreglo (2 bytes)
  493                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  494                 *
  495                 *       Todos los parámetros se reciben por stack en el orden indicado.
  496                 *       Se destruirá el dato del índice al arreglo.
  497                 *               
  498                 * Parámetros de salida:
  499                 *               - Byte encontrado en esa posición (se devuelve por stack)
  500                 *
  501                 *
  502                 * Consideraciones:
  503                 *               - Antes de recuperar el byte en stack se debe normalizar el mismo
  504                 *                 en 4 posiciones (4 bytes)
  505                 *               - Requiere definición de constante "ARRAY_L"
  506                 *
  507                 *====================================================================================
  508                 
  509  2342           fetchpos        EQU             *
  510                 
  511  2342                           %BACKUP
    /  2342 36                        psha
    /  2343 37                        pshb
    /  2344 3C                        pshx
    /  2345 183C                      pshy
  512  2347 30                        tsx                             ;creo frame pointer
  513  2348 A608                      ldaa            8,x             ;cargo numero de jugador
  514  234A C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  515  234C 3D                        mul                             ;obtengo offset de jugador
  516  234D E309                      addd            9,x             ;sumo offset de jugador a top of array
  517  234F ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  518                 
  519  2351 A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  520  2353 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  521  2355 10                        sba                             ;obtengo numero de fila
  522  2356 C606                      ldab            #COL            ;cargo longitud de fila
  523  2358 3D                        mul                             ;obtengo offset de fila
  524  2359 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  525  235B ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  526                 
  527  235D E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  528  235F 5A                        decb                            ;normalizo offset de columna
  529  2360 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  530  2361 E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  531  2363 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  532                 
  533  2365 1AEE09                    ldy             9,x             ;cargo en IY la dirección del byte que se desea obtener
  534  2368 18A600                    ldaa            0,y             ;cargo el byte a devolver en AccA
  535  236B A70C                      staa            12,x            ;guardo el byte a devolver en stack
  536  236D                           %RESTORE
    /  236D 1838                      puly
    /  236F 38                        pulx
    /  2370 33                        pulb
    /  2371 32                        pula
  537                                 
  538  2372 39                        rts
  539                                 
  540                                 
  541                 
  542                 *====================================================================================
  543                 * Subrutina "WRITEPOS"
  544                 *
  545                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  546                 *               determinada posición, y escribe en la misma un byte de
  547                 *               datos que será recibido como parámetro de entrada por stack.
  548                 *
  549                 * Parámetros de entrada:
  550                 *               - BYTE a escribir en la posición indicada
  551                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  552                 *               - COLUMNA del array (en HEX)
  553                 *               - Dirección de comienzo del arreglo (2 bytes)
  554                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  555                 *
  556                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  557                 *       Se destruirá el dato del índice al arreglo.
  558                 *               
  559                 * Parámetros de salida: NINGUNO
  560                 *       
  561                 *
  562                 * Consideraciones:
  563                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  564                 *               - Requiere definición de constante "ARRAY_L"
  565                 *
  566                 *====================================================================================
  567                 
  568  2373           writepos        EQU             *
  569                 
  570  2373                           %BACKUP
    /  2373 36                        psha
    /  2374 37                        pshb
    /  2375 3C                        pshx
    /  2376 183C                      pshy
  571  2378 30                        tsx                             ;creo frame pointer
  572  2379 A608                      ldaa            8,x             ;cargo numero de jugador
  573  237B C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  574  237D 3D                        mul                             ;obtengo offset de jugador
  575  237E E309                      addd            9,x             ;sumo offset de jugador a top of array
  576  2380 ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  577                 
  578  2382 A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  579  2384 C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  580  2386 10                        sba                             ;obtengo numero de fila
  581  2387 C606                      ldab            #COL            ;cargo longitud de fila
  582  2389 3D                        mul                             ;obtengo offset de fila
  583  238A E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  584  238C ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  585                 
  586  238E E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  587  2390 5A                        decb                            ;normalizo offset de columna
  588  2391 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  589  2392 E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  590  2394 ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  591                 
  592  2396 1AEE09                    ldy             9,x             ;cargo en IY la dirección donde se desea escribir
  593  2399 A60D                      ldaa            13,x            ;cargo en AccA el byte que se quiere escribir en el arreglo
  594  239B 18A700                    staa            0,y             ;escribo el byte sobre el arreglo
  595  239E                           %RESTORE
    /  239E 1838                      puly
    /  23A0 38                        pulx
    /  23A1 33                        pulb
    /  23A2 32                        pula
  596                                 
  597  23A3 39                        rts
  598                 *====================================================================================
  599                 * Subrutina "PLAY_SRC"
  600                 *
  601                 * Descripción:  Esta subrutina busca dos bytes consecutivos (posicion jugada) dentro de un arreglo.
  602                 *               El valor $00 podrá estar en el array solo como terminador
  603                 * Parámetros de entrada:
  604                 *               - Byte1 a buscar (en este caso, n° fila)
  605                 *               - Byte2 a buscar (en este caso, n° columna)
  606                 *               - Dirección de inicio del array
  607                 *               - Número de jugador (0 o mayor)
  608                 *
  609                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  610                 *               
  611                 * Parámetros de salida:
  612                 *               - Carry en 1, si se encontró la posición.
  613                 *       
  614                 *
  615                 * Consideraciones:
  616                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones antes de
  617                 *                 recuperar el parámetro de salida.
  618                 *
  619                 *====================================================================================
  620                 
  621  23A4           play_src        EQU             *               
  622                                         
  623  23A4                           %BACKUP
    /  23A4 36                        psha
    /  23A5 37                        pshb
    /  23A6 3C                        pshx
    /  23A7 183C                      pshy
  624  23A9 30                        tsx                             ;creo frame pointer
  625  23AA A608                      ldaa            8,x             ;cargo número de array (jugador)
  626  23AC C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  627  23AE 3D                        mul                             ;obtengo offset de jugador
  628  23AF E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  629  23B1 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  630                 
  631  23B3           ps_loop         EQU             *
  632                 
  633  23B3 18A600                    ldaa            0,y             ;cargo byte1 a comparar
  634  23B6 2718                      beq             ps_ntfnd        ;si encontré el terminador, el valor requerido no está en el array
  635                 
  636  23B8 A10C                      cmpa            12,x            ;comparo con el byte1 a buscar
  637  23BA 2706                      beq             ps_next         ;si coinciden, busco el byte 2
  638  23BC 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  639  23BE 1808                      iny
  640  23C0 20F1                      bra             ps_loop         ;vuelvo a comparar
  641                 
  642  23C2           ps_next         EQU             *
  643                 
  644  23C2 18E601                    ldab            1,y             ;cargo byte a continuación del anterior
  645  23C5 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  646  23C7 1808                      iny
  647  23C9 E10B                      cmpb            11,x            ;comparo con byte2
  648  23CB 26E6                      bne             ps_loop         ;si no son iguales, sigo buscando
  649  23CD 0D                        sec                             ;set del carry para informar que se encontró el valor
  650  23CE 2001                      bra             ps_end
  651                                         
  652  23D0           ps_ntfnd        EQU             *
  653                 
  654  23D0 0C                        clc                             ;carry en 0 para informar que no se encontró el valor
  655                 
  656  23D1           ps_end          EQU             *
  657                                 
  658  23D1                           %RESTORE
    /  23D1 1838                      puly
    /  23D3 38                        pulx
    /  23D4 33                        pulb
    /  23D5 32                        pula
  659                 
  660  23D6 39                        rts
  661                 
  662                 
  663                 
  664                                         
  665                 
  666                                         
  667                 
  668                 *====================================================================================
  669                 * Subrutina "PLAY_CNT"
  670                 *
  671                 * Descripción:  Esta subrutina cuenta la cantidad de datos de dos bytes que se encuentran en una
  672                 *               determinada zona de memoria configurada como array. Se supone que $00 no es un dato presente en dicho array, 
  673                 *               usándose solamente como terminador del mismo.
  674                 *
  675                 * Parámetros de entrada:
  676                 *               - Dirección de inicio del array
  677                 *               - Número de jugador (0 o mayor)
  678                 *
  679                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  680                 *               
  681                 * Parámetros de salida:
  682                 *               - Cantidad de datos de dos bytes encontrados, por stack (máximo 255 datos).
  683                 *       
  684                 *
  685                 * Consideraciones:
  686                 *               - Luego de invocada, se debe normalizar el stack en 2 posiciones antes de
  687                 *                 recuperar el parámetro de salida.
  688                 *
  689                 *====================================================================================
  690                 
  691  23D7           play_cnt        EQU             *
  692                 
  693  23D7                           %BACKUP
    /  23D7 36                        psha
    /  23D8 37                        pshb
    /  23D9 3C                        pshx
    /  23DA 183C                      pshy
  694  23DC 30                        tsx                             ;creo frame pointer
  695  23DD A608                      ldaa            8,x             ;cargo número de array (jugador)
  696  23DF C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  697  23E1 3D                        mul                             ;obtengo offset de jugador
  698  23E2 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  699  23E4 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  700  23E6 4F                        clra                            ;inicializo contador
  701                                         
  702  23E7           pc_loop         EQU             *               
  703                                         
  704  23E7 18E600                    ldab            0,y             ;cargo byte a comparar
  705  23EA 2707                      beq             pc_end          ;si es terminador, terminé de buscar
  706  23EC 1808                      iny                             ;si no es terminador, me posiciono sobre siguiente dato de 
  707  23EE 1808                      iny                             ;2 bytes
  708  23F0 4C                        inca                            ;incremento contador
  709  23F1 20F4                      bra             pc_loop         ;vuelvo a comparar
  710                                         
  711  23F3           pc_end          EQU             *       
  712                                         
  713  23F3 A70A                      staa            10,x            ;devuelvo valor por stack
  714  23F5                           %RESTORE
    /  23F5 1838                      puly
    /  23F7 38                        pulx
    /  23F8 33                        pulb
    /  23F9 32                        pula
  715                                 
  716  23FA 39                        rts
  717                 
  718                 
  719                 *====================================================================================
  720                 * Subrutina "PLAY_WRT"
  721                 *
  722                 * Descripción:  Esta subrutina escribe dos bytes distintos (en este caso, la posición 
  723                 *               jugada, compuesta de una letra y un número) en la primera posición "libre"
  724                 *               de un array y en la siguiente. La subrutina escribirá los datos desde la primera posición con ceros
  725                 *               que encuentre en el array, por lo que el mismo NO podrá contener el dato "$00" en ninguno
  726                 *               de sus bytes, caso contrario la subrutina lo interpretará como vacío y sobreescribirá información. Se
  727                 *               supone que el array tendrá por lo menos, dos posiciones libres.
  728                 *
  729                 * Parámetros de entrada:
  730                 *               - Primer byte a escribir (en este caso, fila jugada)
  731                 *               - Byte a escribir a continuación del primero (en este caso, columna jugada)
  732                 *               - Dirección de inicio del array en el que se va a escribir
  733                 *               - Número de jugador (0 o mayor)
  734                 *
  735                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  736                 *               
  737                 * Parámetros de salida: NINGUNO
  738                 *       
  739                 *
  740                 * Consideraciones:
  741                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones
  742                 *
  743                 *====================================================================================
  744                 
  745  23FB           play_wrt        EQU             *
  746                 
  747  23FB                           %BACKUP
    /  23FB 36                        psha
    /  23FC 37                        pshb
    /  23FD 3C                        pshx
    /  23FE 183C                      pshy
  748  2400 30                        tsx                             ;creo frame pointer
  749  2401 A608                      ldaa            8,x             ;cargo número de array (jugador)
  750  2403 C613                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  751  2405 3D                        mul                             ;obtengo offset de jugador
  752  2406 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  753  2408 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  754                 
  755                 
  756  240A           pw_loop         EQU             *
  757                 
  758  240A 18A600                    ldaa            0,y             ;cargo byte del array
  759  240D 2704                      beq             pw_end          ;si es cero, entonces escribo los datos
  760  240F 1808                      iny                             ;si no es cero, me posiciono sobre la siguiente posición
  761  2411 20F7                      bra             pw_loop         ;vuelvo a buscar ceros
  762                 
  763  2413           pw_end          EQU             *
  764                 
  765  2413 A60C                      ldaa            12,x            ;cargo primer byte a escribir
  766  2415 18A700                    staa            0,y             ;guardo primer byte en memoria
  767  2418 1808                      iny                             ;me posiciono en el siguiente byte
  768  241A A60B                      ldaa            11,x            ;cargo segundo byte a escribir
  769  241C 18A700                    staa            0,y             ;guardo segundo byte en memoria
  770  241F                           %RESTORE
    /  241F 1838                      puly
    /  2421 38                        pulx
    /  2422 33                        pulb
    /  2423 32                        pula
  771                 
  772  2424 39                        rts
  773                 
  774                 ***************************************************************************************
  775                 *Subrutina "CLRZONE"
  776                 *Función: "borra" (guarda ceros) una determinada zona de memoria.
  777                 *         
  778                 *
  779                 * Parámetros de entrada: -Dirección de comienzo de sección a borrar (por stack)
  780                 *                        -Longitud de zona de memoria (por stack)
  781                 *                       
  782                 *
  783                 * Parámetros de salida: Ninguno
  784                 *
  785                 * consideraciones: 
  786                 *                  - Incluir macros "%BACKUP" y "%RESTORE".
  787                 *                                       
  788                 *************************************************************************************** 
  789  2425           clrzone         EQU     *
  790                 
  791  2425                           %BACKUP                         ;backup de registros en stack
    /  2425 36                        psha
    /  2426 37                        pshb
    /  2427 3C                        pshx
    /  2428 183C                      pshy
  792                 
  793  242A 30                        tsx
  794  242B A608                      ldaa    8,x                     ;cargo contador con longitud de zona a borrar
  795  242D EE09                      ldx     9,x                     ;cargo puntero zona de memoria a borrar
  796  242F D600                      ldab    $00                     ;cargo el cero
  797  2431           clr_loop        EQU     *
  798  2431 E700                      stab    0,x                     ;guardo caracter en posicion del array
  799  2433 08                        inx                             ;siguiente posición     
  800  2434 4A                        deca                            ;decremento contador
  801  2435 26FA                      bne     clr_loop                ;si no es cero, escribo en la posición siguiente.
  802                 
  803  2437                           %RESTORE                        :restauro backup en registros
    /  2437 1838                      puly
    /  2439 38                        pulx
    /  243A 33                        pulb
    /  243B 32                        pula
  804                 
  805  243C 39                        rts
  806                 
  807                 *---------------------------------------
  808                 * WhoPlays: subrutina para ver que 
  809                 *           jugador juega
  810                 *---------------------------------------
  811                 
  812  243D           whoplays        EQU             *
  813                 
  814  243D BD24FA    wait_ply        jsr             read_kb
  815  2440 4D                        tsta
  816  2441 2BFA                      bmi             wait_ply
  817  2443 8103                      cmpa            #B_P1
  818  2445 2708                      beq             play_p1
  819  2447 8107                      cmpa            #B_P2
  820  2449 26F2                      bne             wait_ply
  821  244B 8600                      ldaa            #P1
  822  244D 2002                      bra             ply_end
  823                 
  824  244F 8601      play_p1         ldaa            #P2
  825  2451 39        ply_end         rts             
  826                 
  827                 *---------------------------------------
  828                 * Input: subrutina que devuelve
  829                 *        entrada para la batalla naval
  830                 * AccA: Fila de la posicion jugada
  831                 * AccB: Columna de la posicion jugada
  832                 *---------------------------------------
  833                 
  834  2452           input           EQU             *
  835                 
  836                 * back up de registros
  837  2452 3C                        pshx
  838  2453 183C                      pshy
  839                 
  840                 * creo variables locales
  841  2455 36                        psha
  842  2456 36                        psha
  843  2457 36                        psha
  844                 
  845                 * inicializo framepointer
  846  2458 1830                      tsy
  847                 
  848                 * prendo el led
  849  245A                           %LED_INV
    /  245A B61000                    ldaa            PORTA
    /  245D 8840                      eora            #SHF_LED
    /  245F B71000                    staa            PORTA
  850                 
  851                 * inicializo el contador
  852  2462 8603      inp_rest        ldaa            #INPUTS
  853  2464 18A700                    staa            CONT,Y
  854                                 
  855                 * limpio el display
  856  2467 CE41F9                    ldx             #string
  857  246A 8604                      ldaa            #4
  858  246C C620                      ldab            #ESP
  859  246E BD25C4                    jsr             clrarray
  860                 
  861  2471 BD25B3                    jsr             clr_dis
  862                 
  863  2474 86FF                      ldaa            #$FF
  864  2476 B741F8                    staa            buffer
  865                 
  866                 * lectura de teclado
  867  2479 BD24FA    wait_kb         jsr             read_kb
  868  247C 4D                        tsta
  869  247D 2BFA                      bmi             wait_kb
  870  247F B141F8                    cmpa            buffer
  871  2482 27F5                      beq             wait_kb
  872  2484 B741F8                    staa            buffer
  873                                 
  874  2487 810F                      cmpa            #B_reset
  875  2489 27D7                      beq             inp_rest
  876                 
  877  248B 186A00                    dec             CONT,Y
  878  248E 2727                      beq             chk_fire
  879  2490 36                        psha
  880  2491 CE41FE                    ldx             #kb_value
  881  2494 16                        tab
  882  2495 3A                        abx
  883  2496 A600                      ldaa            0,X             
  884  2498 183C                      pshy
  885  249A 18E600                    ldab            CONT,Y
  886  249D 183A                      aby
  887  249F 18A700                    staa            0,Y
  888  24A2 1838                      puly
  889                 
  890  24A4 33                        pulb
  891  24A5 BD25A3                    jsr             to_ascii
  892  24A8 17                        tba
  893                                 
  894  24A9 CE41F9                    ldx             #string
  895  24AC BD2593                    jsr             sh_value
  896                 
  897  24AF CE41F9                    ldx             #string
  898  24B2 BD24E6                    jsr             show
  899                 
  900  24B5 20C2                      bra             wait_kb
  901                 
  902  24B7 810B      chk_fire        cmpa            #B_fire
  903  24B9 26A7                      bne             inp_rest
  904  24BB 18A602                    ldaa            FILA_L,Y
  905  24BE 810A                      cmpa            #MIN_FIL
  906  24C0 25A0                      blo             inp_rest
  907  24C2 810F                      cmpa            #MAX_FIL
  908  24C4 229C                      bhi             inp_rest
  909  24C6 18A601                    ldaa            COL_L,Y
  910  24C9 8101                      cmpa            #MIN_COL
  911  24CB 2595                      blo             inp_rest
  912  24CD 8106                      cmpa            #MAX_COL
  913  24CF 2291                      bhi             inp_rest
  914                 
  915                 * apago el led
  916  24D1                           %LED_INV
    /  24D1 B61000                    ldaa            PORTA
    /  24D4 8840                      eora            #SHF_LED
    /  24D6 B71000                    staa            PORTA
  917                 
  918                 * libero variables locales
  919  24D9 32                        pula
  920  24DA 32                        pula
  921  24DB 32                        pula
  922                 
  923  24DC 18A602    return          ldaa            FILA_L,Y
  924  24DF 18E601                    ldab            COL_L,Y         
  925                 
  926                 * restore de registros
  927  24E2 1838                      puly
  928  24E4 38                        pulx
  929                 
  930  24E5 39                        rts
  931                 
  932                 *------------------------------------
  933                 * Show: Por IX direccion de string de
  934                 *       4 caracteres para imprimir
  935                 *------------------------------------
  936                 
  937  24E6           show            EQU             *
  938                 
  939                 * back up de registros
  940  24E6 3C                        pshx
  941  24E7 37                        pshb
  942  24E8 36                        psha
  943                 
  944                 * inicializo contador de posiciones
  945  24E9 C604                      ldab            #LENGTH
  946                                 
  947                 * loop para enviar a cada posicion
  948  24EB 5A        sh_loop         decb
  949  24EC 2B08                      bmi             sh_end          ; si no pase por todas las posiciones
  950  24EE A600                      ldaa            0,X             ; tomo del string el caracter
  951  24F0 BD25AC                    jsr             outchar         ; y lo imprimo en la posicion actual
  952  24F3 08                        inx
  953  24F4 20F5                      bra             sh_loop
  954                 
  955                 * restore de registros                          
  956  24F6 32        sh_end          pula
  957  24F7 33                        pulb
  958  24F8 38                        pulx
  959  24F9 39                        rts
  960                 
  961                 *----------------------------------------------
  962                 * read_kb: AccA: tecla presionada
  963                 *          o -1
  964                 *----------------------------------------------
  965                 
  966  24FA           read_kb         EQU             *
  967                 
  968                 * back up de registros
  969  24FA 3C                        pshx
  970  24FB 37                        pshb
  971                 
  972                 * creo espacio para variables locales
  973  24FC                           %MALLOC         1               ; variable mascara de filas
    /  24FC                           IF 1 > 0
    /  24FC 30                        tsx
    /  24FD 8F                        xgdx
    /  24FE 830001                    subd    #1
    /  2501 8F                        xgdx
    /  2502 35                        txs
    /  2503                           ENDIF
  974  2503                           %MALLOC         1               ; variable mascara de columnas
    /  2503                           IF 1 > 0
    /  2503 30                        tsx
    /  2504 8F                        xgdx
    /  2505 830001                    subd    #1
    /  2508 8F                        xgdx
    /  2509 35                        txs
    /  250A                           ENDIF
  975  250A                           %MALLOC         1               ; variable contador de columnas
    /  250A                           IF 1 > 0
    /  250A 30                        tsx
    /  250B 8F                        xgdx
    /  250C 830001                    subd    #1
    /  250F 8F                        xgdx
    /  2510 35                        txs
    /  2511                           ENDIF
  976  2511                           %MALLOC         1               ; variable contador de tecla
    /  2511                           IF 1 > 0
    /  2511 30                        tsx
    /  2512 8F                        xgdx
    /  2513 830001                    subd    #1
    /  2516 8F                        xgdx
    /  2517 35                        txs
    /  2518                           ENDIF
  977                 
  978                 * inicializacion de variables
  979  2518 30                        tsx                             ; framepointer para acceder a locales
  980  2519 C604                      ldab            #LENGTH         ; contador de fila
  981  251B 860E                      ldaa            #FIL0           ; mascara para la fila cero
  982  251D A703                      staa            MASK_FIL,X      
  983  251F 8610                      ldaa            #COL0           ; mascara para la columna cero
  984  2521 A702                      staa            MASK_COL,X
  985  2523 4F                        clra                            ; contador de columna
  986  2524 A701                      staa            COL_CONT,X
  987  2526 A700                      staa            KB_PRESS,X      ; variable con numero de tecla
  988                 
  989                 * loop para barrer y mirar teclado matricial
  990  2528 86FF      kb_loop         ldaa            #NONE
  991  252A 5A                        decb                            
  992  252B 2B2C                      bmi             kb_end          ; me fijo si recorrio todas las filas
  993  252D A603                      ldaa            MASK_FIL,X      ; enmascaro la siguiente fila
  994  252F B71003                    staa            ROWS
  995  2532 0D                        sec                             ; carry para rotacion de byte
  996  2533 49                        rola                            
  997  2534 A703                      staa            MASK_FIL,X      ; cambio variable mascara para la proxima fila
  998                 
  999  2536 8604                      ldaa            #LENGTH
 1000  2538 A701                      staa            COL_CONT,X
 1001  253A 8610                      ldaa            #COL0           ; inicializo variable para barrer
 1002  253C A702                      staa            MASK_COL,X      ; la columna
 1003                 
 1004  253E 6A01      kb_col          dec             COL_CONT,X      ; me fijo si barrio todas las columnas
 1005  2540 2BE6                      bmi             kb_loop
 1006  2542 B61005                    ldaa            COLS            ; leo el puerto de columnas
 1007  2545 A402                      anda            MASK_COL,X      ; enmascaro columna
 1008  2547 2707                      beq             kb_hit          ; si es nulo apretaron un boton
 1009  2549 48                        lsla                            ; cambio mascara para proxima columna
 1010  254A A702                      staa            MASK_COL,X
 1011  254C 6C00                      inc             KB_PRESS,X      ; incremento numero de tecla
 1012  254E 20EE                      bra             kb_col
 1013                 
 1014  2550 A600      kb_hit          ldaa            KB_PRESS,X      ; apretaron una tecla, lo comparo
 1015  2552 B141F7                    cmpa            kb_buff         ; con la que fue apretada antes
 1016  2555 2602                      bne             kb_end          ; aviso por led
 1017                 
 1018  2557 86FF      kb_none         ldaa            #NONE           ; en caso de que no apreten nada
 1019                 
 1020  2559 B741F7    kb_end          staa            kb_buff         ; actualizo variable
 1021                                         
 1022                 * elimino variables locales
 1023  255C                           %RELMEM         1
    /  255C                           IF 1 > 0
    /  255C 30                        tsx
    /  255D 8F                        xgdx
    /  255E C30001                    addd    #1
    /  2561 8F                        xgdx
    /  2562 35                        txs
    /  2563                           ENDIF           
 1024  2563                           %RELMEM         1
    /  2563                           IF 1 > 0
    /  2563 30                        tsx
    /  2564 8F                        xgdx
    /  2565 C30001                    addd    #1
    /  2568 8F                        xgdx
    /  2569 35                        txs
    /  256A                           ENDIF           
 1025  256A                           %RELMEM         1
    /  256A                           IF 1 > 0
    /  256A 30                        tsx
    /  256B 8F                        xgdx
    /  256C C30001                    addd    #1
    /  256F 8F                        xgdx
    /  2570 35                        txs
    /  2571                           ENDIF           
 1026  2571                           %RELMEM         1
    /  2571                           IF 1 > 0
    /  2571 30                        tsx
    /  2572 8F                        xgdx
    /  2573 C30001                    addd    #1
    /  2576 8F                        xgdx
    /  2577 35                        txs
    /  2578                           ENDIF           
 1027                 
 1028                 * restore de registros
 1029  2578 33                        pulb
 1030  2579 38                        pulx
 1031                                 
 1032  257A 39                        rts
 1033                 
 1034                 *----------------------------------------------
 1035                 * init_kb: subrutina para inicializar teclado
 1036                 *----------------------------------------------
 1037                 
 1038  257B           init_kb         EQU             *
 1039                 
 1040                 * back up de registros
 1041  257B 36                        psha
 1042                 
 1043                 * inicializacion de teclado             
 1044  257C 86FF                      ldaa            #NONE
 1045  257E B741F7                    staa            kb_buff
 1046                 
 1047                 * restore de registros
 1048  2581 32                        pula
 1049  2582 39                        rts
 1050                 
 1051                 *--------------------------------
 1052                 * Inicializa display (y teclado)
 1053                 *--------------------------------
 1054                 
 1055  2583           initdis         EQU             *
 1056                         
 1057  2583 36                        psha
 1058                 
 1059  2584 860F                      ldaa            #$0F       ;set for input/output
 1060  2586 B71007                    staa            DDRC       ;C output
 1061  2589 B61002                    ldaa            PIOC       ;get current value
 1062  258C 84FE                      anda            #$FE       ;reset bit 0 to 0
 1063  258E B71002                    staa            PIOC       ;send it out
 1064                         
 1065  2591 32                        pula
 1066  2592 39                        rts
 1067                 
 1068                 *--------------------------------------------------------------
 1069                 * sh_value: toma un string, desplaza los caracteres a izquierda
 1070                 *           y agrega un nuevo caracter
 1071                 *           IX: direccion del string
 1072                 *           AccA: nuevo valor
 1073                 *--------------------------------------------------------------
 1074                 
 1075  2593           sh_value        EQU             *
 1076                 
 1077                 * back up de registros
 1078  2593 3C                        pshx
 1079  2594 37                        pshb
 1080                 
 1081                 * loop para desplazar caracteres
 1082  2595 E601      v_loop          ldab            1,X             ;tomo elemento siguiente en string
 1083  2597 2705                      beq             v_end
 1084  2599 E700                      stab            0,X             ;y lo guardo en posicion actual
 1085  259B 08                        inx
 1086  259C 20F7                      bra             v_loop          
 1087                 
 1088  259E A700      v_end           staa            0,X             ;ingresa nuevo caracter en cadena desplazada
 1089                 
 1090                 * restore de registros
 1091  25A0 33                        pulb
 1092  25A1 38                        pulx
 1093  25A2 39                        rts
 1094                 
 1095                 *----------------------------------------------
 1096                 * toAscii: toma numero de boton del teclado
 1097                 *          y devuelve su correspondiente en
 1098                 *          ascii
 1099                 *          toma  AccB: valor del boton
 1100                 *          devuelve AccB: ascii
 1101                 *----------------------------------------------
 1102                 
 1103  25A3           to_ascii        EQU             *
 1104                 
 1105                 * back up de registros
 1106  25A3 3C                        pshx
 1107                 
 1108                 * inicializacion de variables
 1109  25A4 CE420D                    ldx             #kb_ascii       ; apunto a string con caracteres asignados por tecla
 1110  25A7 3A                        abx                             ; me muevo en string con indice y recupero segun tecla presionada
 1111  25A8 E600                      ldab            0,X             
 1112                 
 1113                 * restore de registros
 1114  25AA 38                        pulx
 1115  25AB 39                        rts
 1116                 
 1117                 *--------------------------------
 1118                 *Outchar: ACCA: Carácter a enviar
 1119                 *           ACCB: Posición (0-3)
 1120                 *--------------------------------
 1121  25AC           outchar         EQU             *
 1122                         
 1123  25AC F71005                    stab            PORTCL          ;set the position 
 1124  25AF B71004                    staa            PORTB           ;set the character
 1125                         
 1126  25B2 39                        rts
 1127                 
 1128                 *-------------------------
 1129                 * clr_dis: Limpia display
 1130                 *-------------------------
 1131                 
 1132  25B3           clr_dis         EQU             *
 1133                 
 1134                 * hago back up de registros
 1135  25B3 37                        pshb
 1136  25B4 36                        psha
 1137                 
 1138                 * inicializo el contador de posiciones
 1139  25B5 C604                      ldab            #LENGTH
 1140                 
 1141                 * loop para limpiar cada posicion
 1142  25B7 5A        clrloop         decb
 1143  25B8 2B07                      bmi             clr_end         ; si no pase por todas las posiciones
 1144  25BA 8620                      ldaa            #ESP            ; cargo en esta posicion espacio blanco
 1145  25BC BD25AC                    jsr             outchar         ; y lo envio
 1146  25BF 20F6                      bra             clrloop         
 1147                 
 1148                 * restore de registros
 1149  25C1 32        clr_end         pula
 1150  25C2 33                        pulb
 1151  25C3 39                        rts
 1152                 
 1153                 *-------------------------------------------------------
 1154                 * clrarray: subrutina para limpiar un array dado
 1155                 * parametros: IX direccion del array
 1156                 *             AccA cantidad de elementos del array
 1157                 *             AccB caracter a poner
 1158                 *-------------------------------------------------------
 1159                 
 1160  25C4           clrarray        EQU             *
 1161                                 
 1162  25C4 4A        cra_loop        deca                            ;contador con cantidad de elementos a limpiar
 1163  25C5 2705                      beq             cra_end
 1164  25C7 E700                      stab            0,X             ;reemplazar elemento por caracter a poner
 1165  25C9 08                        inx
 1166  25CA 20F8                      bra             cra_loop
 1167                                 
 1168  25CC E700      cra_end         stab            0,X
 1169  25CE 39                        rts
 1170                 
 1171                 *************
 1172                 * VARIABLES *
 1173                 *************
 1174                 ***STACK***
 1175  4000                           ORG             $4000
 1176  4000           stack           RMB             500
 1177  41F3           STACKP          EQU             *-1
 1178                 
 1179                 ***MAIN VARIABLES***
 1180  41F4           player          RMB             1               ;variable de jugador
 1181  41F5           letra_p         RMB             1
 1182  41F6           num_p           RMB             1
 1183                 
 1184                 ***KEYBOARD VARIABLES***
 1185  41F7           kb_buff         RMB             1
 1186  41F8           buffer          RMB             1
 1187                 
 1188  41F9 20202020  string          FCC             '    '
 1189  41FD 00                        FCB             0
 1190                 
 1191  41FE 0A0B0C00  kb_value        FCB             10,11,12,0,13,14,15,0,1,2,3,0,4,5,6
       4202 0D0E0F00
       4206 01020300
       420A 040506
 1192                 
 1193  420D 41424320  kb_ascii        FCC             'ABC DEF 123 456'
       4211 44454620
       4215 31323320
       4219 343536
 1194                 
 1195                 ***ARREGLO DE BARCOS TOCADOS***
 1196  0003           SUB             EQU             3
 1197  0003           CAR             EQU             3
 1198  0002           EL_SIZE         EQU             2
 1199  0009           CANTIDAD        EQU             SUB*1+CAR*2
 1200  0013           HITSIZE         EQU             EL_SIZE*CANTIDAD+1
 1201  421C           hitlist         RMB             HITSIZE*2
 1202                 
 1203                 ***MATRICES DE TABLERO DE CADA JUGADOR***
 1204  5000                           ORG             $5000
 1205  5000 83830383  p_board         FCB             SHI_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP,SUB_NP
       5004 0343
 1206  5006 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP
       500A 0303
 1207  500C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5010 0303
 1208  5012 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP
       5016 8383
 1209  5018 43030303                  FCB             SUB_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       501C 0303
 1210  501E 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5022 0303
 1211                 
 1212  5024 03830383                  FCB             WAT_NP,SHI_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5028 8303
 1213  502A 03830303                  FCB             WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       502E 0303
 1214  5030 03030383                  FCB             WAT_NP,WAT_NP,WAT_NP,SHI_NP,SHI_NP,WAT_NP
       5034 8303
 1215  5036 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       503A 0303
 1216  503C 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5040 0303
 1217  5042 03430343                  FCB             WAT_NP,SUB_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP
       5046 0303
 1218                 
 1219                 ***MATRIZ DE DISPLAY***
 1220  5F00                           ORG             $5F00
 1221  5F00 03030303  display         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F04 0303
 1222  5F06 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F0A 0303
 1223  5F0C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F10 0303
 1224  5F12 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F16 0303
 1225  5F18 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F1C 0303
 1226  5F1E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F22 0303
 1227                 
 1228                                 
 1229  5F24                           END

    Errors:  None         ###########
    Bytes:   1630         # main_bn #
    CRC:     D345         ###########

