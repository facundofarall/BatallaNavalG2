################################################################################
#                                                                              #
#    Micro Series 6801 Assembler V2.00/DOS              27/Nov/17  23:20:31    #
#                                                                              #
#       Source   =   main_bn.msa                                               #
#       List     =   main_bn.lst                                               #
#       Object   =   main_bn.r07                                               #
#       Options  =                                                             #
#                                                                              #
#                                               (c) Copyright IAR Systems 1990 #
################################################################################


    1  0000                           p68h11
    2                 $macros.msa
    3                 **********************************
    4                 * definicion de macro utilizados *
    5                 **********************************
    6                 * invocar a la subrutina writepos
    7  0000                   MACRO   %WRITEPOS
    8                                 ldab            \0
    9                                 pshb                            ;se envía el byte a escribir
   10                                 ldab            12,x
   11                                 pshb                            ;se envía letra (fila)
   12                                 ldab            11,x
   13                                 pshb                            ;se envía num (columna)
   14                                 ldy             9,x
   15                                 pshy                            ;se envía dirección de inicio de matriz
   16                                 ldab            8,x
   17                                 pshb                            ;se envía jugador atacado
   18                                 jsr             writepos
   19                                 %CLRST          6
   20  0000                   ENDMAC
   21                 
   22                 * invocar a la subrutina writepos
   23  0000                   MACRO   %PLAY_WRT
   24                                 ldab            12,x
   25                                 pshb                            ;se envía letra (fila)
   26                                 ldab            11,x
   27                                 pshb                            ;se envía num (columna)
   28                                 ldy             14,x
   29                                 pshy                            ;se envía inicio de array
   30                                 ldab            8,x
   31                                 pshb                            ;se envía jugador atacado
   32                                 jsr             play_wrt
   33                                 %CLRST          5
   34  0000                   ENDMAC
   35                 
   36                 * realizar back up de AccA, AccB, IX e IY
   37  0000                   MACRO   %BACKUP
   38                                 psha
   39                                 pshb
   40                                 pshx
   41                                 pshy
   42  0000                   ENDMAC
   43                 
   44                 * realizar restore de AccA, AccB, IX e IY
   45  0000                   MACRO   %RESTORE
   46                                 puly
   47                                 pulx
   48                                 pulb
   49                                 pula
   50  0000                   ENDMAC
   51                 
   52                 * limpiar el stack de datos enviados
   53  0000                   MACRO   %CLRST
   54                 CONT_M          SET     \0
   55                                 IF CONT_M > 0
   56                                 ins
   57                                 %CLRST  CONT_M-1
   58                                 ENDIF
   59  0000                   ENDMAC
   60                 * activar un led en funcion de una variable
   61  0000                   MACRO   %LED_INV
   62                                 ldaa            PORTA
   63                                 eora            #SHF_LED
   64                                 staa            PORTA
   65  0000                   ENDMAC
   66                 
   67                 * declarar o reservar variables locales en subrutinas
   68  0000                   MACRO   %MALLOC
   69                                 IF \0 > 0
   70                                 tsx
   71                                 xgdx
   72                                 subd    #\0
   73                                 xgdx
   74                                 txs
   75                                 ENDIF
   76  0000                   ENDMAC
   77                 
   78                 * liberar espacio de variables en subrutinas
   79  0000                   MACRO   %RELMEM
   80                                 IF \0 > 0
   81                                 tsx
   82                                 xgdx
   83                                 addd    #\0
   84                                 xgdx
   85                                 txs
   86                                 ENDIF           
   87  0000                   ENDMAC
   88                 
   89                 *************
   90                 * CONSTANTS *
   91                 *************
   92  0000           P1              EQU             0
   93  0001           P2              EQU             1
   94  0002           PN              EQU             2               ;cantidad de jugadores
   95                 
   96  0006           MAX_C           EQU             6
   97  0001           MIN_C           EQU             1
   98  000F           MAX_F           EQU             15
   99  000A           MIN_F           EQU             10              
  100                 
  101  0003           WAT_NP          EQU             00000011b
  102  0043           SUB_NP          EQU             01000011b
  103  0083           SHI_NP          EQU             10000011b
  104  0008           WATER           EQU             00001000b       ;verde
  105  0050           SUNK_SUB        EQU             01010000b       ;bordeaux para submarinos
  106  00B0           HIT             EQU             10110000b       ;naranja
  107  0090           SUNK_SHI        EQU             10010000b       ;bordeaux para cargueros
  108                 
  109  0006           FILA            EQU             6
  110  0006           COL             EQU             6
  111  0024           ARRAY_L         EQU             FILA*COL
  112  000A           NORM            EQU             10
  113                 
  114  000A           MIN_FIL         EQU             10
  115  000F           MAX_FIL         EQU             15
  116  0001           MIN_COL         EQU             1
  117  0006           MAX_COL         EQU             6       
  118                 
  119  0000           CONT            EQU             0
  120  0002           FILA_L          EQU             2
  121  0001           COL_L           EQU             1
  122                 
  123  0003           INPUTS          EQU             3
  124                 
  125  FFFF           NONE            EQU             -1
  126  0003           MASK_FIL        EQU             3
  127  0002           MASK_COL        EQU             2
  128  0001           COL_CONT        EQU             1
  129  0000           KB_PRESS        EQU             0
  130                 
  131                 ******* Ports ***************************
  132                 
  133  1007           DDRC            EQU             $1007           ;data direction register for C
  134  1002           PIOC            EQU             $1002           ;for strobe B assertion change
  135  1005           PORTCL          EQU             $1005           ;port C latched
  136  1004           PORTB           EQU             $1004           ;port B
  137  1003           PORTC           EQU             $1003           ;rows
  138  1000           PORTA           EQU             $1000
  139                 
  140  0040           SHF_LED         EQU             $40
  141                 
  142                 ******* Cols and Row Ports **************
  143                 
  144  1003           ROWS            EQU             PORTC           ;outputs
  145  1005           COLS            EQU             PORTCL          ;inputs
  146                 
  147                 ***** Col Mask **************************
  148  0010           COL0            EQU             00010000b
  149                          
  150                 ***** Row Masks *************************
  151                 
  152  000E           FIL0            EQU             00001110b       ;mascaras para manejo de filas
  153  000D           FIL1            EQU             00001101b
  154  000B           FIL2            EQU             00001011b
  155  0007           FIL3            EQU             00000111b
  156                 
  157  0004           LENGTH          EQU             4               ; largo del display
  158                 
  159                 ****** Keyboard Mask ********************
  160  0008           Button_1        EQU             8
  161  0009           Button_2        EQU             9
  162  000A           Button_3        EQU             10
  163  000C           Button_4        EQU             12
  164  000D           Button_5        EQU             13
  165  000E           Button_6        EQU             14              
  166  0000           Button_A        EQU             0       
  167  0001           Button_B        EQU             1
  168  0002           Button_C        EQU             2
  169  0004           Button_D        EQU             4
  170  0005           Button_E        EQU             5
  171  0006           Button_F        EQU             6
  172  000B           B_fire          EQU             11
  173  0003           B_P1            EQU             3
  174  0007           B_P2            EQU             7
  175  000F           B_reset         EQU             15
  176                 
  177  0000           EOT             EQU             0
  178  0020           ESP             EQU             $20     
  179                 
  180                 *========================================================
  181                 * El siguiente es un programa de un juego de batalla
  182                 * naval para dos jugadores en el emulador Wookie FX.
  183                 *========================================================
  184                 
  185                 ****************
  186                 * MAIN PROGRAM *
  187                 ****************
  188                 
  189  2000                           ORG             $2000
  190  2000           init            EQU             *
  191  2000 8E41F3                    lds             #STACKP
  192                 
  193                 * INICIALIZAR DISPLAY Y TECLADO
  194  2003 BD2606                    jsr             initdis         ;inicialización de display 7 seg
  195  2006 BD25FE                    jsr             init_kb         ;inicialización de teclado
  196                 
  197                 * LIMPIAR ARREGLO DE BARCOS ATACADOS
  198  2009 CE4220                    ldx             #hitlist
  199  200C 3C                        pshx                            ;se envía inicio de arreglo de barcos a poner en 0
  200  200D 8636                      ldaa            #(HITSIZE*2)
  201  200F 36                        psha                            ;se envía el tamaño del arreglo a limpiar
  202  2010 BD24A0                    jsr             clrzone
  203  2013                           %CLRST          3
    /  0003           CONT_M          SET     3
    /  2013                           IF CONT_M > 0
    /  2013 31                        ins
    /  2014                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2014                           IF CONT_M > 0
    /  2014 31                        ins
    /  2015                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2015                           IF CONT_M > 0
    /  2015 31                        ins
    /  2016                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
    /  2016                           ENDIF
  204                 
  205                 * DEFINIR CANTIDAD DE BARCOS A UTILIZAR
  206  2016 BD2345                    jsr             def_ships
  207  2019 B641F7                    ldaa            cant_sub        ;se carga cantidad de submarinos
  208  201C F641F8                    ldab            cant_shi        ;se carga cantidad de cargueros
  209  201F 58                        lslb                            ;se multiplica a la cantidad de cargueros por dos, así se obtiene las posiciones atacables
  210  2020 1B                        aba
  211  2021 B741F9                    staa            tot_pos         ;se carga la variable con el total de posiciones atacables
  212                                                 
  213                 
  214  2024           main            EQU             *
  215                 * ELEGIR JUGADOR
  216  2024 BD24B8                    jsr             whoplays        ;se recibirá en AccA el jugador a atacar a continuación
  217  2027 B741F4                    staa            player          ;se habilita la siguiente jugada
  218                 
  219                 * ENVIAR TABLERO DE JUGADOR A ATACAR A DISPLAY
  220  202A CE5000                    ldx             #p_board
  221  202D 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  222  202E B641F4                    ldaa            player
  223  2031 36                        psha                            ;se envía el jugador atacado
  224  2032 CE5F00                    ldx             #display
  225  2035 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  226  2036 8624                      ldaa            #ARRAY_L
  227  2038 36                        psha                            ;se envía el tamaño de la matriz tablero
  228  2039 BD2394                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  229  203C                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  203C                           IF CONT_M > 0
    /  203C 31                        ins
    /  203D                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  203D                           IF CONT_M > 0
    /  203D 31                        ins
    /  203E                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  203E                           IF CONT_M > 0
    /  203E 31                        ins
    /  203F                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  203F                           IF CONT_M > 0
    /  203F 31                        ins
    /  2040                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2040                           IF CONT_M > 0
    /  2040 31                        ins
    /  2041                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2041                           IF CONT_M > 0
    /  2041 31                        ins
    /  2042                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2042                           ENDIF
    /  2042                           ENDIF
    /  2042                           ENDIF
    /  2042                           ENDIF
    /  2042                           ENDIF
    /  2042                           ENDIF
    /  2042                           ENDIF
  230                 
  231                 * INGRESAR POSICIÓN A ATACAR
  232  2042 BD24CD                    jsr             input           ;se llama a la subrutina de interfaz de usuario
  233  2045 B741F5                    staa            letra_p         ;se recibe en AccA la letra jugada (fila) y en AccB el número (columna)
  234  2048 F741F6                    stab            num_p           ;se guarda la jugada
  235                 
  236                 * VERIFICAR QUE NO SEA POSICIÓN DE BARCO YA ATACADA
  237  204B B641F5                    ldaa            letra_p
  238  204E 36                        psha                            ;se envía la letra jugada
  239  204F F641F6                    ldab            num_p
  240  2052 37                        pshb                            ;se envía el número jugado
  241  2053 CE4220                    ldx             #hitlist
  242  2056 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  243  2057 B641F4                    ldaa            player
  244  205A 36                        psha                            ;se envía el jugador a atacar
  245  205B BD241F                    jsr             play_src        ;se recibirá el carry en 1 si la posición corresponde a un barco ya atacado
  246  205E                           %CLRST          5               ;se limpia el stack
    /  0005           CONT_M          SET     5
    /  205E                           IF CONT_M > 0
    /  205E 31                        ins
    /  205F                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  205F                           IF CONT_M > 0
    /  205F 31                        ins
    /  2060                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2060                           IF CONT_M > 0
    /  2060 31                        ins
    /  2061                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2061                           IF CONT_M > 0
    /  2061 31                        ins
    /  2062                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2062                           IF CONT_M > 0
    /  2062 31                        ins
    /  2063                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2063                           ENDIF
    /  2063                           ENDIF
    /  2063                           ENDIF
    /  2063                           ENDIF
    /  2063                           ENDIF
    /  2063                           ENDIF
  247  2063 25BF                      bcs             main            ;si la posición ya fue jugada, se pierde el turno y pasa al siguiente
  248                 
  249                 * MANDAR QUE JUGADOR ESTÁ JUGANDO AL DISPLAY
  250  2065 B641F4                    ldaa            player
  251  2068 36                        psha                            ;se envía el jugador que está siendo atacado
  252  2069 BD2670                    jsr             turn
  253  206C                           %CLRST          1
    /  0001           CONT_M          SET     1
    /  206C                           IF CONT_M > 0
    /  206C 31                        ins
    /  206D                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  206D                           ENDIF
    /  206D                           ENDIF
  254                 
  255                 * BUSCAR EL BYTE ATACADO EN EL TABLERO DEL JUGADOR ATACADO
  256  206D B641F5                    ldaa            letra_p
  257  2070 36                        psha                            ;se envía le letra jugada
  258  2071 F641F6                    ldab            num_p
  259  2074 37                        pshb                            ;se envía el número jugado
  260  2075 CE5000                    ldx             #p_board
  261  2078 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  262  2079 F641F4                    ldab            player
  263  207C 37                        pshb                            ;se envía el jugador a atacar
  264  207D BD23BD                    jsr             fetchpos
  265  2080                           %CLRST          4               ;se limpia el stack
    /  0004           CONT_M          SET     4
    /  2080                           IF CONT_M > 0
    /  2080 31                        ins
    /  2081                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2081                           IF CONT_M > 0
    /  2081 31                        ins
    /  2082                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2082                           IF CONT_M > 0
    /  2082 31                        ins
    /  2083                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2083                           IF CONT_M > 0
    /  2083 31                        ins
    /  2084                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2084                           ENDIF
    /  2084                           ENDIF
    /  2084                           ENDIF
    /  2084                           ENDIF
    /  2084                           ENDIF
  266  2084 32                        pula                            ;se toma del stack el dato del byte jugado
  267                 
  268                 * ATACAR
  269  2085 CE4220                    ldx             #hitlist
  270  2088 3C                        pshx                            ;se envía inicio del arreglo de barcos atacados
  271  2089 36                        psha                            ;se envía el byte a jugado
  272  208A B641F5                    ldaa            letra_p
  273  208D 36                        psha                            ;se envía le letra jugada
  274  208E F641F6                    ldab            num_p
  275  2091 37                        pshb                            ;se envía el número jugado
  276  2092 CE5000                    ldx             #p_board
  277  2095 3C                        pshx                            ;se envía la dirección de inicio de los arreglos de tablero
  278  2096 F641F4                    ldab            player
  279  2099 37                        pshb                            ;se envía el jugador a atacar
  280  209A BD20DD                    jsr             gameplay
  281  209D                           %CLRST          8               ;se limpia el stack
    /  0008           CONT_M          SET     8
    /  209D                           IF CONT_M > 0
    /  209D 31                        ins
    /  209E                           %CLRST  CONT_M-1
    /  0007           CONT_M          SET     CONT_M-1
    /  209E                           IF CONT_M > 0
    /  209E 31                        ins
    /  209F                           %CLRST  CONT_M-1
    /  0006           CONT_M          SET     CONT_M-1
    /  209F                           IF CONT_M > 0
    /  209F 31                        ins
    /  20A0                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20A0                           IF CONT_M > 0
    /  20A0 31                        ins
    /  20A1                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20A1                           IF CONT_M > 0
    /  20A1 31                        ins
    /  20A2                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20A2                           IF CONT_M > 0
    /  20A2 31                        ins
    /  20A3                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20A3                           IF CONT_M > 0
    /  20A3 31                        ins
    /  20A4                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20A4                           IF CONT_M > 0
    /  20A4 31                        ins
    /  20A5                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
    /  20A5                           ENDIF
  282                 
  283                 * ACTUALIZAR DISPLAY CON LA POSICIÓN YA ATACADA
  284  20A5 CE5000                    ldx             #p_board
  285  20A8 3C                        pshx                            ;se envía el inicio de las matrices de tableros
  286  20A9 B641F4                    ldaa            player
  287  20AC 36                        psha                            ;se envía el jugador atacado
  288  20AD CE5F00                    ldx             #display
  289  20B0 3C                        pshx                            ;se envía la matriz de display (destino a copiar)
  290  20B1 8624                      ldaa            #ARRAY_L
  291  20B3 36                        psha                            ;se envía el tamaño de la matriz tablero
  292  20B4 BD2394                    jsr             mirror          ;se envía el tablero del jugador atacado al display
  293  20B7                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20B7                           IF CONT_M > 0
    /  20B7 31                        ins
    /  20B8                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20B8                           IF CONT_M > 0
    /  20B8 31                        ins
    /  20B9                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20B9                           IF CONT_M > 0
    /  20B9 31                        ins
    /  20BA                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  20BA                           IF CONT_M > 0
    /  20BA 31                        ins
    /  20BB                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  20BB                           IF CONT_M > 0
    /  20BB 31                        ins
    /  20BC                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20BC                           IF CONT_M > 0
    /  20BC 31                        ins
    /  20BD                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20BD                           ENDIF
    /  20BD                           ENDIF
    /  20BD                           ENDIF
    /  20BD                           ENDIF
    /  20BD                           ENDIF
    /  20BD                           ENDIF
    /  20BD                           ENDIF
  294                 
  295                 * CONTAR BARCOS ATACADOS A VER SI EL JUGADOR GANÓ               
  296  20BD CE4220                    ldx             #hitlist
  297  20C0 3C                        pshx                            ;se envía la posición del primer arreglo de barcos tocados
  298  20C1 B641F4                    ldaa            player
  299  20C4 36                        psha                            ;se envía el jugador a atacar
  300  20C5 BD2452                    jsr             play_cnt
  301  20C8                           %CLRST          2
    /  0002           CONT_M          SET     2
    /  20C8                           IF CONT_M > 0
    /  20C8 31                        ins
    /  20C9                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  20C9                           IF CONT_M > 0
    /  20C9 31                        ins
    /  20CA                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20CA                           ENDIF
    /  20CA                           ENDIF
    /  20CA                           ENDIF
  302  20CA 32                        pula                            ;se recibe la cantidad de bytes contados
  303  20CB B141F9                    cmpa            tot_pos         
  304  20CE 2703                      beq             end_game        ;si se llegó al máximo de barcos, se termina el juego
  305                 
  306  20D0 7E2024                    jmp             main
  307                 
  308                 * MANDAR MENSAJE A DISPLAY DE QUIÉN GANÓ
  309  20D3           end_game        EQU             *
  310  20D3 B641F4                    ldaa            player
  311  20D6 36                        psha
  312  20D7 BD2652                    jsr             winner
  313  20DA                           %CLRST          1
    /  0001           CONT_M          SET     1
    /  20DA                           IF CONT_M > 0
    /  20DA 31                        ins
    /  20DB                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  20DB                           ENDIF
    /  20DB                           ENDIF
  314                 
  315  20DB           end_loop        EQU             *
  316  20DB 20FE                      bra             end_loop
  317                 
  318                 **************
  319                 * SUBRUTINES *
  320                 **************
  321                 *=======================================================================
  322                 * subrutina gameplay
  323                 * Función: Determina si la posición jugada en el juego de batalla naval
  324                 *          para Wookie FX fue "agua", "submarion" o "carguero", y toma 
  325                 *          la decisión de qué hacer al respecto.
  326                 * Recibe: - Dirección arreglo auxiliar de barcos
  327                 *         - Byte a jugar.
  328                 *         - FILA del array (En HEX, de $0A (fil.0) en adelante)
  329                 *         - COLUMNA del array (en HEX)
  330                 *         - Dirección de comienzo del arreglo (2 bytes)
  331                 *         - Número de arreglo (de 0 en adelante) (número de jugador)
  332                 *       TODO POR STACK.
  333                 * Devuelve: parámetro jugado en posición correspondiente.
  334                 * Requiere: 
  335                 *=======================================================================
  336  20DD           gameplay        EQU             *
  337  20DD                           %BACKUP
    /  20DD 36                        psha
    /  20DE 37                        pshb
    /  20DF 3C                        pshx
    /  20E0 183C                      pshy
  338                                 
  339  20E2 30                        tsx                             ;se usa el IX como frame pointer
  340  20E3 A60D                      ldaa            13,x            ;se carga en AccA el byte a analizar
  341  20E5 84C0                      anda            #11000000b      ;se enmascan los bits 0 a 5, para analizar los más significativos
  342                 
  343  20E7           gp_water        EQU             *
  344  20E7 2620                      bne             gp_sub          ;se estudia si era agua
  345  20E9                           %WRITEPOS       #WATER          ;se cambia el color en el tablero
    /  20E9 C608                      ldab            #WATER
    /  20EB 37                        pshb                            ;se envía el byte a escribir
    /  20EC E60C                      ldab            12,x
    /  20EE 37                        pshb                            ;se envía letra (fila)
    /  20EF E60B                      ldab            11,x
    /  20F1 37                        pshb                            ;se envía num (columna)
    /  20F2 1AEE09                    ldy             9,x
    /  20F5 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  20F7 E608                      ldab            8,x
    /  20F9 37                        pshb                            ;se envía jugador atacado
    /  20FA BD23EE                    jsr             writepos
    /  20FD                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  20FD                           IF CONT_M > 0
    /  20FD 31                        ins
    /  20FE                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  20FE                           IF CONT_M > 0
    /  20FE 31                        ins
    /  20FF                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  20FF                           IF CONT_M > 0
    /  20FF 31                        ins
    /  2100                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2100                           IF CONT_M > 0
    /  2100 31                        ins
    /  2101                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2101                           IF CONT_M > 0
    /  2101 31                        ins
    /  2102                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2102                           IF CONT_M > 0
    /  2102 31                        ins
    /  2103                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2103                           ENDIF
    /  2103                           ENDIF
    /  2103                           ENDIF
    /  2103                           ENDIF
    /  2103                           ENDIF
    /  2103                           ENDIF
    /  2103                           ENDIF
  346  2103                           %RESTORE
    /  2103 1838                      puly
    /  2105 38                        pulx
    /  2106 33                        pulb
    /  2107 32                        pula
  347  2108 39                        rts
  348                 
  349  2109           gp_sub          EQU             *
  350  2109 8140                      cmpa            #01000000b      ;se estudia si era un submarino
  351  210B 2636                      bne             gp_shi_r
  352  210D                           %WRITEPOS       #SUNK_SUB       ;se cambia el color en el tablero
    /  210D C650                      ldab            #SUNK_SUB
    /  210F 37                        pshb                            ;se envía el byte a escribir
    /  2110 E60C                      ldab            12,x
    /  2112 37                        pshb                            ;se envía letra (fila)
    /  2113 E60B                      ldab            11,x
    /  2115 37                        pshb                            ;se envía num (columna)
    /  2116 1AEE09                    ldy             9,x
    /  2119 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  211B E608                      ldab            8,x
    /  211D 37                        pshb                            ;se envía jugador atacado
    /  211E BD23EE                    jsr             writepos
    /  2121                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2121                           IF CONT_M > 0
    /  2121 31                        ins
    /  2122                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2122                           IF CONT_M > 0
    /  2122 31                        ins
    /  2123                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2123                           IF CONT_M > 0
    /  2123 31                        ins
    /  2124                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2124                           IF CONT_M > 0
    /  2124 31                        ins
    /  2125                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2125                           IF CONT_M > 0
    /  2125 31                        ins
    /  2126                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2126                           IF CONT_M > 0
    /  2126 31                        ins
    /  2127                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2127                           ENDIF
    /  2127                           ENDIF
    /  2127                           ENDIF
    /  2127                           ENDIF
    /  2127                           ENDIF
    /  2127                           ENDIF
    /  2127                           ENDIF
  353  2127                           %PLAY_WRT                       ;se agraga la posición al array de barcos atacados
    /  2127 E60C                      ldab            12,x
    /  2129 37                        pshb                            ;se envía letra (fila)
    /  212A E60B                      ldab            11,x
    /  212C 37                        pshb                            ;se envía num (columna)
    /  212D 1AEE0E                    ldy             14,x
    /  2130 183C                      pshy                            ;se envía inicio de array
    /  2132 E608                      ldab            8,x
    /  2134 37                        pshb                            ;se envía jugador atacado
    /  2135 BD2476                    jsr             play_wrt
    /  2138                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2138                           IF CONT_M > 0
    /  2138 31                        ins
    /  2139                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2139                           IF CONT_M > 0
    /  2139 31                        ins
    /  213A                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  213A                           IF CONT_M > 0
    /  213A 31                        ins
    /  213B                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  213B                           IF CONT_M > 0
    /  213B 31                        ins
    /  213C                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  213C                           IF CONT_M > 0
    /  213C 31                        ins
    /  213D                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  213D                           ENDIF
    /  213D                           ENDIF
    /  213D                           ENDIF
    /  213D                           ENDIF
    /  213D                           ENDIF
    /  213D                           ENDIF
  354  213D                           %RESTORE
    /  213D 1838                      puly
    /  213F 38                        pulx
    /  2140 33                        pulb
    /  2141 32                        pula
  355  2142 39                        rts
  356                 
  357  2143           gp_shi_r        EQU             *               ;si no era ninguno de los anteriores, es un carguero
  358  2143 E60B                      ldab            11,x
  359  2145 C106                      cmpb            #MAX_C
  360  2147 276D                      beq             gp_shi_l        ;si está en el borde derecho, se continúa
  361  2149 E60C                      ldab            12,x
  362  214B 37                        pshb                            ;se envía la letra (fila)
  363  214C E60B                      ldab            11,x
  364  214E 5C                        incb                            ;se avanza a la derecha
  365  214F 37                        pshb                            ;se envía el num (columna)
  366  2150 1AEE0E                    ldy             14,x
  367  2153 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  368  2155 E608                      ldab            8,x
  369  2157 37                        pshb                            ;se envía el jugador atacado
  370  2158 BD241F                    jsr             play_src        ;se busca la posición de la derecha
  371  215B                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  215B                           IF CONT_M > 0
    /  215B 31                        ins
    /  215C                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  215C                           IF CONT_M > 0
    /  215C 31                        ins
    /  215D                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  215D                           IF CONT_M > 0
    /  215D 31                        ins
    /  215E                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  215E                           IF CONT_M > 0
    /  215E 31                        ins
    /  215F                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  215F                           IF CONT_M > 0
    /  215F 31                        ins
    /  2160                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2160                           ENDIF
    /  2160                           ENDIF
    /  2160                           ENDIF
    /  2160                           ENDIF
    /  2160                           ENDIF
    /  2160                           ENDIF
  372  2160 2454                      bcc             gp_shi_l        ;si no había barco atacado en la derecha, se busca la izquierda
  373  2162                           %WRITEPOS       #SUNK_SHI       
    /  2162 C690                      ldab            #SUNK_SHI
    /  2164 37                        pshb                            ;se envía el byte a escribir
    /  2165 E60C                      ldab            12,x
    /  2167 37                        pshb                            ;se envía letra (fila)
    /  2168 E60B                      ldab            11,x
    /  216A 37                        pshb                            ;se envía num (columna)
    /  216B 1AEE09                    ldy             9,x
    /  216E 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2170 E608                      ldab            8,x
    /  2172 37                        pshb                            ;se envía jugador atacado
    /  2173 BD23EE                    jsr             writepos
    /  2176                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2176                           IF CONT_M > 0
    /  2176 31                        ins
    /  2177                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2177                           IF CONT_M > 0
    /  2177 31                        ins
    /  2178                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2178                           IF CONT_M > 0
    /  2178 31                        ins
    /  2179                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2179                           IF CONT_M > 0
    /  2179 31                        ins
    /  217A                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  217A                           IF CONT_M > 0
    /  217A 31                        ins
    /  217B                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  217B                           IF CONT_M > 0
    /  217B 31                        ins
    /  217C                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  217C                           ENDIF
    /  217C                           ENDIF
    /  217C                           ENDIF
    /  217C                           ENDIF
    /  217C                           ENDIF
    /  217C                           ENDIF
    /  217C                           ENDIF
  374  217C 6C0B                      inc             11,x
  375  217E                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  217E C690                      ldab            #SUNK_SHI
    /  2180 37                        pshb                            ;se envía el byte a escribir
    /  2181 E60C                      ldab            12,x
    /  2183 37                        pshb                            ;se envía letra (fila)
    /  2184 E60B                      ldab            11,x
    /  2186 37                        pshb                            ;se envía num (columna)
    /  2187 1AEE09                    ldy             9,x
    /  218A 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  218C E608                      ldab            8,x
    /  218E 37                        pshb                            ;se envía jugador atacado
    /  218F BD23EE                    jsr             writepos
    /  2192                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2192                           IF CONT_M > 0
    /  2192 31                        ins
    /  2193                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2193                           IF CONT_M > 0
    /  2193 31                        ins
    /  2194                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2194                           IF CONT_M > 0
    /  2194 31                        ins
    /  2195                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2195                           IF CONT_M > 0
    /  2195 31                        ins
    /  2196                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2196                           IF CONT_M > 0
    /  2196 31                        ins
    /  2197                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2197                           IF CONT_M > 0
    /  2197 31                        ins
    /  2198                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
    /  2198                           ENDIF
  376  2198 6A0B                      dec             11,x            ;se recupera el dato
  377  219A                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  219A E60C                      ldab            12,x
    /  219C 37                        pshb                            ;se envía letra (fila)
    /  219D E60B                      ldab            11,x
    /  219F 37                        pshb                            ;se envía num (columna)
    /  21A0 1AEE0E                    ldy             14,x
    /  21A3 183C                      pshy                            ;se envía inicio de array
    /  21A5 E608                      ldab            8,x
    /  21A7 37                        pshb                            ;se envía jugador atacado
    /  21A8 BD2476                    jsr             play_wrt
    /  21AB                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21AB                           IF CONT_M > 0
    /  21AB 31                        ins
    /  21AC                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21AC                           IF CONT_M > 0
    /  21AC 31                        ins
    /  21AD                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21AD                           IF CONT_M > 0
    /  21AD 31                        ins
    /  21AE                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21AE                           IF CONT_M > 0
    /  21AE 31                        ins
    /  21AF                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21AF                           IF CONT_M > 0
    /  21AF 31                        ins
    /  21B0                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21B0                           ENDIF
    /  21B0                           ENDIF
    /  21B0                           ENDIF
    /  21B0                           ENDIF
    /  21B0                           ENDIF
    /  21B0                           ENDIF
  378  21B0                           %RESTORE
    /  21B0 1838                      puly
    /  21B2 38                        pulx
    /  21B3 33                        pulb
    /  21B4 32                        pula
  379  21B5 39                        rts
  380                 
  381  21B6           gp_shi_l        EQU             *
  382  21B6 E60B                      ldab            11,x
  383  21B8 C101                      cmpb            #MIN_C
  384  21BA 276D                      beq             gp_shi_u        ;si está en el borde izquierdo, se continúa
  385  21BC E60C                      ldab            12,x
  386  21BE 37                        pshb                            ;se envía la letra (fila)
  387  21BF E60B                      ldab            11,x
  388  21C1 5A                        decb                            ;se retrocede a la izquierda
  389  21C2 37                        pshb                            ;se envía el número (columna)
  390  21C3 1AEE0E                    ldy             14,x
  391  21C6 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  392  21C8 E608                      ldab            8,x
  393  21CA 37                        pshb                            ;se envía el jugador atacado
  394  21CB BD241F                    jsr             play_src        ;se busca la posición de la izquierda
  395  21CE                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  21CE                           IF CONT_M > 0
    /  21CE 31                        ins
    /  21CF                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21CF                           IF CONT_M > 0
    /  21CF 31                        ins
    /  21D0                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21D0                           IF CONT_M > 0
    /  21D0 31                        ins
    /  21D1                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21D1                           IF CONT_M > 0
    /  21D1 31                        ins
    /  21D2                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21D2                           IF CONT_M > 0
    /  21D2 31                        ins
    /  21D3                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21D3                           ENDIF
    /  21D3                           ENDIF
    /  21D3                           ENDIF
    /  21D3                           ENDIF
    /  21D3                           ENDIF
    /  21D3                           ENDIF
  396  21D3 2454                      bcc             gp_shi_u        ;si no había barco atacado a la izquierda, se busca arriba
  397  21D5                           %WRITEPOS       #SUNK_SHI       
    /  21D5 C690                      ldab            #SUNK_SHI
    /  21D7 37                        pshb                            ;se envía el byte a escribir
    /  21D8 E60C                      ldab            12,x
    /  21DA 37                        pshb                            ;se envía letra (fila)
    /  21DB E60B                      ldab            11,x
    /  21DD 37                        pshb                            ;se envía num (columna)
    /  21DE 1AEE09                    ldy             9,x
    /  21E1 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21E3 E608                      ldab            8,x
    /  21E5 37                        pshb                            ;se envía jugador atacado
    /  21E6 BD23EE                    jsr             writepos
    /  21E9                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  21E9                           IF CONT_M > 0
    /  21E9 31                        ins
    /  21EA                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  21EA                           IF CONT_M > 0
    /  21EA 31                        ins
    /  21EB                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  21EB                           IF CONT_M > 0
    /  21EB 31                        ins
    /  21EC                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  21EC                           IF CONT_M > 0
    /  21EC 31                        ins
    /  21ED                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  21ED                           IF CONT_M > 0
    /  21ED 31                        ins
    /  21EE                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  21EE                           IF CONT_M > 0
    /  21EE 31                        ins
    /  21EF                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  21EF                           ENDIF
    /  21EF                           ENDIF
    /  21EF                           ENDIF
    /  21EF                           ENDIF
    /  21EF                           ENDIF
    /  21EF                           ENDIF
    /  21EF                           ENDIF
  398  21EF 6A0B                      dec             11,x
  399  21F1                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  21F1 C690                      ldab            #SUNK_SHI
    /  21F3 37                        pshb                            ;se envía el byte a escribir
    /  21F4 E60C                      ldab            12,x
    /  21F6 37                        pshb                            ;se envía letra (fila)
    /  21F7 E60B                      ldab            11,x
    /  21F9 37                        pshb                            ;se envía num (columna)
    /  21FA 1AEE09                    ldy             9,x
    /  21FD 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  21FF E608                      ldab            8,x
    /  2201 37                        pshb                            ;se envía jugador atacado
    /  2202 BD23EE                    jsr             writepos
    /  2205                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2205                           IF CONT_M > 0
    /  2205 31                        ins
    /  2206                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2206                           IF CONT_M > 0
    /  2206 31                        ins
    /  2207                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2207                           IF CONT_M > 0
    /  2207 31                        ins
    /  2208                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2208                           IF CONT_M > 0
    /  2208 31                        ins
    /  2209                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2209                           IF CONT_M > 0
    /  2209 31                        ins
    /  220A                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  220A                           IF CONT_M > 0
    /  220A 31                        ins
    /  220B                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
    /  220B                           ENDIF
  400  220B 6C0B                      inc             11,x            ;se recupera el dato
  401  220D                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  220D E60C                      ldab            12,x
    /  220F 37                        pshb                            ;se envía letra (fila)
    /  2210 E60B                      ldab            11,x
    /  2212 37                        pshb                            ;se envía num (columna)
    /  2213 1AEE0E                    ldy             14,x
    /  2216 183C                      pshy                            ;se envía inicio de array
    /  2218 E608                      ldab            8,x
    /  221A 37                        pshb                            ;se envía jugador atacado
    /  221B BD2476                    jsr             play_wrt
    /  221E                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  221E                           IF CONT_M > 0
    /  221E 31                        ins
    /  221F                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  221F                           IF CONT_M > 0
    /  221F 31                        ins
    /  2220                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2220                           IF CONT_M > 0
    /  2220 31                        ins
    /  2221                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2221                           IF CONT_M > 0
    /  2221 31                        ins
    /  2222                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2222                           IF CONT_M > 0
    /  2222 31                        ins
    /  2223                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2223                           ENDIF
    /  2223                           ENDIF
    /  2223                           ENDIF
    /  2223                           ENDIF
    /  2223                           ENDIF
    /  2223                           ENDIF
  402  2223                           %RESTORE
    /  2223 1838                      puly
    /  2225 38                        pulx
    /  2226 33                        pulb
    /  2227 32                        pula
  403  2228 39                        rts
  404                 
  405  2229           gp_shi_u        EQU             *
  406  2229 E60C                      ldab            12,x
  407  222B C10A                      cmpb            #MIN_F
  408  222D 276D                      beq             gp_shi_d        ;si está en el borde superior, se continúa
  409  222F E60C                      ldab            12,x
  410  2231 5A                        decb                            ;se va a la posición de arriba
  411  2232 37                        pshb                            ;se envía la letra (fila)
  412  2233 E60B                      ldab            11,x
  413  2235 37                        pshb                            ;se envía el num (columna)
  414  2236 1AEE0E                    ldy             14,x
  415  2239 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  416  223B E608                      ldab            8,x
  417  223D 37                        pshb                            ;se envía el jugador atacado
  418  223E BD241F                    jsr             play_src        ;se busca la posición de arriba
  419  2241                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2241                           IF CONT_M > 0
    /  2241 31                        ins
    /  2242                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2242                           IF CONT_M > 0
    /  2242 31                        ins
    /  2243                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2243                           IF CONT_M > 0
    /  2243 31                        ins
    /  2244                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2244                           IF CONT_M > 0
    /  2244 31                        ins
    /  2245                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2245                           IF CONT_M > 0
    /  2245 31                        ins
    /  2246                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2246                           ENDIF
    /  2246                           ENDIF
    /  2246                           ENDIF
    /  2246                           ENDIF
    /  2246                           ENDIF
    /  2246                           ENDIF
  420  2246 2454                      bcc             gp_shi_d        ;si no había barco atacado arriba, se busca abajo
  421  2248                           %WRITEPOS       #SUNK_SHI       
    /  2248 C690                      ldab            #SUNK_SHI
    /  224A 37                        pshb                            ;se envía el byte a escribir
    /  224B E60C                      ldab            12,x
    /  224D 37                        pshb                            ;se envía letra (fila)
    /  224E E60B                      ldab            11,x
    /  2250 37                        pshb                            ;se envía num (columna)
    /  2251 1AEE09                    ldy             9,x
    /  2254 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2256 E608                      ldab            8,x
    /  2258 37                        pshb                            ;se envía jugador atacado
    /  2259 BD23EE                    jsr             writepos
    /  225C                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  225C                           IF CONT_M > 0
    /  225C 31                        ins
    /  225D                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  225D                           IF CONT_M > 0
    /  225D 31                        ins
    /  225E                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  225E                           IF CONT_M > 0
    /  225E 31                        ins
    /  225F                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  225F                           IF CONT_M > 0
    /  225F 31                        ins
    /  2260                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2260                           IF CONT_M > 0
    /  2260 31                        ins
    /  2261                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2261                           IF CONT_M > 0
    /  2261 31                        ins
    /  2262                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2262                           ENDIF
    /  2262                           ENDIF
    /  2262                           ENDIF
    /  2262                           ENDIF
    /  2262                           ENDIF
    /  2262                           ENDIF
    /  2262                           ENDIF
  422  2262 6A0C                      dec             12,x
  423  2264                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  2264 C690                      ldab            #SUNK_SHI
    /  2266 37                        pshb                            ;se envía el byte a escribir
    /  2267 E60C                      ldab            12,x
    /  2269 37                        pshb                            ;se envía letra (fila)
    /  226A E60B                      ldab            11,x
    /  226C 37                        pshb                            ;se envía num (columna)
    /  226D 1AEE09                    ldy             9,x
    /  2270 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  2272 E608                      ldab            8,x
    /  2274 37                        pshb                            ;se envía jugador atacado
    /  2275 BD23EE                    jsr             writepos
    /  2278                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2278                           IF CONT_M > 0
    /  2278 31                        ins
    /  2279                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2279                           IF CONT_M > 0
    /  2279 31                        ins
    /  227A                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  227A                           IF CONT_M > 0
    /  227A 31                        ins
    /  227B                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  227B                           IF CONT_M > 0
    /  227B 31                        ins
    /  227C                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  227C                           IF CONT_M > 0
    /  227C 31                        ins
    /  227D                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  227D                           IF CONT_M > 0
    /  227D 31                        ins
    /  227E                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
    /  227E                           ENDIF
  424  227E 6C0C                      inc             12,x            ;se recupera el dato
  425  2280                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2280 E60C                      ldab            12,x
    /  2282 37                        pshb                            ;se envía letra (fila)
    /  2283 E60B                      ldab            11,x
    /  2285 37                        pshb                            ;se envía num (columna)
    /  2286 1AEE0E                    ldy             14,x
    /  2289 183C                      pshy                            ;se envía inicio de array
    /  228B E608                      ldab            8,x
    /  228D 37                        pshb                            ;se envía jugador atacado
    /  228E BD2476                    jsr             play_wrt
    /  2291                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2291                           IF CONT_M > 0
    /  2291 31                        ins
    /  2292                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2292                           IF CONT_M > 0
    /  2292 31                        ins
    /  2293                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2293                           IF CONT_M > 0
    /  2293 31                        ins
    /  2294                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2294                           IF CONT_M > 0
    /  2294 31                        ins
    /  2295                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2295                           IF CONT_M > 0
    /  2295 31                        ins
    /  2296                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2296                           ENDIF
    /  2296                           ENDIF
    /  2296                           ENDIF
    /  2296                           ENDIF
    /  2296                           ENDIF
    /  2296                           ENDIF
  426  2296                           %RESTORE
    /  2296 1838                      puly
    /  2298 38                        pulx
    /  2299 33                        pulb
    /  229A 32                        pula
  427  229B 39                        rts
  428                 
  429  229C           gp_shi_d        EQU             *
  430  229C E60C                      ldab            12,x
  431  229E C10F                      cmpb            #MAX_F
  432  22A0 276D                      beq             gp_shi_h        ;si está en el borde inferior, se continúa
  433  22A2 E60C                      ldab            12,x
  434  22A4 5C                        incb                            ;se va a la posición de abajo
  435  22A5 37                        pshb                            ;se envía la letra (fila)
  436  22A6 E60B                      ldab            11,x
  437  22A8 37                        pshb                            ;se envía el num (columna)
  438  22A9 1AEE0E                    ldy             14,x
  439  22AC 183C                      pshy                            ;se envía el inicio del arreglo de barcos atacados
  440  22AE E608                      ldab            8,x
  441  22B0 37                        pshb                            ;se envía el jugador atacado
  442  22B1 BD241F                    jsr             play_src        ;se busca la posición de abajo
  443  22B4                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  22B4                           IF CONT_M > 0
    /  22B4 31                        ins
    /  22B5                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22B5                           IF CONT_M > 0
    /  22B5 31                        ins
    /  22B6                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22B6                           IF CONT_M > 0
    /  22B6 31                        ins
    /  22B7                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22B7                           IF CONT_M > 0
    /  22B7 31                        ins
    /  22B8                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22B8                           IF CONT_M > 0
    /  22B8 31                        ins
    /  22B9                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22B9                           ENDIF
    /  22B9                           ENDIF
    /  22B9                           ENDIF
    /  22B9                           ENDIF
    /  22B9                           ENDIF
    /  22B9                           ENDIF
  444  22B9 2454                      bcc             gp_shi_h        ;si no había barco atacado abajo, el carguero está tocado
  445  22BB                           %WRITEPOS       #SUNK_SHI       
    /  22BB C690                      ldab            #SUNK_SHI
    /  22BD 37                        pshb                            ;se envía el byte a escribir
    /  22BE E60C                      ldab            12,x
    /  22C0 37                        pshb                            ;se envía letra (fila)
    /  22C1 E60B                      ldab            11,x
    /  22C3 37                        pshb                            ;se envía num (columna)
    /  22C4 1AEE09                    ldy             9,x
    /  22C7 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22C9 E608                      ldab            8,x
    /  22CB 37                        pshb                            ;se envía jugador atacado
    /  22CC BD23EE                    jsr             writepos
    /  22CF                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22CF                           IF CONT_M > 0
    /  22CF 31                        ins
    /  22D0                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22D0                           IF CONT_M > 0
    /  22D0 31                        ins
    /  22D1                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22D1                           IF CONT_M > 0
    /  22D1 31                        ins
    /  22D2                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22D2                           IF CONT_M > 0
    /  22D2 31                        ins
    /  22D3                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22D3                           IF CONT_M > 0
    /  22D3 31                        ins
    /  22D4                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22D4                           IF CONT_M > 0
    /  22D4 31                        ins
    /  22D5                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22D5                           ENDIF
    /  22D5                           ENDIF
    /  22D5                           ENDIF
    /  22D5                           ENDIF
    /  22D5                           ENDIF
    /  22D5                           ENDIF
    /  22D5                           ENDIF
  446  22D5 6C0C                      inc             12,x
  447  22D7                           %WRITEPOS       #SUNK_SHI       ;se "hunde" a TODO el carguero
    /  22D7 C690                      ldab            #SUNK_SHI
    /  22D9 37                        pshb                            ;se envía el byte a escribir
    /  22DA E60C                      ldab            12,x
    /  22DC 37                        pshb                            ;se envía letra (fila)
    /  22DD E60B                      ldab            11,x
    /  22DF 37                        pshb                            ;se envía num (columna)
    /  22E0 1AEE09                    ldy             9,x
    /  22E3 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  22E5 E608                      ldab            8,x
    /  22E7 37                        pshb                            ;se envía jugador atacado
    /  22E8 BD23EE                    jsr             writepos
    /  22EB                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  22EB                           IF CONT_M > 0
    /  22EB 31                        ins
    /  22EC                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  22EC                           IF CONT_M > 0
    /  22EC 31                        ins
    /  22ED                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  22ED                           IF CONT_M > 0
    /  22ED 31                        ins
    /  22EE                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  22EE                           IF CONT_M > 0
    /  22EE 31                        ins
    /  22EF                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  22EF                           IF CONT_M > 0
    /  22EF 31                        ins
    /  22F0                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  22F0                           IF CONT_M > 0
    /  22F0 31                        ins
    /  22F1                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
    /  22F1                           ENDIF
  448  22F1 6A0C                      dec             12,x            ;se recupera el dato
  449  22F3                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  22F3 E60C                      ldab            12,x
    /  22F5 37                        pshb                            ;se envía letra (fila)
    /  22F6 E60B                      ldab            11,x
    /  22F8 37                        pshb                            ;se envía num (columna)
    /  22F9 1AEE0E                    ldy             14,x
    /  22FC 183C                      pshy                            ;se envía inicio de array
    /  22FE E608                      ldab            8,x
    /  2300 37                        pshb                            ;se envía jugador atacado
    /  2301 BD2476                    jsr             play_wrt
    /  2304                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  2304                           IF CONT_M > 0
    /  2304 31                        ins
    /  2305                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2305                           IF CONT_M > 0
    /  2305 31                        ins
    /  2306                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2306                           IF CONT_M > 0
    /  2306 31                        ins
    /  2307                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2307                           IF CONT_M > 0
    /  2307 31                        ins
    /  2308                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2308                           IF CONT_M > 0
    /  2308 31                        ins
    /  2309                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2309                           ENDIF
    /  2309                           ENDIF
    /  2309                           ENDIF
    /  2309                           ENDIF
    /  2309                           ENDIF
    /  2309                           ENDIF
  450  2309                           %RESTORE
    /  2309 1838                      puly
    /  230B 38                        pulx
    /  230C 33                        pulb
    /  230D 32                        pula
  451  230E 39                        rts
  452                 
  453  230F           gp_shi_h        EQU             *
  454  230F                           %WRITEPOS       #HIT            ;se marca al carguero como tocado
    /  230F C6B0                      ldab            #HIT
    /  2311 37                        pshb                            ;se envía el byte a escribir
    /  2312 E60C                      ldab            12,x
    /  2314 37                        pshb                            ;se envía letra (fila)
    /  2315 E60B                      ldab            11,x
    /  2317 37                        pshb                            ;se envía num (columna)
    /  2318 1AEE09                    ldy             9,x
    /  231B 183C                      pshy                            ;se envía dirección de inicio de matriz
    /  231D E608                      ldab            8,x
    /  231F 37                        pshb                            ;se envía jugador atacado
    /  2320 BD23EE                    jsr             writepos
    /  2323                           %CLRST          6
    /  0006           CONT_M          SET     6
    /  2323                           IF CONT_M > 0
    /  2323 31                        ins
    /  2324                           %CLRST  CONT_M-1
    /  0005           CONT_M          SET     CONT_M-1
    /  2324                           IF CONT_M > 0
    /  2324 31                        ins
    /  2325                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  2325                           IF CONT_M > 0
    /  2325 31                        ins
    /  2326                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  2326                           IF CONT_M > 0
    /  2326 31                        ins
    /  2327                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  2327                           IF CONT_M > 0
    /  2327 31                        ins
    /  2328                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  2328                           IF CONT_M > 0
    /  2328 31                        ins
    /  2329                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  2329                           ENDIF
    /  2329                           ENDIF
    /  2329                           ENDIF
    /  2329                           ENDIF
    /  2329                           ENDIF
    /  2329                           ENDIF
    /  2329                           ENDIF
  455  2329                           %PLAY_WRT                       ;se agrega la posición al array de barcos atacados
    /  2329 E60C                      ldab            12,x
    /  232B 37                        pshb                            ;se envía letra (fila)
    /  232C E60B                      ldab            11,x
    /  232E 37                        pshb                            ;se envía num (columna)
    /  232F 1AEE0E                    ldy             14,x
    /  2332 183C                      pshy                            ;se envía inicio de array
    /  2334 E608                      ldab            8,x
    /  2336 37                        pshb                            ;se envía jugador atacado
    /  2337 BD2476                    jsr             play_wrt
    /  233A                           %CLRST          5
    /  0005           CONT_M          SET     5
    /  233A                           IF CONT_M > 0
    /  233A 31                        ins
    /  233B                           %CLRST  CONT_M-1
    /  0004           CONT_M          SET     CONT_M-1
    /  233B                           IF CONT_M > 0
    /  233B 31                        ins
    /  233C                           %CLRST  CONT_M-1
    /  0003           CONT_M          SET     CONT_M-1
    /  233C                           IF CONT_M > 0
    /  233C 31                        ins
    /  233D                           %CLRST  CONT_M-1
    /  0002           CONT_M          SET     CONT_M-1
    /  233D                           IF CONT_M > 0
    /  233D 31                        ins
    /  233E                           %CLRST  CONT_M-1
    /  0001           CONT_M          SET     CONT_M-1
    /  233E                           IF CONT_M > 0
    /  233E 31                        ins
    /  233F                           %CLRST  CONT_M-1
    /  0000           CONT_M          SET     CONT_M-1
    /                                 IF CONT_M > 0
    /                                 ins
    /                                 %CLRST  CONT_M-1
    /  233F                           ENDIF
    /  233F                           ENDIF
    /  233F                           ENDIF
    /  233F                           ENDIF
    /  233F                           ENDIF
    /  233F                           ENDIF
  456  233F                           %RESTORE
    /  233F 1838                      puly
    /  2341 38                        pulx
    /  2342 33                        pulb
    /  2343 32                        pula
  457  2344 39                        rts
  458                 
  459                 *==========================================================================
  460                 * subrutina def_ships
  461                 * Función: Determina los valores de cargueros y submarinos a utilizar.
  462                 * Recibe: Nada
  463                 * Devuelve: Cantidad de cargueros y submarinos en memorias correspondientes.
  464                 * Requiere:
  465                 *==========================================================================
  466  2345           def_ships       EQU             *
  467  2345                           %BACKUP
    /  2345 36                        psha
    /  2346 37                        pshb
    /  2347 3C                        pshx
    /  2348 183C                      pshy
  468                 
  469  234A           wait_nsu        EQU             *
  470  234A CE4268                    ldx             #subm
  471  234D BD2569                    jsr             show
  472  2350 BD257D                    jsr             read_kb
  473  2353 4D                        tsta
  474  2354 2BF4                      bmi             wait_nsu
  475  2356 B141FB                    cmpa            buffer
  476  2359 27EF                      beq             wait_nsu
  477  235B B741FB                    staa            buffer
  478                 
  479  235E CE4201                    ldx             #kb_value
  480  2361 16                        tab
  481  2362 3A                        abx
  482  2363 A600                      ldaa            0,x             ;se obtiene el valor ingresado ya codificado
  483                 
  484  2365 8105                      cmpa            #SUB            ;se controla que no sea menor al máximo de submarinos
  485  2367 22E1                      bhi             wait_nsu
  486  2369 B741F7                    staa            cant_sub        ;se guarda la cantidad de submarinos
  487                 
  488  236C           wait_nsh        EQU             *
  489  236C CE426C                    ldx             #carg
  490  236F BD2569                    jsr             show
  491  2372 BD257D                    jsr             read_kb
  492  2375 4D                        tsta
  493  2376 2BF4                      bmi             wait_nsh
  494  2378 B141FB                    cmpa            buffer
  495  237B 27EF                      beq             wait_nsh
  496  237D B741FB                    staa            buffer
  497                 
  498  2380 CE4201                    ldx             #kb_value
  499  2383 16                        tab
  500  2384 3A                        abx
  501  2385 A600                      ldaa            0,x             ;se obtiene el valor ingresado ya codificado
  502                 
  503  2387 8104                      cmpa            #SHI            ;se controla que no sea menor al máximo de submarinos
  504  2389 22E1                      bhi             wait_nsh
  505  238B B741F8                    staa            cant_shi        ;se guarda la cantidad de submarinos
  506                 
  507  238E                           %RESTORE
    /  238E 1838                      puly
    /  2390 38                        pulx
    /  2391 33                        pulb
    /  2392 32                        pula
  508  2393 39                        rts
  509                 
  510                 *====================================================================================
  511                 * Subrutina "MIRROR"
  512                 *
  513                 * Descripción:  Esta subrutina copia el contenido de las posiciones de un array fuente
  514                 *               a un espacio de memoria destino.
  515                 * Parámetros de entrada:
  516                 *               - Dirección de comienzo de array FUENTE
  517                 *               - Número de arreglo contenido en otro arreglo (número de jugador)(0 en adelante)
  518                 *               - Dirección de DESTINO de la copia 
  519                 *               - Número de posiciones a copiar (un byte, hasta 255 posiciones.)
  520                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  521                 *
  522                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  523                 *       Se destruirá el dato de la dirección del array de origen.
  524                 *               
  525                 * Parámetros de salida: NINGUNO
  526                 *       
  527                 *
  528                 * Consideraciones:
  529                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  530                 *
  531                 *====================================================================================
  532                 
  533  2394           mirror          EQU             *       
  534                         
  535  2394                           %BACKUP
    /  2394 36                        psha
    /  2395 37                        pshb
    /  2396 3C                        pshx
    /  2397 183C                      pshy
  536  2399 30                        tsx                             ;creo frame pointer
  537  239A A60B                      ldaa            11,x            ;cargo número de jugador
  538  239C E608                      ldab            8,x             ;cargo longitud de la copia (del array a copiar)
  539  239E 3D                        mul                             ;obtengo offset de jugador
  540  239F E30C                      addd            12,x            ;sumo offset de jugador
  541  23A1 ED0C                      std             12,x            ;guardo la dirección con offset del array fuente
  542                 
  543  23A3 A60C                      ldaa            12,x            ;cargo longitud de copia en contador
  544  23A5 2710                      beq             mi_end          ;si es cero, vuelvo desde subrutina
  545  23A7 1AEE09                    ldy             9,x             ;cargo índice a destino de la copia.
  546  23AA EE0C                      ldx             12,x            ;cargo índice a array origen de copia.
  547                 
  548  23AC           mi_loop         EQU             *
  549                 
  550  23AC E600                      ldab            0,x             ;cargo byte a copiar
  551  23AE 18E700                    stab            0,y             ;copio byte en destino
  552  23B1 08                        inx                             ;siguiente byte
  553  23B2 1808                      iny                             ;siguiente byte
  554  23B4 4A                        deca                            ;decremento contador
  555  23B5 26F5                      bne             mi_loop
  556                 
  557  23B7           mi_end          EQU             *
  558                 
  559  23B7                           %RESTORE
    /  23B7 1838                      puly
    /  23B9 38                        pulx
    /  23BA 33                        pulb
    /  23BB 32                        pula
  560                         
  561  23BC 39                        rts     
  562                                 
  563                                                 
  564                 *====================================================================================
  565                 * Subrutina "FETCHPOS"
  566                 *
  567                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  568                 *               determinada posición, y devuelve el byte que se encuentra
  569                 *               en esa posición por stack. Subrutina limitada a longitud
  570                 *               de elementos del array de un byte.
  571                 *
  572                 * Parámetros de entrada:
  573                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  574                 *               - COLUMNA del array (en HEX)
  575                 *               - Dirección de comienzo del arreglo (2 bytes)
  576                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  577                 *
  578                 *       Todos los parámetros se reciben por stack en el orden indicado.
  579                 *       Se destruirá el dato del índice al arreglo.
  580                 *               
  581                 * Parámetros de salida:
  582                 *               - Byte encontrado en esa posición (se devuelve por stack)
  583                 *
  584                 *
  585                 * Consideraciones:
  586                 *               - Antes de recuperar el byte en stack se debe normalizar el mismo
  587                 *                 en 4 posiciones (4 bytes)
  588                 *               - Requiere definición de constante "ARRAY_L"
  589                 *
  590                 *====================================================================================
  591                 
  592  23BD           fetchpos        EQU             *
  593                 
  594  23BD                           %BACKUP
    /  23BD 36                        psha
    /  23BE 37                        pshb
    /  23BF 3C                        pshx
    /  23C0 183C                      pshy
  595  23C2 30                        tsx                             ;creo frame pointer
  596  23C3 A608                      ldaa            8,x             ;cargo numero de jugador
  597  23C5 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  598  23C7 3D                        mul                             ;obtengo offset de jugador
  599  23C8 E309                      addd            9,x             ;sumo offset de jugador a top of array
  600  23CA ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  601                 
  602  23CC A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  603  23CE C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  604  23D0 10                        sba                             ;obtengo numero de fila
  605  23D1 C606                      ldab            #COL            ;cargo longitud de fila
  606  23D3 3D                        mul                             ;obtengo offset de fila
  607  23D4 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  608  23D6 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  609                 
  610  23D8 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  611  23DA 5A                        decb                            ;normalizo offset de columna
  612  23DB 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  613  23DC E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  614  23DE ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  615                 
  616  23E0 1AEE09                    ldy             9,x             ;cargo en IY la dirección del byte que se desea obtener
  617  23E3 18A600                    ldaa            0,y             ;cargo el byte a devolver en AccA
  618  23E6 A70C                      staa            12,x            ;guardo el byte a devolver en stack
  619  23E8                           %RESTORE
    /  23E8 1838                      puly
    /  23EA 38                        pulx
    /  23EB 33                        pulb
    /  23EC 32                        pula
  620                                 
  621  23ED 39                        rts
  622                                 
  623                                 
  624                 
  625                 *====================================================================================
  626                 * Subrutina "WRITEPOS"
  627                 *
  628                 * Descripción:  La subrutina busca en un array de tres dimensiones una 
  629                 *               determinada posición, y escribe en la misma un byte de
  630                 *               datos que será recibido como parámetro de entrada por stack.
  631                 *
  632                 * Parámetros de entrada:
  633                 *               - BYTE a escribir en la posición indicada
  634                 *               - FILA del array (En HEX, de $0A (fil.0) en adelante)
  635                 *               - COLUMNA del array (en HEX)
  636                 *               - Dirección de comienzo del arreglo (2 bytes)
  637                 *               - Número de arreglo (de 0 en adelante) (número de jugador)
  638                 *
  639                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  640                 *       Se destruirá el dato del índice al arreglo.
  641                 *               
  642                 * Parámetros de salida: NINGUNO
  643                 *       
  644                 *
  645                 * Consideraciones:
  646                 *               - Luego de invocada, se debe normalizar el stack en 6 posiciones
  647                 *               - Requiere definición de constante "ARRAY_L"
  648                 *
  649                 *====================================================================================
  650                 
  651  23EE           writepos        EQU             *
  652                 
  653  23EE                           %BACKUP
    /  23EE 36                        psha
    /  23EF 37                        pshb
    /  23F0 3C                        pshx
    /  23F1 183C                      pshy
  654  23F3 30                        tsx                             ;creo frame pointer
  655  23F4 A608                      ldaa            8,x             ;cargo numero de jugador
  656  23F6 C624                      ldab            #ARRAY_L        ;cargo longitud del arreglo (MAX 255 bytes)
  657  23F8 3D                        mul                             ;obtengo offset de jugador
  658  23F9 E309                      addd            9,x             ;sumo offset de jugador a top of array
  659  23FB ED09                      std             9,x             ;obtengo direccion al arreglo del jugador
  660                 
  661  23FD A60C                      ldaa            12,x            ;cargo coordenada letra (FILA)
  662  23FF C60A                      ldab            #NORM           ;cargo valor de normalización de filas
  663  2401 10                        sba                             ;obtengo numero de fila
  664  2402 C606                      ldab            #COL            ;cargo longitud de fila
  665  2404 3D                        mul                             ;obtengo offset de fila
  666  2405 E309                      addd            9,x             ;sumo offset de fila a la dirección del arreglo del jugador
  667  2407 ED09                      std             9,x             ;obtengo dirección a la fila que se desea
  668                 
  669  2409 E60B                      ldab            11,x            ;cargo coordenada (offset) de columna
  670  240B 5A                        decb                            ;normalizo offset de columna
  671  240C 4F                        clra                            ;borro AccA para tener el valor de AccB en AccD
  672  240D E309                      addd            9,x             ;sumo offset de columna a la dirección temporal
  673  240F ED09                      std             9,x             ;guardo en stack la dirección del byte a consultar
  674                 
  675  2411 1AEE09                    ldy             9,x             ;cargo en IY la dirección donde se desea escribir
  676  2414 A60D                      ldaa            13,x            ;cargo en AccA el byte que se quiere escribir en el arreglo
  677  2416 18A700                    staa            0,y             ;escribo el byte sobre el arreglo
  678  2419                           %RESTORE
    /  2419 1838                      puly
    /  241B 38                        pulx
    /  241C 33                        pulb
    /  241D 32                        pula
  679                                 
  680  241E 39                        rts
  681                 *====================================================================================
  682                 * Subrutina "PLAY_SRC"
  683                 *
  684                 * Descripción:  Esta subrutina busca dos bytes consecutivos (posicion jugada) dentro de un arreglo.
  685                 *               El valor $00 podrá estar en el array solo como terminador
  686                 * Parámetros de entrada:
  687                 *               - Byte1 a buscar (en este caso, n° fila)
  688                 *               - Byte2 a buscar (en este caso, n° columna)
  689                 *               - Dirección de inicio del array
  690                 *               - Número de jugador (0 o mayor)
  691                 *
  692                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  693                 *               
  694                 * Parámetros de salida:
  695                 *               - Carry en 1, si se encontró la posición.
  696                 *       
  697                 *
  698                 * Consideraciones:
  699                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones antes de
  700                 *                 recuperar el parámetro de salida.
  701                 *
  702                 *====================================================================================
  703                 
  704  241F           play_src        EQU             *               
  705                                         
  706  241F                           %BACKUP
    /  241F 36                        psha
    /  2420 37                        pshb
    /  2421 3C                        pshx
    /  2422 183C                      pshy
  707  2424 30                        tsx                             ;creo frame pointer
  708  2425 A608                      ldaa            8,x             ;cargo número de array (jugador)
  709  2427 C61B                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  710  2429 3D                        mul                             ;obtengo offset de jugador
  711  242A E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  712  242C 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  713                 
  714  242E           ps_loop         EQU             *
  715                 
  716  242E 18A600                    ldaa            0,y             ;cargo byte1 a comparar
  717  2431 2718                      beq             ps_ntfnd        ;si encontré el terminador, el valor requerido no está en el array
  718                 
  719  2433 A10C                      cmpa            12,x            ;comparo con el byte1 a buscar
  720  2435 2706                      beq             ps_next         ;si coinciden, busco el byte 2
  721  2437 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  722  2439 1808                      iny
  723  243B 20F1                      bra             ps_loop         ;vuelvo a comparar
  724                 
  725  243D           ps_next         EQU             *
  726                 
  727  243D 18E601                    ldab            1,y             ;cargo byte a continuación del anterior
  728  2440 1808                      iny                             ;me posiciono sobre siguiente byte1 a comparar
  729  2442 1808                      iny
  730  2444 E10B                      cmpb            11,x            ;comparo con byte2
  731  2446 26E6                      bne             ps_loop         ;si no son iguales, sigo buscando
  732  2448 0D                        sec                             ;set del carry para informar que se encontró el valor
  733  2449 2001                      bra             ps_end
  734                                         
  735  244B           ps_ntfnd        EQU             *
  736                 
  737  244B 0C                        clc                             ;carry en 0 para informar que no se encontró el valor
  738                 
  739  244C           ps_end          EQU             *
  740                                 
  741  244C                           %RESTORE
    /  244C 1838                      puly
    /  244E 38                        pulx
    /  244F 33                        pulb
    /  2450 32                        pula
  742                 
  743  2451 39                        rts
  744                 
  745                 
  746                 
  747                                         
  748                 
  749                                         
  750                 
  751                 *====================================================================================
  752                 * Subrutina "PLAY_CNT"
  753                 *
  754                 * Descripción:  Esta subrutina cuenta la cantidad de datos de dos bytes que se encuentran en una
  755                 *               determinada zona de memoria configurada como array. Se supone que $00 no es un dato presente en dicho array, 
  756                 *               usándose solamente como terminador del mismo.
  757                 *
  758                 * Parámetros de entrada:
  759                 *               - Dirección de inicio del array
  760                 *               - Número de jugador (0 o mayor)
  761                 *
  762                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  763                 *               
  764                 * Parámetros de salida:
  765                 *               - Cantidad de datos de dos bytes encontrados, por stack (máximo 255 datos).
  766                 *       
  767                 *
  768                 * Consideraciones:
  769                 *               - Luego de invocada, se debe normalizar el stack en 2 posiciones antes de
  770                 *                 recuperar el parámetro de salida.
  771                 *
  772                 *====================================================================================
  773                 
  774  2452           play_cnt        EQU             *
  775                 
  776  2452                           %BACKUP
    /  2452 36                        psha
    /  2453 37                        pshb
    /  2454 3C                        pshx
    /  2455 183C                      pshy
  777  2457 30                        tsx                             ;creo frame pointer
  778  2458 A608                      ldaa            8,x             ;cargo número de array (jugador)
  779  245A C61B                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  780  245C 3D                        mul                             ;obtengo offset de jugador
  781  245D E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  782  245F 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  783  2461 4F                        clra                            ;inicializo contador
  784                                         
  785  2462           pc_loop         EQU             *               
  786                                         
  787  2462 18E600                    ldab            0,y             ;cargo byte a comparar
  788  2465 2707                      beq             pc_end          ;si es terminador, terminé de buscar
  789  2467 1808                      iny                             ;si no es terminador, me posiciono sobre siguiente dato de 
  790  2469 1808                      iny                             ;2 bytes
  791  246B 4C                        inca                            ;incremento contador
  792  246C 20F4                      bra             pc_loop         ;vuelvo a comparar
  793                                         
  794  246E           pc_end          EQU             *       
  795                                         
  796  246E A70A                      staa            10,x            ;devuelvo valor por stack
  797  2470                           %RESTORE
    /  2470 1838                      puly
    /  2472 38                        pulx
    /  2473 33                        pulb
    /  2474 32                        pula
  798                                 
  799  2475 39                        rts
  800                 
  801                 
  802                 *====================================================================================
  803                 * Subrutina "PLAY_WRT"
  804                 *
  805                 * Descripción:  Esta subrutina escribe dos bytes distintos (en este caso, la posición 
  806                 *               jugada, compuesta de una letra y un número) en la primera posición "libre"
  807                 *               de un array y en la siguiente. La subrutina escribirá los datos desde la primera posición con ceros
  808                 *               que encuentre en el array, por lo que el mismo NO podrá contener el dato "$00" en ninguno
  809                 *               de sus bytes, caso contrario la subrutina lo interpretará como vacío y sobreescribirá información. Se
  810                 *               supone que el array tendrá por lo menos, dos posiciones libres.
  811                 *
  812                 * Parámetros de entrada:
  813                 *               - Primer byte a escribir (en este caso, fila jugada)
  814                 *               - Byte a escribir a continuación del primero (en este caso, columna jugada)
  815                 *               - Dirección de inicio del array en el que se va a escribir
  816                 *               - Número de jugador (0 o mayor)
  817                 *
  818                 *       Todos los parámetros se reciben por stack en el orden indicado. 
  819                 *               
  820                 * Parámetros de salida: NINGUNO
  821                 *       
  822                 *
  823                 * Consideraciones:
  824                 *               - Luego de invocada, se debe normalizar el stack en 5 posiciones
  825                 *
  826                 *====================================================================================
  827                 
  828  2476           play_wrt        EQU             *
  829                 
  830  2476                           %BACKUP
    /  2476 36                        psha
    /  2477 37                        pshb
    /  2478 3C                        pshx
    /  2479 183C                      pshy
  831  247B 30                        tsx                             ;creo frame pointer
  832  247C A608                      ldaa            8,x             ;cargo número de array (jugador)
  833  247E C61B                      ldab            #HITSIZE        ;cargo tamaño de array de 1 jugador
  834  2480 3D                        mul                             ;obtengo offset de jugador
  835  2481 E309                      addd            9,x             ;sumo el offset de jugador al puntero al array
  836  2483 188F                      xgdy                            ;obtengo puntero al array del jugador deseado
  837                 
  838                 
  839  2485           pw_loop         EQU             *
  840                 
  841  2485 18A600                    ldaa            0,y             ;cargo byte del array
  842  2488 2704                      beq             pw_end          ;si es cero, entonces escribo los datos
  843  248A 1808                      iny                             ;si no es cero, me posiciono sobre la siguiente posición
  844  248C 20F7                      bra             pw_loop         ;vuelvo a buscar ceros
  845                 
  846  248E           pw_end          EQU             *
  847                 
  848  248E A60C                      ldaa            12,x            ;cargo primer byte a escribir
  849  2490 18A700                    staa            0,y             ;guardo primer byte en memoria
  850  2493 1808                      iny                             ;me posiciono en el siguiente byte
  851  2495 A60B                      ldaa            11,x            ;cargo segundo byte a escribir
  852  2497 18A700                    staa            0,y             ;guardo segundo byte en memoria
  853  249A                           %RESTORE
    /  249A 1838                      puly
    /  249C 38                        pulx
    /  249D 33                        pulb
    /  249E 32                        pula
  854                 
  855  249F 39                        rts
  856                 
  857                 ***************************************************************************************
  858                 *Subrutina "CLRZONE"
  859                 *Función: "borra" (guarda ceros) una determinada zona de memoria.
  860                 *         
  861                 *
  862                 * Parámetros de entrada: -Dirección de comienzo de sección a borrar (por stack)
  863                 *                        -Longitud de zona de memoria (por stack)
  864                 *                       
  865                 *
  866                 * Parámetros de salida: Ninguno
  867                 *
  868                 * consideraciones: 
  869                 *                  - Incluir macros "%BACKUP" y "%RESTORE".
  870                 *                                       
  871                 *************************************************************************************** 
  872  24A0           clrzone         EQU     *
  873                 
  874  24A0                           %BACKUP                         ;backup de registros en stack
    /  24A0 36                        psha
    /  24A1 37                        pshb
    /  24A2 3C                        pshx
    /  24A3 183C                      pshy
  875                 
  876  24A5 30                        tsx
  877  24A6 A608                      ldaa    8,x                     ;cargo contador con longitud de zona a borrar
  878  24A8 EE09                      ldx     9,x                     ;cargo puntero zona de memoria a borrar
  879  24AA D600                      ldab    $00                     ;cargo el cero
  880  24AC           clr_loop        EQU     *
  881  24AC E700                      stab    0,x                     ;guardo caracter en posicion del array
  882  24AE 08                        inx                             ;siguiente posición     
  883  24AF 4A                        deca                            ;decremento contador
  884  24B0 26FA                      bne     clr_loop                ;si no es cero, escribo en la posición siguiente.
  885                 
  886  24B2                           %RESTORE                        :restauro backup en registros
    /  24B2 1838                      puly
    /  24B4 38                        pulx
    /  24B5 33                        pulb
    /  24B6 32                        pula
  887                 
  888  24B7 39                        rts
  889                 
  890                 *---------------------------------------
  891                 * WhoPlays: subrutina para ver que 
  892                 *           jugador juega
  893                 *---------------------------------------
  894                 
  895  24B8           whoplays        EQU             *
  896                 
  897  24B8 BD257D    wait_ply        jsr             read_kb
  898  24BB 4D                        tsta
  899  24BC 2BFA                      bmi             wait_ply
  900  24BE 8103                      cmpa            #B_P1
  901  24C0 2708                      beq             play_p1
  902  24C2 8107                      cmpa            #B_P2
  903  24C4 26F2                      bne             wait_ply
  904  24C6 8600                      ldaa            #P1
  905  24C8 2002                      bra             ply_end
  906                 
  907  24CA 8601      play_p1         ldaa            #P2
  908  24CC 39        ply_end         rts             
  909                 
  910                 *---------------------------------------
  911                 * Input: subrutina que devuelve
  912                 *        entrada para la batalla naval
  913                 * AccA: Fila de la posicion jugada
  914                 * AccB: Columna de la posicion jugada
  915                 *---------------------------------------
  916                 
  917  24CD           input           EQU             *
  918                 
  919                 * back up de registros
  920  24CD 3C                        pshx
  921  24CE 183C                      pshy
  922                 
  923                 * creo variables locales
  924  24D0 36                        psha
  925  24D1 36                        psha
  926  24D2 36                        psha
  927                 
  928                 * inicializo framepointer
  929  24D3 1830                      tsy
  930                 
  931                 * prendo el led
  932  24D5                           %LED_INV
    /  24D5 B61000                    ldaa            PORTA
    /  24D8 8840                      eora            #SHF_LED
    /  24DA B71000                    staa            PORTA
  933                 
  934                 * inicializo el contador
  935  24DD 8603      inp_rest        ldaa            #INPUTS
  936  24DF 18A700                    staa            CONT,Y
  937                                 
  938                 * limpio el display
  939  24E2 CE41FC                    ldx             #string
  940  24E5 8604                      ldaa            #4
  941  24E7 C620                      ldab            #ESP
  942  24E9 BD2647                    jsr             clrarray
  943                 
  944  24EC BD2636                    jsr             clr_dis
  945                 
  946  24EF 86FF                      ldaa            #$FF
  947  24F1 B741FB                    staa            buffer
  948                 
  949                 * lectura de teclado
  950  24F4 BD257D    wait_kb         jsr             read_kb
  951  24F7 4D                        tsta
  952  24F8 2BFA                      bmi             wait_kb
  953  24FA B141FB                    cmpa            buffer
  954  24FD 27F5                      beq             wait_kb
  955  24FF B741FB                    staa            buffer
  956                                 
  957  2502 810F                      cmpa            #B_reset
  958  2504 27D7                      beq             inp_rest
  959  2506 8103                      cmpa            #B_P1
  960  2508 27D3                      beq             inp_rest
  961  250A 8107                      cmpa            #B_P2
  962  250C 27CF                      beq             inp_rest
  963                 
  964  250E 186A00                    dec             CONT,Y
  965  2511 2727                      beq             chk_fire
  966  2513 36                        psha
  967  2514 CE4201                    ldx             #kb_value
  968  2517 16                        tab
  969  2518 3A                        abx
  970  2519 A600                      ldaa            0,X             
  971  251B 183C                      pshy
  972  251D 18E600                    ldab            CONT,Y
  973  2520 183A                      aby
  974  2522 18A700                    staa            0,Y
  975  2525 1838                      puly
  976                 
  977  2527 33                        pulb
  978  2528 BD2626                    jsr             to_ascii
  979  252B 17                        tba
  980                                 
  981  252C CE41FC                    ldx             #string
  982  252F BD2616                    jsr             sh_value
  983                 
  984  2532 CE41FC                    ldx             #string
  985  2535 BD2569                    jsr             show
  986                 
  987  2538 20BA                      bra             wait_kb
  988                 
  989  253A 810B      chk_fire        cmpa            #B_fire
  990  253C 269F                      bne             inp_rest
  991  253E 18A602                    ldaa            FILA_L,Y
  992  2541 810A                      cmpa            #MIN_FIL
  993  2543 2598                      blo             inp_rest
  994  2545 810F                      cmpa            #MAX_FIL
  995  2547 2294                      bhi             inp_rest
  996  2549 18A601                    ldaa            COL_L,Y
  997  254C 8101                      cmpa            #MIN_COL
  998  254E 258D                      blo             inp_rest
  999  2550 8106                      cmpa            #MAX_COL
 1000  2552 2289                      bhi             inp_rest
 1001                 
 1002                 * apago el led
 1003  2554                           %LED_INV
    /  2554 B61000                    ldaa            PORTA
    /  2557 8840                      eora            #SHF_LED
    /  2559 B71000                    staa            PORTA
 1004                 
 1005                 * libero variables locales
 1006  255C 32                        pula
 1007  255D 32                        pula
 1008  255E 32                        pula
 1009                 
 1010  255F 18A602    return          ldaa            FILA_L,Y
 1011  2562 18E601                    ldab            COL_L,Y         
 1012                 
 1013                 * restore de registros
 1014  2565 1838                      puly
 1015  2567 38                        pulx
 1016                 
 1017  2568 39                        rts
 1018                 
 1019                 *------------------------------------
 1020                 * Show: Por IX direccion de string de
 1021                 *       4 caracteres para imprimir
 1022                 *------------------------------------
 1023                 
 1024  2569           show            EQU             *
 1025                 
 1026                 * back up de registros
 1027  2569 3C                        pshx
 1028  256A 37                        pshb
 1029  256B 36                        psha
 1030                 
 1031                 * inicializo contador de posiciones
 1032  256C C604                      ldab            #LENGTH
 1033                                 
 1034                 * loop para enviar a cada posicion
 1035  256E 5A        sh_loop         decb
 1036  256F 2B08                      bmi             sh_end          ; si no pase por todas las posiciones
 1037  2571 A600                      ldaa            0,X             ; tomo del string el caracter
 1038  2573 BD262F                    jsr             outchar         ; y lo imprimo en la posicion actual
 1039  2576 08                        inx
 1040  2577 20F5                      bra             sh_loop
 1041                 
 1042                 * restore de registros                          
 1043  2579 32        sh_end          pula
 1044  257A 33                        pulb
 1045  257B 38                        pulx
 1046  257C 39                        rts
 1047                 
 1048                 *----------------------------------------------
 1049                 * read_kb: AccA: tecla presionada
 1050                 *          o -1
 1051                 *----------------------------------------------
 1052                 
 1053  257D           read_kb         EQU             *
 1054                 
 1055                 * back up de registros
 1056  257D 3C                        pshx
 1057  257E 37                        pshb
 1058                 
 1059                 * creo espacio para variables locales
 1060  257F                           %MALLOC         1               ; variable mascara de filas
    /  257F                           IF 1 > 0
    /  257F 30                        tsx
    /  2580 8F                        xgdx
    /  2581 830001                    subd    #1
    /  2584 8F                        xgdx
    /  2585 35                        txs
    /  2586                           ENDIF
 1061  2586                           %MALLOC         1               ; variable mascara de columnas
    /  2586                           IF 1 > 0
    /  2586 30                        tsx
    /  2587 8F                        xgdx
    /  2588 830001                    subd    #1
    /  258B 8F                        xgdx
    /  258C 35                        txs
    /  258D                           ENDIF
 1062  258D                           %MALLOC         1               ; variable contador de columnas
    /  258D                           IF 1 > 0
    /  258D 30                        tsx
    /  258E 8F                        xgdx
    /  258F 830001                    subd    #1
    /  2592 8F                        xgdx
    /  2593 35                        txs
    /  2594                           ENDIF
 1063  2594                           %MALLOC         1               ; variable contador de tecla
    /  2594                           IF 1 > 0
    /  2594 30                        tsx
    /  2595 8F                        xgdx
    /  2596 830001                    subd    #1
    /  2599 8F                        xgdx
    /  259A 35                        txs
    /  259B                           ENDIF
 1064                 
 1065                 * inicializacion de variables
 1066  259B 30                        tsx                             ; framepointer para acceder a locales
 1067  259C C604                      ldab            #LENGTH         ; contador de fila
 1068  259E 860E                      ldaa            #FIL0           ; mascara para la fila cero
 1069  25A0 A703                      staa            MASK_FIL,X      
 1070  25A2 8610                      ldaa            #COL0           ; mascara para la columna cero
 1071  25A4 A702                      staa            MASK_COL,X
 1072  25A6 4F                        clra                            ; contador de columna
 1073  25A7 A701                      staa            COL_CONT,X
 1074  25A9 A700                      staa            KB_PRESS,X      ; variable con numero de tecla
 1075                 
 1076                 * loop para barrer y mirar teclado matricial
 1077  25AB 86FF      kb_loop         ldaa            #NONE
 1078  25AD 5A                        decb                            
 1079  25AE 2B2C                      bmi             kb_end          ; me fijo si recorrio todas las filas
 1080  25B0 A603                      ldaa            MASK_FIL,X      ; enmascaro la siguiente fila
 1081  25B2 B71003                    staa            ROWS
 1082  25B5 0D                        sec                             ; carry para rotacion de byte
 1083  25B6 49                        rola                            
 1084  25B7 A703                      staa            MASK_FIL,X      ; cambio variable mascara para la proxima fila
 1085                 
 1086  25B9 8604                      ldaa            #LENGTH
 1087  25BB A701                      staa            COL_CONT,X
 1088  25BD 8610                      ldaa            #COL0           ; inicializo variable para barrer
 1089  25BF A702                      staa            MASK_COL,X      ; la columna
 1090                 
 1091  25C1 6A01      kb_col          dec             COL_CONT,X      ; me fijo si barrio todas las columnas
 1092  25C3 2BE6                      bmi             kb_loop
 1093  25C5 B61005                    ldaa            COLS            ; leo el puerto de columnas
 1094  25C8 A402                      anda            MASK_COL,X      ; enmascaro columna
 1095  25CA 2707                      beq             kb_hit          ; si es nulo apretaron un boton
 1096  25CC 48                        lsla                            ; cambio mascara para proxima columna
 1097  25CD A702                      staa            MASK_COL,X
 1098  25CF 6C00                      inc             KB_PRESS,X      ; incremento numero de tecla
 1099  25D1 20EE                      bra             kb_col
 1100                 
 1101  25D3 A600      kb_hit          ldaa            KB_PRESS,X      ; apretaron una tecla, lo comparo
 1102  25D5 B141FA                    cmpa            kb_buff         ; con la que fue apretada antes
 1103  25D8 2602                      bne             kb_end          ; aviso por led
 1104                 
 1105  25DA 86FF      kb_none         ldaa            #NONE           ; en caso de que no apreten nada
 1106                 
 1107  25DC B741FA    kb_end          staa            kb_buff         ; actualizo variable
 1108                                         
 1109                 * elimino variables locales
 1110  25DF                           %RELMEM         1
    /  25DF                           IF 1 > 0
    /  25DF 30                        tsx
    /  25E0 8F                        xgdx
    /  25E1 C30001                    addd    #1
    /  25E4 8F                        xgdx
    /  25E5 35                        txs
    /  25E6                           ENDIF           
 1111  25E6                           %RELMEM         1
    /  25E6                           IF 1 > 0
    /  25E6 30                        tsx
    /  25E7 8F                        xgdx
    /  25E8 C30001                    addd    #1
    /  25EB 8F                        xgdx
    /  25EC 35                        txs
    /  25ED                           ENDIF           
 1112  25ED                           %RELMEM         1
    /  25ED                           IF 1 > 0
    /  25ED 30                        tsx
    /  25EE 8F                        xgdx
    /  25EF C30001                    addd    #1
    /  25F2 8F                        xgdx
    /  25F3 35                        txs
    /  25F4                           ENDIF           
 1113  25F4                           %RELMEM         1
    /  25F4                           IF 1 > 0
    /  25F4 30                        tsx
    /  25F5 8F                        xgdx
    /  25F6 C30001                    addd    #1
    /  25F9 8F                        xgdx
    /  25FA 35                        txs
    /  25FB                           ENDIF           
 1114                 
 1115                 * restore de registros
 1116  25FB 33                        pulb
 1117  25FC 38                        pulx
 1118                                 
 1119  25FD 39                        rts
 1120                 
 1121                 *----------------------------------------------
 1122                 * init_kb: subrutina para inicializar teclado
 1123                 *----------------------------------------------
 1124                 
 1125  25FE           init_kb         EQU             *
 1126                 
 1127                 * back up de registros
 1128  25FE 36                        psha
 1129                 
 1130                 * inicializacion de teclado             
 1131  25FF 86FF                      ldaa            #NONE
 1132  2601 B741FA                    staa            kb_buff
 1133                 
 1134                 * restore de registros
 1135  2604 32                        pula
 1136  2605 39                        rts
 1137                 
 1138                 *--------------------------------
 1139                 * Inicializa display (y teclado)
 1140                 *--------------------------------
 1141                 
 1142  2606           initdis         EQU             *
 1143                         
 1144  2606 36                        psha
 1145                 
 1146  2607 860F                      ldaa            #$0F       ;set for input/output
 1147  2609 B71007                    staa            DDRC       ;C output
 1148  260C B61002                    ldaa            PIOC       ;get current value
 1149  260F 84FE                      anda            #$FE       ;reset bit 0 to 0
 1150  2611 B71002                    staa            PIOC       ;send it out
 1151                         
 1152  2614 32                        pula
 1153  2615 39                        rts
 1154                 
 1155                 *--------------------------------------------------------------
 1156                 * sh_value: toma un string, desplaza los caracteres a izquierda
 1157                 *           y agrega un nuevo caracter
 1158                 *           IX: direccion del string
 1159                 *           AccA: nuevo valor
 1160                 *--------------------------------------------------------------
 1161                 
 1162  2616           sh_value        EQU             *
 1163                 
 1164                 * back up de registros
 1165  2616 3C                        pshx
 1166  2617 37                        pshb
 1167                 
 1168                 * loop para desplazar caracteres
 1169  2618 E601      v_loop          ldab            1,X             ;tomo elemento siguiente en string
 1170  261A 2705                      beq             v_end
 1171  261C E700                      stab            0,X             ;y lo guardo en posicion actual
 1172  261E 08                        inx
 1173  261F 20F7                      bra             v_loop          
 1174                 
 1175  2621 A700      v_end           staa            0,X             ;ingresa nuevo caracter en cadena desplazada
 1176                 
 1177                 * restore de registros
 1178  2623 33                        pulb
 1179  2624 38                        pulx
 1180  2625 39                        rts
 1181                 
 1182                 *----------------------------------------------
 1183                 * toAscii: toma numero de boton del teclado
 1184                 *          y devuelve su correspondiente en
 1185                 *          ascii
 1186                 *          toma  AccB: valor del boton
 1187                 *          devuelve AccB: ascii
 1188                 *----------------------------------------------
 1189                 
 1190  2626           to_ascii        EQU             *
 1191                 
 1192                 * back up de registros
 1193  2626 3C                        pshx
 1194                 
 1195                 * inicializacion de variables
 1196  2627 CE4211                    ldx             #kb_ascii       ; apunto a string con caracteres asignados por tecla
 1197  262A 3A                        abx                             ; me muevo en string con indice y recupero segun tecla presionada
 1198  262B E600                      ldab            0,X             
 1199                 
 1200                 * restore de registros
 1201  262D 38                        pulx
 1202  262E 39                        rts
 1203                 
 1204                 *--------------------------------
 1205                 *Outchar: ACCA: Carácter a enviar
 1206                 *           ACCB: Posición (0-3)
 1207                 *--------------------------------
 1208  262F           outchar         EQU             *
 1209                         
 1210  262F F71005                    stab            PORTCL          ;set the position 
 1211  2632 B71004                    staa            PORTB           ;set the character
 1212                         
 1213  2635 39                        rts
 1214                 
 1215                 *-------------------------
 1216                 * clr_dis: Limpia display
 1217                 *-------------------------
 1218                 
 1219  2636           clr_dis         EQU             *
 1220                 
 1221                 * hago back up de registros
 1222  2636 37                        pshb
 1223  2637 36                        psha
 1224                 
 1225                 * inicializo el contador de posiciones
 1226  2638 C604                      ldab            #LENGTH
 1227                 
 1228                 * loop para limpiar cada posicion
 1229  263A 5A        clrloop         decb
 1230  263B 2B07                      bmi             clr_end         ; si no pase por todas las posiciones
 1231  263D 8620                      ldaa            #ESP            ; cargo en esta posicion espacio blanco
 1232  263F BD262F                    jsr             outchar         ; y lo envio
 1233  2642 20F6                      bra             clrloop         
 1234                 
 1235                 * restore de registros
 1236  2644 32        clr_end         pula
 1237  2645 33                        pulb
 1238  2646 39                        rts
 1239                 
 1240                 *-------------------------------------------------------
 1241                 * clrarray: subrutina para limpiar un array dado
 1242                 * parametros: IX direccion del array
 1243                 *             AccA cantidad de elementos del array
 1244                 *             AccB caracter a poner
 1245                 *-------------------------------------------------------
 1246                 
 1247  2647           clrarray        EQU             *
 1248                                 
 1249  2647 4A        cra_loop        deca                            ;contador con cantidad de elementos a limpiar
 1250  2648 2705                      beq             cra_end
 1251  264A E700                      stab            0,X             ;reemplazar elemento por caracter a poner
 1252  264C 08                        inx
 1253  264D 20F8                      bra             cra_loop
 1254                                 
 1255  264F E700      cra_end         stab            0,X
 1256  2651 39                        rts
 1257                 
 1258                 *=============================================
 1259                 *Subrutina winner: Recibe por stack un 1 si
 1260                 *gano el player 1 y un 0 si gano el player 2.
 1261                 *=============================================
 1262                 
 1263                                 
 1264  2652           winner          EQU             *
 1265  2652                           %BACKUP
    /  2652 36                        psha
    /  2653 37                        pshb
    /  2654 3C                        pshx
    /  2655 183C                      pshy
 1266  2657 30                        tsx
 1267  2658 A608                      ldaa            8,x     ;recupero parametro enviado por stack
 1268  265A 2708                      beq             win2
 1269                 
 1270  265C           win1            EQU             *
 1271  265C CE4256                    ldx             #string1
 1272  265F BD2569                    jsr             show
 1273  2662 2006                      bra             end
 1274                 
 1275  2664           win2            EQU             *
 1276  2664 CE425B                    ldx             #string2
 1277  2667 BD2569                    jsr             show
 1278                         
 1279  266A           end             EQU             *
 1280  266A                           %RESTORE
    /  266A 1838                      puly
    /  266C 38                        pulx
    /  266D 33                        pulb
    /  266E 32                        pula
 1281  266F 39                        rts
 1282                 
 1283                 *=============================================
 1284                 *Subrutina turn: Recibe por stack un 1 si
 1285                 *juega el player 1 y un 0 si juega el player 2.
 1286                 *=============================================
 1287                 
 1288  2670           turn            EQU             *
 1289  2670                           %BACKUP
    /  2670 36                        psha
    /  2671 37                        pshb
    /  2672 3C                        pshx
    /  2673 183C                      pshy
 1290  2675 30                        tsx
 1291  2676 A608                      ldaa            8,x
 1292  2678 2708                      beq             p2_t
 1293                 
 1294  267A           p1_t            EQU             *
 1295  267A CE4260                    ldx             #play1
 1296  267D BD2569                    jsr             show
 1297  2680 20E8                      bra             end
 1298                         
 1299  2682           p2_t            EQU             *
 1300  2682 CE4264                    ldx             #play2
 1301  2685 BD2569                    jsr             show
 1302                 
 1303  2688           end_t           EQU             *
 1304  2688                           %RESTORE        
    /  2688 1838                      puly
    /  268A 38                        pulx
    /  268B 33                        pulb
    /  268C 32                        pula
 1305  268D 39                        rts
 1306                 
 1307                 *************
 1308                 * VARIABLES *
 1309                 *************
 1310                 ***STACK***
 1311  4000                           ORG             $4000
 1312  4000           stack           RMB             500
 1313  41F3           STACKP          EQU             *-1
 1314                 
 1315                 ***MAIN VARIABLES***
 1316  41F4           player          RMB             1               ;variable de jugador
 1317  41F5           letra_p         RMB             1
 1318  41F6           num_p           RMB             1
 1319  41F7           cant_sub        RMB             1
 1320  41F8           cant_shi        RMB             1
 1321  41F9           tot_pos         RMB             1
 1322                 
 1323                 ***KEYBOARD VARIABLES***
 1324  41FA           kb_buff         RMB             1
 1325  41FB           buffer          RMB             1
 1326                 
 1327  41FC 20202020  string          FCC             '    '
 1328  4200 00                        FCB             0
 1329                 
 1330  4201 0A0B0CFF  kb_value        FCB             10,11,12,255,13,14,15,255,1,2,3,255,4,5,6,255
       4205 0D0E0FFF
       4209 010203FF
       420D 040506FF
 1331                 
 1332  4211 41424320  kb_ascii        FCC             'ABC DEF 123 456'
       4215 44454620
       4219 31323320
       421D 343536
 1333                 
 1334                 ***ARREGLO DE BARCOS TOCADOS***
 1335  0005           SUB             EQU             5
 1336  0004           SHI             EQU             4
 1337  0002           EL_SIZE         EQU             2
 1338  000D           MAX_ATT         EQU             SUB*1+SHI*2
 1339  001B           HITSIZE         EQU             EL_SIZE*MAX_ATT+1
 1340  4220           hitlist         RMB             HITSIZE*2
 1341                 
 1342                 ***DISPLAY MESSAGES VARIABLES***
 1343  4256 57494E31  string1         FCC     'WIN1'
 1344  425A 00                        FCB     00
 1345  425B 57494E32  string2         FCC     'WIN2'
 1346  425F 00                        FCB     00
 1347                 
 1348  4260 5031      play1           FCC     'P1'
 1349  4262 0000                      FCB     0,0
 1350  4264 5032      play2           FCC     'P2'
 1351  4266 0000                      FCB     0,0
 1352                 
 1353  4268 5355424D  subm            FCC     'SUBM'
 1354  426C 43415247  carg            FCC     'CARG'
 1355                 
 1356                 ***MATRICES DE TABLERO DE CADA JUGADOR***
 1357  5000                           ORG             $5000
 1358  5000 83830303  p_board         FCB             SHI_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,SUB_NP
       5004 0343
 1359  5006 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP
       500A 8303
 1360  500C 03038303                  FCB             WAT_NP,WAT_NP,SHI_NP,WAT_NP,SHI_NP,WAT_NP
       5010 8303
 1361  5012 03830303                  FCB             WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5016 0303
 1362  5018 03830343                  FCB             WAT_NP,SHI_NP,WAT_NP,SUB_NP,WAT_NP,SUB_NP
       501C 0343
 1363  501E 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,SUB_NP,WAT_NP
       5022 4303
 1364                 
 1365  5024 83038303                  FCB             SHI_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP,SUB_NP
       5028 0343
 1366  502A 83038303                  FCB             SHI_NP,WAT_NP,SHI_NP,WAT_NP,WAT_NP,WAT_NP
       502E 0303
 1367  5030 03430303                  FCB             WAT_NP,SUB_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP
       5034 8303
 1368  5036 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,SHI_NP,WAT_NP
       503A 8303
 1369  503C 03034303                  FCB             WAT_NP,WAT_NP,SUB_NP,WAT_NP,WAT_NP,WAT_NP
       5040 0303
 1370  5042 83830343                  FCB             SHI_NP,SHI_NP,WAT_NP,SUB_NP,WAT_NP,SUB_NP
       5046 0343
 1371                 
 1372                 ***MATRIZ DE DISPLAY***
 1373  5F00                           ORG             $5F00
 1374  5F00 03030303  display         FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F04 0303
 1375  5F06 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F0A 0303
 1376  5F0C 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F10 0303
 1377  5F12 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F16 0303
 1378  5F18 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F1C 0303
 1379  5F1E 03030303                  FCB             WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP,WAT_NP
       5F22 0303
 1380                 
 1381                                 
 1382  5F24                           END

    Errors:  None         ###########
    Bytes:   1848         # main_bn #
    CRC:     24AD         ###########

